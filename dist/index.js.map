{"version":3,"sources":["../src/contexts/ThemeContext.tsx","../src/app/obsidian-editor/themes/vanilla/themeConnector.ts","../src/app/obsidian-editor/themes/vanilla/index.ts","../src/app/obsidian-editor/utils/theme.ts","../node_modules/@lezer/common/dist/index.js","../node_modules/@lezer/lr/dist/index.js","../node_modules/@lezer/html/dist/index.js","../node_modules/@lezer/css/dist/index.js","../node_modules/@codemirror/lang-css/dist/index.js","../node_modules/@lezer/javascript/dist/index.js","../node_modules/@codemirror/lang-javascript/dist/index.js","../node_modules/@codemirror/lang-html/dist/index.js","../node_modules/@codemirror/lang-markdown/dist/index.js","../src/app/obsidian-editor/extensions/markdown-support/index.ts","../src/app/obsidian-editor/extensions/lezer-safety-plugin.ts","../src/app/obsidian-editor/extensions/markdown-syntax/rules/utils.ts","../src/app/obsidian-editor/extensions/markdown-syntax/rules/headingDecorator.ts","../src/app/obsidian-editor/extensions/markdown-syntax/rules/baseDecorator.ts","../src/app/obsidian-editor/extensions/markdown-syntax/rules/boldDecorator.ts","../src/app/obsidian-editor/extensions/markdown-syntax/rules/italicDecorator.ts","../src/app/obsidian-editor/extensions/markdown-syntax/rules/strikethroughDecorator.ts","../src/app/obsidian-editor/extensions/markdown-syntax/rules/codeDecorator.ts","../src/app/obsidian-editor/extensions/markdown-syntax/rules/highlightDecorator.ts","../src/app/obsidian-editor/extensions/markdown-syntax/rules/oldBoldDecorator.ts","../src/app/obsidian-editor/extensions/markdown-syntax/rules/oldItalicDecorator.ts","../src/app/obsidian-editor/extensions/markdown-syntax/rules/listDecorator.ts","../src/app/obsidian-editor/extensions/markdown-syntax/rules/FencedCodeBlockDecorator.ts","../src/app/obsidian-editor/extensions/markdown-syntax/rules/horizontalRuleDecorator.ts","../src/app/obsidian-editor/extensions/markdown-syntax/rules/lineBreakDecorator.ts","../src/app/obsidian-editor/extensions/markdown-syntax/html-decorator/types.ts","../src/app/obsidian-editor/extensions/markdown-syntax/html-decorator/html-widget.ts","../src/app/obsidian-editor/extensions/markdown-syntax/html-decorator/syntax-highlighter.ts","../src/app/obsidian-editor/extensions/markdown-syntax/html-decorator/tag-detector.ts","../src/app/obsidian-editor/extensions/markdown-syntax/html-decorator/decorations.ts","../src/app/obsidian-editor/extensions/markdown-syntax/html-decorator/cssVarStyles.ts","../src/app/obsidian-editor/extensions/markdown-syntax/html-decorator/styles.ts","../src/app/obsidian-editor/extensions/markdown-syntax/html-decorator/index.ts","../src/app/obsidian-editor/extensions/markdown-syntax/rules/blockquoteDecorator.ts","../src/app/obsidian-editor/extensions/MarkdownSyntaxHider.ts","../src/app/obsidian-editor/utils/formatting/linkAndListFormatting.ts","../src/app/obsidian-editor/utils/formatting/indentationUtils.ts","../src/app/obsidian-editor/extensions/AtomicIndents.ts","../src/app/obsidian-editor/extensions/markdown-syntax/index.ts","../src/app/obsidian-editor/extensions/markdown.ts","../src/app/obsidian-editor/extensions/keymaps.ts","../src/app/obsidian-editor/extensions/markdown/no-formatting.ts","../src/app/obsidian-editor/extensions/index.ts","../src/app/obsidian-editor/utils/formatting/markdownFormatting.ts","../src/app/obsidian-editor/utils/formatting/index.ts","../src/app/obsidian-editor/utils/editorExtensions.ts","../src/app/obsidian-editor/components/EditorCore.tsx","../src/app/obsidian-editor/components/ThemeSwitcher.tsx","../src/app/obsidian-editor/components/EditorToolbar.tsx","../src/app/obsidian-editor/CodeMirrorEditor.tsx","../src/components/Editor.tsx","../src/components/ThemeToggle.tsx"],"names":["createContext","useState","useEffect","jsx","useContext","EditorView","HighlightStyle","tags","parser","id","IterMode","data","cache","children","positions","node","buffer","contextHash","length","lookAhead","pair","nodeSize","from","to","done","inner","r","pos","i","FragmentCursor","values","styleTags","attrs","dash","identifier","callee","syntaxTree","continuedIndent","foldInside","LanguageSupport","newline","space","slash","question","bracketL","LRLanguage","indentNodeProp","flatIndent","delimitedIndent","foldNodeProp","defineLanguageFacet","sublanguageProp","ifNotIn","completeFromList","state","base","EditorSelection","elementName","autoCloseTags","selfClosers","foldService","Language","GFM","Subscript","Superscript","Emoji","languages","LanguageDescription","ParseContext","indentUnit","countColumn","insert","changes","MarkdownParser","parseCode","Prec","keymap","CompletionContext","EditorState","StateEffect","StateField","ViewPlugin","Decoration","isInsideHtml","WidgetType","view","RangeSetBuilder","html","tagStart","DEBUG","spaces","CMEditorView","RangeSet","setMarkdownSyntaxMode","Compartment","markdownKeymap","defaultKeymap","historyKeymap","history","highlightActiveLine","highlightActiveLineGutter","syntaxHighlighting","useRef","jsxs","Fragment"],"mappings":"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","file":"index.js","sourcesContent":["'use client';\r\n\r\nimport React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\n/**\r\n * Represents the possible theme states.\r\n */\r\nexport type Theme = 'light' | 'dark';\r\n\r\n/**\r\n * Defines the shape of the ThemeContext.\r\n */\r\nexport interface ThemeContextType {\r\n  /** The current active theme ('light' or 'dark'). */\r\n  theme: Theme;\r\n  /** Function to toggle the current theme. */\r\n  toggleTheme: () => void;\r\n  /** Whether the provider has mounted on the client */\r\n  mounted: boolean;\r\n}\r\n\r\n// Create the context with a default value\r\nconst ThemeContext = createContext<ThemeContextType>({\r\n  theme: 'light',\r\n  mounted: false,\r\n  toggleTheme: () => {},\r\n});\r\n\r\n/**\r\n * Provides the theme state and toggle function to its children components.\r\n * It handles theme persistence in localStorage and synchronization with system preferences.\r\n *\r\n * @param {object} props - The component props.\r\n * @param {React.ReactNode} props.children - The child components to be wrapped by the provider.\r\n * @returns {JSX.Element} The ThemeProvider component (always renders children to avoid hydration issues).\r\n */\r\nexport const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  // Use state to track both theme and mounting status\r\n  const [theme, setTheme] = useState<Theme>('light');\r\n  const [mounted, setMounted] = useState(false);\r\n\r\n  // Effect for initializing theme\r\n  useEffect(() => {\r\n    // Get stored theme or detect from system preferences\r\n    const storedTheme = localStorage.getItem('theme');\r\n    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n    \r\n    if (storedTheme === 'dark' || (!storedTheme && prefersDark)) {\r\n      setTheme('dark');\r\n      document.documentElement.classList.add('dark');\r\n    } else {\r\n      setTheme('light');\r\n      document.documentElement.classList.remove('dark');\r\n    }\r\n    \r\n    // Mark as mounted to prevent SSR hydration mismatch\r\n    setMounted(true);\r\n  }, []);\r\n\r\n  // Toggle theme function\r\n  const toggleTheme = () => {\r\n    const newTheme = theme === 'light' ? 'dark' : 'light';\r\n    setTheme(newTheme);\r\n    localStorage.setItem('theme', newTheme);\r\n    \r\n    // Apply the theme to the document\r\n    if (newTheme === 'dark') {\r\n      document.documentElement.classList.add('dark');\r\n    } else {\r\n      document.documentElement.classList.remove('dark');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, mounted, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\n/**\r\n * Custom hook to access the theme context (theme state and toggle function).\r\n * This hook must be used within a component wrapped by `ThemeProvider`.\r\n *\r\n * @throws {Error} If used outside of a `ThemeProvider`.\r\n * @returns {ThemeContextType} The theme context.\r\n */\r\nexport const useTheme = () => useContext(ThemeContext);\r\n\r\n/**\r\n * Apply the HTML theme class to document\r\n */\r\nfunction applyThemeToHTML(theme: Theme, isMounted: boolean = false) {\r\n  if (typeof document !== 'undefined') {\r\n    // Add theme class to HTML element\r\n    if (theme === 'dark') {\r\n      document.documentElement.classList.add('dark');\r\n      document.documentElement.classList.remove('light');\r\n      \r\n      document.body.classList.add('dark');\r\n      document.body.classList.remove('light');\r\n      \r\n      // Only set CSS variables on client-side after mounting to avoid hydration mismatches\r\n      if (isMounted) {\r\n        // Set CSS variables for dark mode\r\n        document.documentElement.style.setProperty('--background-primary', '#1e1e1e');\r\n        document.documentElement.style.setProperty('--background-secondary', '#252525');\r\n        document.documentElement.style.setProperty('--text-normal', '#dcddde');\r\n      }\r\n    } else {\r\n      document.documentElement.classList.add('light');\r\n      document.documentElement.classList.remove('dark');\r\n      \r\n      document.body.classList.add('light');\r\n      document.body.classList.remove('dark');\r\n      \r\n      // Only set CSS variables on client-side after mounting to avoid hydration mismatches\r\n      if (isMounted) {\r\n        // Set CSS variables for light mode\r\n        document.documentElement.style.setProperty('--background-primary', '#ffffff');\r\n        document.documentElement.style.setProperty('--background-secondary', '#f5f5f5');\r\n        document.documentElement.style.setProperty('--text-normal', '#1e1e1e');\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { EditorView } from \"@codemirror/view\";\r\nimport { HighlightStyle } from \"@codemirror/language\";\r\nimport { tags } from \"@lezer/highlight\";\r\n\r\n// Create vanilla light theme from CSS variables\r\nexport function createVanillaLightTheme() {\r\n  return EditorView.theme(\r\n    {\r\n      \"&\": {\r\n        color: \"var(--vanilla-light-text-normal, #2c2c2c)\",\r\n        backgroundColor: \"var(--vanilla-light-background-primary, #fcfcfc)\",\r\n      },\r\n      \"&.cm-editor\": {\r\n        \"&::before\": {\r\n          content: '\"\"',\r\n          position: \"absolute\",\r\n          top: 0,\r\n          left: 0,\r\n          right: 0,\r\n          bottom: 0,\r\n          zIndex: -1,\r\n          pointerEvents: \"none\",\r\n        }\r\n      },\r\n      \".cm-content\": { \r\n        caretColor: \"var(--vanilla-light-cursor, #625772)\",\r\n        fontFamily: \"'SF Mono', Consolas, 'Liberation Mono', Menlo, monospace\",\r\n      },\r\n      \".cm-gutters\": {\r\n        backgroundColor: \"var(--vanilla-light-background-secondary, #f5f5f5)\",\r\n        color: \"var(--vanilla-light-text-muted, #707070)\",\r\n        border: \"none\",\r\n      },\r\n      \".cm-activeLine\": { \r\n        backgroundColor: \"var(--vanilla-light-active-line, rgba(0, 0, 0, 0.03))\",\r\n      },\r\n      \".cm-activeLineGutter\": {\r\n        backgroundColor: \"var(--vanilla-light-active-line-gutter, rgba(0, 0, 0, 0.05))\",\r\n      },\r\n      \".cm-selectionBackground\": { \r\n        backgroundColor: \"var(--vanilla-light-selection-bg, rgba(98, 87, 114, 0.15))\",\r\n      },\r\n      \".cm-line\": { padding: \"0 4px\" },\r\n      \".cm-cursor\": {\r\n        borderLeftWidth: \"2px\",\r\n        borderLeftColor: \"var(--vanilla-light-cursor, #625772)\",\r\n      },\r\n      \"&.cm-focused .cm-cursor\": {\r\n        borderLeftColor: \"var(--vanilla-light-cursor, #625772)\",\r\n      },\r\n      \"&.cm-focused .cm-selectionBackground\": {\r\n        backgroundColor: \"var(--vanilla-light-selection-bg, rgba(98, 87, 114, 0.15))\",\r\n      },\r\n      \".cm-tooltip\": {\r\n        backgroundColor: \"var(--vanilla-light-background-primary, #fcfcfc)\",\r\n        border: \"1px solid var(--vanilla-light-border-color, #e2e2e2)\",\r\n        boxShadow: \"var(--vanilla-light-shadow, 0 1px 3px rgba(0, 0, 0, 0.08))\",\r\n      },\r\n    },\r\n    { dark: false }\r\n  );\r\n}\r\n\r\n// Create vanilla dark theme from CSS variables\r\nexport function createVanillaDarkTheme() {\r\n  return EditorView.theme(\r\n    {\r\n      \"&\": {\r\n        color: \"var(--vanilla-dark-text-normal, #e0e0e0)\",\r\n        backgroundColor: \"var(--vanilla-dark-background-primary, #262626)\",\r\n      },\r\n      \"&.cm-editor\": {\r\n        \"&::before\": {\r\n          content: '\"\"',\r\n          position: \"absolute\",\r\n          top: 0,\r\n          left: 0,\r\n          right: 0,\r\n          bottom: 0,\r\n          zIndex: -1,\r\n          pointerEvents: \"none\",\r\n        }\r\n      },\r\n      \".cm-content\": { \r\n        caretColor: \"var(--vanilla-dark-cursor, #bfb1d5)\",\r\n        fontFamily: \"'SF Mono', Consolas, 'Liberation Mono', Menlo, monospace\",\r\n      },\r\n      \".cm-gutters\": {\r\n        backgroundColor: \"var(--vanilla-dark-background-secondary, #2d2d2d)\",\r\n        color: \"var(--vanilla-dark-text-muted, #a0a0a0)\",\r\n        border: \"none\",\r\n      },\r\n      \".cm-activeLine\": { \r\n        backgroundColor: \"var(--vanilla-dark-active-line, rgba(255, 255, 255, 0.05))\",\r\n      },\r\n      \".cm-activeLineGutter\": {\r\n        backgroundColor: \"var(--vanilla-dark-active-line-gutter, rgba(255, 255, 255, 0.08))\",\r\n      },\r\n      \".cm-selectionBackground\": { \r\n        backgroundColor: \"var(--vanilla-dark-selection-bg, rgba(191, 177, 213, 0.2))\",\r\n      },\r\n      \".cm-line\": { padding: \"0 4px\" },\r\n      \".cm-cursor\": {\r\n        borderLeftWidth: \"2px\",\r\n        borderLeftColor: \"var(--vanilla-dark-cursor, #bfb1d5)\",\r\n      },\r\n      \"&.cm-focused .cm-cursor\": {\r\n        borderLeftColor: \"var(--vanilla-dark-cursor, #bfb1d5)\",\r\n      },\r\n      \"&.cm-focused .cm-selectionBackground\": {\r\n        backgroundColor: \"var(--vanilla-dark-selection-bg, rgba(191, 177, 213, 0.2))\",\r\n      },\r\n      \".cm-tooltip\": {\r\n        backgroundColor: \"var(--vanilla-dark-background-primary, #262626)\",\r\n        border: \"1px solid var(--vanilla-dark-border-color, #3d3d3d)\",\r\n        boxShadow: \"var(--vanilla-dark-shadow, 0 2px 6px rgba(0, 0, 0, 0.25))\",\r\n      },\r\n    },\r\n    { dark: true }\r\n  );\r\n}\r\n\r\n// Create highlight styles for syntax highlighting\r\nexport function createVanillaHighlightStyle() {\r\n  return HighlightStyle.define([\r\n    // Light theme styles\r\n    {\r\n      tag: tags.heading1,\r\n      fontSize: \"1.6em\",\r\n      fontWeight: \"bold\",\r\n      color: \"var(--vanilla-light-heading-color, #42404d)\",\r\n      class: \"light-mode\"\r\n    },\r\n    {\r\n      tag: tags.heading2,\r\n      fontSize: \"1.4em\",\r\n      fontWeight: \"bold\",\r\n      color: \"var(--vanilla-light-heading-color, #42404d)\",\r\n      class: \"light-mode\"\r\n    },\r\n    {\r\n      tag: tags.heading3,\r\n      fontSize: \"1.2em\",\r\n      fontWeight: \"bold\",\r\n      color: \"var(--vanilla-light-heading-color, #42404d)\",\r\n      class: \"light-mode\"\r\n    },\r\n    {\r\n      tag: tags.heading4,\r\n      fontSize: \"1.1em\",\r\n      fontWeight: \"bold\",\r\n      color: \"var(--vanilla-light-heading-color, #42404d)\",\r\n      class: \"light-mode\"\r\n    },\r\n    {\r\n      tag: tags.heading5,\r\n      fontSize: \"1.1em\",\r\n      fontWeight: \"bold\",\r\n      color: \"var(--vanilla-light-heading-color, #42404d)\",\r\n      class: \"light-mode\"\r\n    },\r\n    {\r\n      tag: tags.heading6,\r\n      fontSize: \"1.1em\",\r\n      fontWeight: \"bold\",\r\n      color: \"var(--vanilla-light-heading-color, #42404d)\",\r\n      class: \"light-mode\"\r\n    },\r\n    {\r\n      tag: tags.emphasis,\r\n      fontStyle: \"italic\",\r\n      color: \"var(--vanilla-light-emphasis-color, #2c2c2c)\",\r\n      class: \"light-mode\"\r\n    },\r\n    {\r\n      tag: tags.strong,\r\n      fontWeight: \"bold\",\r\n      color: \"var(--vanilla-light-strong-color, #222222)\",\r\n      class: \"light-mode\"\r\n    },\r\n    {\r\n      tag: tags.link,\r\n      color: \"var(--vanilla-light-link-color, #625772)\",\r\n      textDecoration: \"underline\",\r\n      class: \"light-mode\"\r\n    },\r\n    {\r\n      tag: tags.monospace,\r\n      fontFamily: \"'SF Mono', Consolas, 'Liberation Mono', Menlo, monospace\",\r\n      fontSize: \"0.9em\",\r\n      color: \"var(--vanilla-light-code-color, #625772)\",\r\n      class: \"light-mode\"\r\n    },\r\n    \r\n    // Dark theme styles\r\n    {\r\n      tag: tags.heading1,\r\n      fontSize: \"1.6em\",\r\n      fontWeight: \"bold\",\r\n      color: \"var(--vanilla-dark-heading-color, #e6e0f0)\",\r\n      class: \"dark-mode\"\r\n    },\r\n    {\r\n      tag: tags.heading2,\r\n      fontSize: \"1.4em\",\r\n      fontWeight: \"bold\",\r\n      color: \"var(--vanilla-dark-heading-color, #e6e0f0)\",\r\n      class: \"dark-mode\"\r\n    },\r\n    {\r\n      tag: tags.heading3,\r\n      fontSize: \"1.2em\",\r\n      fontWeight: \"bold\",\r\n      color: \"var(--vanilla-dark-heading-color, #e6e0f0)\",\r\n      class: \"dark-mode\"\r\n    },\r\n    {\r\n      tag: tags.heading4,\r\n      fontSize: \"1.1em\",\r\n      fontWeight: \"bold\",\r\n      color: \"var(--vanilla-dark-heading-color, #e6e0f0)\",\r\n      class: \"dark-mode\"\r\n    },\r\n    {\r\n      tag: tags.heading5,\r\n      fontSize: \"1.1em\",\r\n      fontWeight: \"bold\",\r\n      color: \"var(--vanilla-dark-heading-color, #e6e0f0)\",\r\n      class: \"dark-mode\"\r\n    },\r\n    {\r\n      tag: tags.heading6,\r\n      fontSize: \"1.1em\",\r\n      fontWeight: \"bold\",\r\n      color: \"var(--vanilla-dark-heading-color, #e6e0f0)\",\r\n      class: \"dark-mode\"\r\n    },\r\n    {\r\n      tag: tags.emphasis,\r\n      fontStyle: \"italic\",\r\n      color: \"var(--vanilla-dark-emphasis-color, #e0e0e0)\",\r\n      class: \"dark-mode\"\r\n    },\r\n    {\r\n      tag: tags.strong,\r\n      fontWeight: \"bold\",\r\n      color: \"var(--vanilla-dark-strong-color, #ffffff)\",\r\n      class: \"dark-mode\"\r\n    },\r\n    {\r\n      tag: tags.link,\r\n      color: \"var(--vanilla-dark-link-color, #bfb1d5)\",\r\n      textDecoration: \"underline\",\r\n      class: \"dark-mode\"\r\n    },\r\n    {\r\n      tag: tags.monospace,\r\n      fontFamily: \"'SF Mono', Consolas, 'Liberation Mono', Menlo, monospace\",\r\n      fontSize: \"0.9em\",\r\n      color: \"var(--vanilla-dark-code-color, #bfb1d5)\",\r\n      class: \"dark-mode\"\r\n    },\r\n  ]);\r\n} ","import { createVanillaLightTheme, createVanillaDarkTheme, createVanillaHighlightStyle } from './themeConnector';\r\n\r\n// Pre-create instances of themes for export\r\nexport const vanillaLightTheme = createVanillaLightTheme();\r\nexport const vanillaDarkTheme = createVanillaDarkTheme();\r\nexport const vanillaHighlightStyle = createVanillaHighlightStyle();\r\n\r\n// Theme object for easy import\r\nexport const vanillaTheme = {\r\n  light: vanillaLightTheme,\r\n  dark: vanillaDarkTheme,\r\n  highlight: vanillaHighlightStyle\r\n}; ","/**\r\n * @fileoverview Theme utilities for the editor\r\n * @module obsidian-editor/utils/theme\r\n */\r\n\r\n/**\r\n * This file contains theme configurations for the CodeMirror editor.\r\n */\r\nimport { EditorView } from '@codemirror/view';\r\nimport { vanillaLightTheme, vanillaDarkTheme } from '../themes/vanilla';\r\n\r\n/**\r\n * Available editor theme names\r\n */\r\nexport type EditorThemeName = 'default' | 'vanilla';\r\n\r\n// Local storage key for the editor theme\r\nconst THEME_STORAGE_KEY = 'obsidian-js-editor-theme';\r\n\r\n// Default theme if none is set\r\nconst DEFAULT_THEME: EditorThemeName = 'default';\r\n\r\n/**\r\n * Get the current document theme (light/dark) based on system preferences\r\n */\r\nexport const getCurrentDocumentTheme = (): 'light' | 'dark' => {\r\n  if (typeof window !== 'undefined') {\r\n    // First check for explicitly set theme in localStorage\r\n    const storedTheme = localStorage.getItem('obsidian-theme');\r\n    if (storedTheme === 'light' || storedTheme === 'dark') {\r\n      return storedTheme;\r\n    }\r\n    \r\n    // Fall back to system preference\r\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\r\n      return 'dark';\r\n    }\r\n  }\r\n  return 'light';\r\n};\r\n\r\n/**\r\n * Get the current editor theme from localStorage or use the default\r\n * \r\n * @returns The current editor theme name\r\n */\r\nexport function getCurrentEditorTheme(): EditorThemeName {\r\n  if (typeof window === 'undefined') {\r\n    return DEFAULT_THEME;\r\n  }\r\n  \r\n  const storedTheme = localStorage.getItem(THEME_STORAGE_KEY) as EditorThemeName | null;\r\n  return storedTheme || DEFAULT_THEME;\r\n}\r\n\r\n/**\r\n * Set the editor theme and save it to localStorage\r\n * \r\n * @param themeName - The theme name to set\r\n */\r\nexport function setEditorTheme(themeName: EditorThemeName): void {\r\n  if (typeof window === 'undefined') {\r\n    return;\r\n  }\r\n  \r\n  // Save to localStorage\r\n  localStorage.setItem(THEME_STORAGE_KEY, themeName);\r\n  \r\n  // Apply theme class to document\r\n  const root = document.documentElement;\r\n  const isDark = root.classList.contains('dark');\r\n  const mode = isDark ? 'dark' : 'light';\r\n  \r\n  // Set data-theme attribute for CSS targeting\r\n  root.setAttribute('data-theme', `${themeName}-${mode}`);\r\n  \r\n  // Dispatch custom event for theme change\r\n  const event = new CustomEvent('editorThemeChange', { \r\n    detail: { theme: themeName, mode } \r\n  });\r\n  document.dispatchEvent(event);\r\n}\r\n\r\n/**\r\n * Check if the current theme is dark mode\r\n * \r\n * @returns {boolean} True if in dark mode\r\n */\r\nexport function isEditorDarkMode(): boolean {\r\n  if (typeof window === 'undefined') return false; // Default for SSR\r\n  \r\n  return document.documentElement.classList.contains('dark');\r\n}\r\n\r\n/**\r\n * Toggle the editor theme between light and dark\r\n */\r\nexport function toggleEditorTheme(): void {\r\n  if (typeof window === 'undefined') return; // Skip for SSR\r\n  \r\n  const currentTheme = getCurrentEditorTheme();\r\n  const isDark = document.documentElement.classList.contains('dark');\r\n  \r\n  // Toggle dark mode class\r\n  document.documentElement.classList.toggle('dark');\r\n  \r\n  // Update theme attribute\r\n  const newMode = !isDark ? 'dark' : 'light';\r\n  document.documentElement.setAttribute('data-theme', `${currentTheme}-${newMode}`);\r\n}\r\n\r\n/**\r\n * Define CSS variables for Obsidian-like styling\r\n */\r\nconst obsidianCssVariables = {\r\n  light: {\r\n    '--background-primary': '#ffffff',\r\n    '--background-secondary': '#f8f8f8',\r\n    '--text-normal': '#2e3338',\r\n    '--text-muted': '#888888',\r\n    '--text-faint': '#999999',\r\n    '--text-error': '#e75545',\r\n    '--text-accent': '#705dcf',\r\n    '--interactive-normal': '#f2f3f5',\r\n    '--interactive-hover': '#e9e9e9',\r\n    '--interactive-accent': '#7b6cd9',\r\n    '--interactive-accent-hover': '#8875ff',\r\n    '--link-color': '#5E81AC',\r\n    '--hr-color': '#dcddde',\r\n    '--tag-color': '#2991e3',\r\n    '--selection-background': 'rgba(104, 134, 197, 0.3)',\r\n    '--code-background': 'rgba(0, 0, 0, 0.03)'\r\n  },\r\n  dark: {\r\n    '--background-primary': '#2b2b2b',\r\n    '--background-secondary': '#363636',\r\n    '--text-normal': '#dcddde',\r\n    '--text-muted': '#999999',\r\n    '--text-faint': '#666666',\r\n    '--text-error': '#ff3333',\r\n    '--text-accent': '#a277ff',\r\n    '--interactive-normal': '#3f3f3f',\r\n    '--interactive-hover': '#4a4a4a',\r\n    '--interactive-accent': '#7b6cd9',\r\n    '--interactive-accent-hover': '#8875ff',\r\n    '--link-color': '#a8c0e0',\r\n    '--hr-color': '#444444',\r\n    '--tag-color': '#4097e3',\r\n    '--selection-background': 'rgba(104, 134, 197, 0.2)',\r\n    '--code-background': 'rgba(255, 255, 255, 0.05)'\r\n  }\r\n};\r\n\r\n/**\r\n * Apply CSS variables to the document\r\n * @param theme - The theme to apply ('light' or 'dark')\r\n */\r\nconst applyThemeVariables = (theme: 'light' | 'dark') => {\r\n  if (typeof document !== 'undefined') {\r\n    const variables = obsidianCssVariables[theme];\r\n    const root = document.documentElement;\r\n    \r\n    Object.entries(variables).forEach(([key, value]) => {\r\n      root.style.setProperty(key, value);\r\n    });\r\n    \r\n    // Apply theme class to document\r\n    if (theme === 'dark') {\r\n      document.documentElement.classList.add('dark');\r\n      document.documentElement.classList.remove('light');\r\n    } else {\r\n      document.documentElement.classList.add('light');\r\n      document.documentElement.classList.remove('dark');\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Light theme for the editor (Obsidian default)\r\n */\r\nexport const lightTheme = EditorView.theme({\r\n  '&': {\r\n    backgroundColor: 'var(--background-primary, #ffffff)',\r\n    color: 'var(--text-normal, #2e3338)'\r\n  },\r\n  '.cm-content': {\r\n    caretColor: 'var(--text-normal, #2e3338)',\r\n  },\r\n  '.cm-cursor, .cm-dropCursor': {\r\n    borderLeftColor: 'var(--text-normal, #2e3338)'\r\n  },\r\n  '&.cm-focused .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection': {\r\n    backgroundColor: 'var(--selection-background, rgba(104, 134, 197, 0.3))'\r\n  },\r\n  '.cm-activeLine': {\r\n    backgroundColor: 'var(--background-secondary, #f5f6f8)'\r\n  },\r\n  '.cm-activeLineGutter': {\r\n    backgroundColor: 'var(--background-secondary, #f5f6f8)'\r\n  },\r\n}, { dark: false });\r\n\r\n/**\r\n * Dark theme for the editor (Obsidian default)\r\n */\r\nexport const darkTheme = EditorView.theme({\r\n  '&': {\r\n    backgroundColor: 'var(--background-primary, #202020)',\r\n    color: 'var(--text-normal, #dcddde)'\r\n  },\r\n  '.cm-content': {\r\n    caretColor: 'var(--text-normal, #dcddde)',\r\n  },\r\n  '.cm-cursor, .cm-dropCursor': {\r\n    borderLeftColor: 'var(--text-normal, #dcddde)'\r\n  },\r\n  '&.cm-focused .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection': {\r\n    backgroundColor: 'var(--selection-background, rgba(104, 134, 197, 0.2))'\r\n  },\r\n  '.cm-activeLine': {\r\n    backgroundColor: 'var(--background-secondary, #161616)'\r\n  },\r\n  '.cm-activeLineGutter': {\r\n    backgroundColor: 'var(--background-secondary, #161616)'\r\n  },\r\n}, { dark: true });\r\n\r\n// Re-export vanilla themes for easier access\r\nexport { vanillaLightTheme, vanillaDarkTheme };\r\n\r\n// Get the appropriate theme based on theme name and mode\r\nexport const getTheme = (themeName: EditorThemeName, mode: 'light' | 'dark') => {\r\n  if (themeName === 'vanilla') {\r\n    return mode === 'dark' ? vanillaDarkTheme : vanillaLightTheme;\r\n  } else {\r\n    return mode === 'dark' ? darkTheme : lightTheme;\r\n  }\r\n};\r\n\r\n// Apply theme variables when this module is loaded in browser\r\nif (typeof window !== 'undefined') {\r\n  // Wait until after hydration is complete\r\n  setTimeout(() => {\r\n    const initialTheme = getCurrentDocumentTheme();\r\n    applyThemeVariables(initialTheme);\r\n    \r\n    // Load theme CSS based on current editor theme\r\n    const editorTheme = getCurrentEditorTheme();\r\n    \r\n    // Listen for theme changes\r\n    if (window.matchMedia) {\r\n      window.matchMedia('(prefers-color-scheme: dark)')\r\n        .addEventListener('change', (e) => {\r\n          // Only update if no explicit theme is set in localStorage\r\n          if (!localStorage.getItem('obsidian-theme')) {\r\n            const newTheme = e.matches ? 'dark' : 'light';\r\n            applyThemeVariables(newTheme);\r\n          }\r\n        });\r\n    }\r\n  }, 0);\r\n} ","/**\nThe default maximum length of a `TreeBuffer` node.\n*/\nconst DefaultBufferLength = 1024;\nlet nextPropID = 0;\nclass Range {\n    constructor(from, to) {\n        this.from = from;\n        this.to = to;\n    }\n}\n/**\nEach [node type](#common.NodeType) or [individual tree](#common.Tree)\ncan have metadata associated with it in props. Instances of this\nclass represent prop names.\n*/\nclass NodeProp {\n    /**\n    Create a new node prop type.\n    */\n    constructor(config = {}) {\n        this.id = nextPropID++;\n        this.perNode = !!config.perNode;\n        this.deserialize = config.deserialize || (() => {\n            throw new Error(\"This node type doesn't define a deserialize function\");\n        });\n    }\n    /**\n    This is meant to be used with\n    [`NodeSet.extend`](#common.NodeSet.extend) or\n    [`LRParser.configure`](#lr.ParserConfig.props) to compute\n    prop values for each node type in the set. Takes a [match\n    object](#common.NodeType^match) or function that returns undefined\n    if the node type doesn't get this prop, and the prop's value if\n    it does.\n    */\n    add(match) {\n        if (this.perNode)\n            throw new RangeError(\"Can't add per-node props to node types\");\n        if (typeof match != \"function\")\n            match = NodeType.match(match);\n        return (type) => {\n            let result = match(type);\n            return result === undefined ? null : [this, result];\n        };\n    }\n}\n/**\nProp that is used to describe matching delimiters. For opening\ndelimiters, this holds an array of node names (written as a\nspace-separated string when declaring this prop in a grammar)\nfor the node types of closing delimiters that match it.\n*/\nNodeProp.closedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/**\nThe inverse of [`closedBy`](#common.NodeProp^closedBy). This is\nattached to closing delimiters, holding an array of node names\nof types of matching opening delimiters.\n*/\nNodeProp.openedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/**\nUsed to assign node types to groups (for example, all node\ntypes that represent an expression could be tagged with an\n`\"Expression\"` group).\n*/\nNodeProp.group = new NodeProp({ deserialize: str => str.split(\" \") });\n/**\nAttached to nodes to indicate these should be\n[displayed](https://codemirror.net/docs/ref/#language.syntaxTree)\nin a bidirectional text isolate, so that direction-neutral\ncharacters on their sides don't incorrectly get associated with\nsurrounding text. You'll generally want to set this for nodes\nthat contain arbitrary text, like strings and comments, and for\nnodes that appear _inside_ arbitrary text, like HTML tags. When\nnot given a value, in a grammar declaration, defaults to\n`\"auto\"`.\n*/\nNodeProp.isolate = new NodeProp({ deserialize: value => {\n        if (value && value != \"rtl\" && value != \"ltr\" && value != \"auto\")\n            throw new RangeError(\"Invalid value for isolate: \" + value);\n        return value || \"auto\";\n    } });\n/**\nThe hash of the [context](#lr.ContextTracker.constructor)\nthat the node was parsed in, if any. Used to limit reuse of\ncontextual nodes.\n*/\nNodeProp.contextHash = new NodeProp({ perNode: true });\n/**\nThe distance beyond the end of the node that the tokenizer\nlooked ahead for any of the tokens inside the node. (The LR\nparser only stores this when it is larger than 25, for\nefficiency reasons.)\n*/\nNodeProp.lookAhead = new NodeProp({ perNode: true });\n/**\nThis per-node prop is used to replace a given node, or part of a\nnode, with another tree. This is useful to include trees from\ndifferent languages in mixed-language parsers.\n*/\nNodeProp.mounted = new NodeProp({ perNode: true });\n/**\nA mounted tree, which can be [stored](#common.NodeProp^mounted) on\na tree node to indicate that parts of its content are\nrepresented by another tree.\n*/\nclass MountedTree {\n    constructor(\n    /**\n    The inner tree.\n    */\n    tree, \n    /**\n    If this is null, this tree replaces the entire node (it will\n    be included in the regular iteration instead of its host\n    node). If not, only the given ranges are considered to be\n    covered by this tree. This is used for trees that are mixed in\n    a way that isn't strictly hierarchical. Such mounted trees are\n    only entered by [`resolveInner`](#common.Tree.resolveInner)\n    and [`enter`](#common.SyntaxNode.enter).\n    */\n    overlay, \n    /**\n    The parser used to create this subtree.\n    */\n    parser) {\n        this.tree = tree;\n        this.overlay = overlay;\n        this.parser = parser;\n    }\n    /**\n    @internal\n    */\n    static get(tree) {\n        return tree && tree.props && tree.props[NodeProp.mounted.id];\n    }\n}\nconst noProps = Object.create(null);\n/**\nEach node in a syntax tree has a node type associated with it.\n*/\nclass NodeType {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The name of the node type. Not necessarily unique, but if the\n    grammar was written properly, different node types with the\n    same name within a node set should play the same semantic\n    role.\n    */\n    name, \n    /**\n    @internal\n    */\n    props, \n    /**\n    The id of this node in its set. Corresponds to the term ids\n    used in the parser.\n    */\n    id, \n    /**\n    @internal\n    */\n    flags = 0) {\n        this.name = name;\n        this.props = props;\n        this.id = id;\n        this.flags = flags;\n    }\n    /**\n    Define a node type.\n    */\n    static define(spec) {\n        let props = spec.props && spec.props.length ? Object.create(null) : noProps;\n        let flags = (spec.top ? 1 /* NodeFlag.Top */ : 0) | (spec.skipped ? 2 /* NodeFlag.Skipped */ : 0) |\n            (spec.error ? 4 /* NodeFlag.Error */ : 0) | (spec.name == null ? 8 /* NodeFlag.Anonymous */ : 0);\n        let type = new NodeType(spec.name || \"\", props, spec.id, flags);\n        if (spec.props)\n            for (let src of spec.props) {\n                if (!Array.isArray(src))\n                    src = src(type);\n                if (src) {\n                    if (src[0].perNode)\n                        throw new RangeError(\"Can't store a per-node prop on a node type\");\n                    props[src[0].id] = src[1];\n                }\n            }\n        return type;\n    }\n    /**\n    Retrieves a node prop for this type. Will return `undefined` if\n    the prop isn't present on this node.\n    */\n    prop(prop) { return this.props[prop.id]; }\n    /**\n    True when this is the top node of a grammar.\n    */\n    get isTop() { return (this.flags & 1 /* NodeFlag.Top */) > 0; }\n    /**\n    True when this node is produced by a skip rule.\n    */\n    get isSkipped() { return (this.flags & 2 /* NodeFlag.Skipped */) > 0; }\n    /**\n    Indicates whether this is an error node.\n    */\n    get isError() { return (this.flags & 4 /* NodeFlag.Error */) > 0; }\n    /**\n    When true, this node type doesn't correspond to a user-declared\n    named node, for example because it is used to cache repetition.\n    */\n    get isAnonymous() { return (this.flags & 8 /* NodeFlag.Anonymous */) > 0; }\n    /**\n    Returns true when this node's name or one of its\n    [groups](#common.NodeProp^group) matches the given string.\n    */\n    is(name) {\n        if (typeof name == 'string') {\n            if (this.name == name)\n                return true;\n            let group = this.prop(NodeProp.group);\n            return group ? group.indexOf(name) > -1 : false;\n        }\n        return this.id == name;\n    }\n    /**\n    Create a function from node types to arbitrary values by\n    specifying an object whose property names are node or\n    [group](#common.NodeProp^group) names. Often useful with\n    [`NodeProp.add`](#common.NodeProp.add). You can put multiple\n    names, separated by spaces, in a single property name to map\n    multiple node names to a single value.\n    */\n    static match(map) {\n        let direct = Object.create(null);\n        for (let prop in map)\n            for (let name of prop.split(\" \"))\n                direct[name] = map[prop];\n        return (node) => {\n            for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {\n                let found = direct[i < 0 ? node.name : groups[i]];\n                if (found)\n                    return found;\n            }\n        };\n    }\n}\n/**\nAn empty dummy node type to use when no actual type is available.\n*/\nNodeType.none = new NodeType(\"\", Object.create(null), 0, 8 /* NodeFlag.Anonymous */);\n/**\nA node set holds a collection of node types. It is used to\ncompactly represent trees by storing their type ids, rather than a\nfull pointer to the type object, in a numeric array. Each parser\n[has](#lr.LRParser.nodeSet) a node set, and [tree\nbuffers](#common.TreeBuffer) can only store collections of nodes\nfrom the same set. A set can have a maximum of 2**16 (65536) node\ntypes in it, so that the ids fit into 16-bit typed array slots.\n*/\nclass NodeSet {\n    /**\n    Create a set with the given types. The `id` property of each\n    type should correspond to its position within the array.\n    */\n    constructor(\n    /**\n    The node types in this set, by id.\n    */\n    types) {\n        this.types = types;\n        for (let i = 0; i < types.length; i++)\n            if (types[i].id != i)\n                throw new RangeError(\"Node type ids should correspond to array positions when creating a node set\");\n    }\n    /**\n    Create a copy of this set with some node properties added. The\n    arguments to this method can be created with\n    [`NodeProp.add`](#common.NodeProp.add).\n    */\n    extend(...props) {\n        let newTypes = [];\n        for (let type of this.types) {\n            let newProps = null;\n            for (let source of props) {\n                let add = source(type);\n                if (add) {\n                    if (!newProps)\n                        newProps = Object.assign({}, type.props);\n                    newProps[add[0].id] = add[1];\n                }\n            }\n            newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);\n        }\n        return new NodeSet(newTypes);\n    }\n}\nconst CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();\n/**\nOptions that control iteration. Can be combined with the `|`\noperator to enable multiple ones.\n*/\nvar IterMode;\n(function (IterMode) {\n    /**\n    When enabled, iteration will only visit [`Tree`](#common.Tree)\n    objects, not nodes packed into\n    [`TreeBuffer`](#common.TreeBuffer)s.\n    */\n    IterMode[IterMode[\"ExcludeBuffers\"] = 1] = \"ExcludeBuffers\";\n    /**\n    Enable this to make iteration include anonymous nodes (such as\n    the nodes that wrap repeated grammar constructs into a balanced\n    tree).\n    */\n    IterMode[IterMode[\"IncludeAnonymous\"] = 2] = \"IncludeAnonymous\";\n    /**\n    By default, regular [mounted](#common.NodeProp^mounted) nodes\n    replace their base node in iteration. Enable this to ignore them\n    instead.\n    */\n    IterMode[IterMode[\"IgnoreMounts\"] = 4] = \"IgnoreMounts\";\n    /**\n    This option only applies in\n    [`enter`](#common.SyntaxNode.enter)-style methods. It tells the\n    library to not enter mounted overlays if one covers the given\n    position.\n    */\n    IterMode[IterMode[\"IgnoreOverlays\"] = 8] = \"IgnoreOverlays\";\n})(IterMode || (IterMode = {}));\n/**\nA piece of syntax tree. There are two ways to approach these\ntrees: the way they are actually stored in memory, and the\nconvenient way.\n\nSyntax trees are stored as a tree of `Tree` and `TreeBuffer`\nobjects. By packing detail information into `TreeBuffer` leaf\nnodes, the representation is made a lot more memory-efficient.\n\nHowever, when you want to actually work with tree nodes, this\nrepresentation is very awkward, so most client code will want to\nuse the [`TreeCursor`](#common.TreeCursor) or\n[`SyntaxNode`](#common.SyntaxNode) interface instead, which provides\na view on some part of this data structure, and can be used to\nmove around to adjacent nodes.\n*/\nclass Tree {\n    /**\n    Construct a new tree. See also [`Tree.build`](#common.Tree^build).\n    */\n    constructor(\n    /**\n    The type of the top node.\n    */\n    type, \n    /**\n    This node's child nodes.\n    */\n    children, \n    /**\n    The positions (offsets relative to the start of this tree) of\n    the children.\n    */\n    positions, \n    /**\n    The total length of this tree\n    */\n    length, \n    /**\n    Per-node [node props](#common.NodeProp) to associate with this node.\n    */\n    props) {\n        this.type = type;\n        this.children = children;\n        this.positions = positions;\n        this.length = length;\n        /**\n        @internal\n        */\n        this.props = null;\n        if (props && props.length) {\n            this.props = Object.create(null);\n            for (let [prop, value] of props)\n                this.props[typeof prop == \"number\" ? prop : prop.id] = value;\n        }\n    }\n    /**\n    @internal\n    */\n    toString() {\n        let mounted = MountedTree.get(this);\n        if (mounted && !mounted.overlay)\n            return mounted.tree.toString();\n        let children = \"\";\n        for (let ch of this.children) {\n            let str = ch.toString();\n            if (str) {\n                if (children)\n                    children += \",\";\n                children += str;\n            }\n        }\n        return !this.type.name ? children :\n            (/\\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +\n                (children.length ? \"(\" + children + \")\" : \"\");\n    }\n    /**\n    Get a [tree cursor](#common.TreeCursor) positioned at the top of\n    the tree. Mode can be used to [control](#common.IterMode) which\n    nodes the cursor visits.\n    */\n    cursor(mode = 0) {\n        return new TreeCursor(this.topNode, mode);\n    }\n    /**\n    Get a [tree cursor](#common.TreeCursor) pointing into this tree\n    at the given position and side (see\n    [`moveTo`](#common.TreeCursor.moveTo).\n    */\n    cursorAt(pos, side = 0, mode = 0) {\n        let scope = CachedNode.get(this) || this.topNode;\n        let cursor = new TreeCursor(scope);\n        cursor.moveTo(pos, side);\n        CachedNode.set(this, cursor._tree);\n        return cursor;\n    }\n    /**\n    Get a [syntax node](#common.SyntaxNode) object for the top of the\n    tree.\n    */\n    get topNode() {\n        return new TreeNode(this, 0, 0, null);\n    }\n    /**\n    Get the [syntax node](#common.SyntaxNode) at the given position.\n    If `side` is -1, this will move into nodes that end at the\n    position. If 1, it'll move into nodes that start at the\n    position. With 0, it'll only enter nodes that cover the position\n    from both sides.\n    \n    Note that this will not enter\n    [overlays](#common.MountedTree.overlay), and you often want\n    [`resolveInner`](#common.Tree.resolveInner) instead.\n    */\n    resolve(pos, side = 0) {\n        let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);\n        CachedNode.set(this, node);\n        return node;\n    }\n    /**\n    Like [`resolve`](#common.Tree.resolve), but will enter\n    [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node\n    pointing into the innermost overlaid tree at the given position\n    (with parent links going through all parent structure, including\n    the host trees).\n    */\n    resolveInner(pos, side = 0) {\n        let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);\n        CachedInnerNode.set(this, node);\n        return node;\n    }\n    /**\n    In some situations, it can be useful to iterate through all\n    nodes around a position, including those in overlays that don't\n    directly cover the position. This method gives you an iterator\n    that will produce all nodes, from small to big, around the given\n    position.\n    */\n    resolveStack(pos, side = 0) {\n        return stackIterator(this, pos, side);\n    }\n    /**\n    Iterate over the tree and its children, calling `enter` for any\n    node that touches the `from`/`to` region (if given) before\n    running over such a node's children, and `leave` (if given) when\n    leaving the node. When `enter` returns `false`, that node will\n    not have its children iterated over (or `leave` called).\n    */\n    iterate(spec) {\n        let { enter, leave, from = 0, to = this.length } = spec;\n        let mode = spec.mode || 0, anon = (mode & IterMode.IncludeAnonymous) > 0;\n        for (let c = this.cursor(mode | IterMode.IncludeAnonymous);;) {\n            let entered = false;\n            if (c.from <= to && c.to >= from && (!anon && c.type.isAnonymous || enter(c) !== false)) {\n                if (c.firstChild())\n                    continue;\n                entered = true;\n            }\n            for (;;) {\n                if (entered && leave && (anon || !c.type.isAnonymous))\n                    leave(c);\n                if (c.nextSibling())\n                    break;\n                if (!c.parent())\n                    return;\n                entered = true;\n            }\n        }\n    }\n    /**\n    Get the value of the given [node prop](#common.NodeProp) for this\n    node. Works with both per-node and per-type props.\n    */\n    prop(prop) {\n        return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;\n    }\n    /**\n    Returns the node's [per-node props](#common.NodeProp.perNode) in a\n    format that can be passed to the [`Tree`](#common.Tree)\n    constructor.\n    */\n    get propValues() {\n        let result = [];\n        if (this.props)\n            for (let id in this.props)\n                result.push([+id, this.props[id]]);\n        return result;\n    }\n    /**\n    Balance the direct children of this tree, producing a copy of\n    which may have children grouped into subtrees with type\n    [`NodeType.none`](#common.NodeType^none).\n    */\n    balance(config = {}) {\n        return this.children.length <= 8 /* Balance.BranchFactor */ ? this :\n            balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));\n    }\n    /**\n    Build a tree from a postfix-ordered buffer of node information,\n    or a cursor over such a buffer.\n    */\n    static build(data) { return buildTree(data); }\n}\n/**\nThe empty tree\n*/\nTree.empty = new Tree(NodeType.none, [], [], 0);\nclass FlatBufferCursor {\n    constructor(buffer, index) {\n        this.buffer = buffer;\n        this.index = index;\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    get pos() { return this.index; }\n    next() { this.index -= 4; }\n    fork() { return new FlatBufferCursor(this.buffer, this.index); }\n}\n/**\nTree buffers contain (type, start, end, endIndex) quads for each\nnode. In such a buffer, nodes are stored in prefix order (parents\nbefore children, with the endIndex of the parent indicating which\nchildren belong to it).\n*/\nclass TreeBuffer {\n    /**\n    Create a tree buffer.\n    */\n    constructor(\n    /**\n    The buffer's content.\n    */\n    buffer, \n    /**\n    The total length of the group of nodes in the buffer.\n    */\n    length, \n    /**\n    The node set used in this buffer.\n    */\n    set) {\n        this.buffer = buffer;\n        this.length = length;\n        this.set = set;\n    }\n    /**\n    @internal\n    */\n    get type() { return NodeType.none; }\n    /**\n    @internal\n    */\n    toString() {\n        let result = [];\n        for (let index = 0; index < this.buffer.length;) {\n            result.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result.join(\",\");\n    }\n    /**\n    @internal\n    */\n    childString(index) {\n        let id = this.buffer[index], endIndex = this.buffer[index + 3];\n        let type = this.set.types[id], result = type.name;\n        if (/\\W/.test(result) && !type.isError)\n            result = JSON.stringify(result);\n        index += 4;\n        if (endIndex == index)\n            return result;\n        let children = [];\n        while (index < endIndex) {\n            children.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result + \"(\" + children.join(\",\") + \")\";\n    }\n    /**\n    @internal\n    */\n    findChild(startIndex, endIndex, dir, pos, side) {\n        let { buffer } = this, pick = -1;\n        for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {\n            if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {\n                pick = i;\n                if (dir > 0)\n                    break;\n            }\n        }\n        return pick;\n    }\n    /**\n    @internal\n    */\n    slice(startI, endI, from) {\n        let b = this.buffer;\n        let copy = new Uint16Array(endI - startI), len = 0;\n        for (let i = startI, j = 0; i < endI;) {\n            copy[j++] = b[i++];\n            copy[j++] = b[i++] - from;\n            let to = copy[j++] = b[i++] - from;\n            copy[j++] = b[i++] - startI;\n            len = Math.max(len, to);\n        }\n        return new TreeBuffer(copy, len, this.set);\n    }\n}\nfunction checkSide(side, pos, from, to) {\n    switch (side) {\n        case -2 /* Side.Before */: return from < pos;\n        case -1 /* Side.AtOrBefore */: return to >= pos && from < pos;\n        case 0 /* Side.Around */: return from < pos && to > pos;\n        case 1 /* Side.AtOrAfter */: return from <= pos && to > pos;\n        case 2 /* Side.After */: return to > pos;\n        case 4 /* Side.DontCare */: return true;\n    }\n}\nfunction resolveNode(node, pos, side, overlays) {\n    var _a;\n    // Move up to a node that actually holds the position, if possible\n    while (node.from == node.to ||\n        (side < 1 ? node.from >= pos : node.from > pos) ||\n        (side > -1 ? node.to <= pos : node.to < pos)) {\n        let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;\n        if (!parent)\n            return node;\n        node = parent;\n    }\n    let mode = overlays ? 0 : IterMode.IgnoreOverlays;\n    // Must go up out of overlays when those do not overlap with pos\n    if (overlays)\n        for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {\n            if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)\n                node = parent;\n        }\n    for (;;) {\n        let inner = node.enter(pos, side, mode);\n        if (!inner)\n            return node;\n        node = inner;\n    }\n}\nclass BaseNode {\n    cursor(mode = 0) { return new TreeCursor(this, mode); }\n    getChild(type, before = null, after = null) {\n        let r = getChildren(this, type, before, after);\n        return r.length ? r[0] : null;\n    }\n    getChildren(type, before = null, after = null) {\n        return getChildren(this, type, before, after);\n    }\n    resolve(pos, side = 0) {\n        return resolveNode(this, pos, side, false);\n    }\n    resolveInner(pos, side = 0) {\n        return resolveNode(this, pos, side, true);\n    }\n    matchContext(context) {\n        return matchNodeContext(this.parent, context);\n    }\n    enterUnfinishedNodesBefore(pos) {\n        let scan = this.childBefore(pos), node = this;\n        while (scan) {\n            let last = scan.lastChild;\n            if (!last || last.to != scan.to)\n                break;\n            if (last.type.isError && last.from == last.to) {\n                node = scan;\n                scan = last.prevSibling;\n            }\n            else {\n                scan = last;\n            }\n        }\n        return node;\n    }\n    get node() { return this; }\n    get next() { return this.parent; }\n}\nclass TreeNode extends BaseNode {\n    constructor(_tree, from, \n    // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)\n    index, _parent) {\n        super();\n        this._tree = _tree;\n        this.from = from;\n        this.index = index;\n        this._parent = _parent;\n    }\n    get type() { return this._tree.type; }\n    get name() { return this._tree.type.name; }\n    get to() { return this.from + this._tree.length; }\n    nextChild(i, dir, pos, side, mode = 0) {\n        for (let parent = this;;) {\n            for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {\n                let next = children[i], start = positions[i] + parent.from;\n                if (!checkSide(side, pos, start, start + next.length))\n                    continue;\n                if (next instanceof TreeBuffer) {\n                    if (mode & IterMode.ExcludeBuffers)\n                        continue;\n                    let index = next.findChild(0, next.buffer.length, dir, pos - start, side);\n                    if (index > -1)\n                        return new BufferNode(new BufferContext(parent, next, i, start), null, index);\n                }\n                else if ((mode & IterMode.IncludeAnonymous) || (!next.type.isAnonymous || hasChild(next))) {\n                    let mounted;\n                    if (!(mode & IterMode.IgnoreMounts) && (mounted = MountedTree.get(next)) && !mounted.overlay)\n                        return new TreeNode(mounted.tree, start, i, parent);\n                    let inner = new TreeNode(next, start, i, parent);\n                    return (mode & IterMode.IncludeAnonymous) || !inner.type.isAnonymous ? inner\n                        : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);\n                }\n            }\n            if ((mode & IterMode.IncludeAnonymous) || !parent.type.isAnonymous)\n                return null;\n            if (parent.index >= 0)\n                i = parent.index + dir;\n            else\n                i = dir < 0 ? -1 : parent._parent._tree.children.length;\n            parent = parent._parent;\n            if (!parent)\n                return null;\n        }\n    }\n    get firstChild() { return this.nextChild(0, 1, 0, 4 /* Side.DontCare */); }\n    get lastChild() { return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* Side.DontCare */); }\n    childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* Side.After */); }\n    childBefore(pos) { return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Side.Before */); }\n    enter(pos, side, mode = 0) {\n        let mounted;\n        if (!(mode & IterMode.IgnoreOverlays) && (mounted = MountedTree.get(this._tree)) && mounted.overlay) {\n            let rPos = pos - this.from;\n            for (let { from, to } of mounted.overlay) {\n                if ((side > 0 ? from <= rPos : from < rPos) &&\n                    (side < 0 ? to >= rPos : to > rPos))\n                    return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);\n            }\n        }\n        return this.nextChild(0, 1, pos, side, mode);\n    }\n    nextSignificantParent() {\n        let val = this;\n        while (val.type.isAnonymous && val._parent)\n            val = val._parent;\n        return val;\n    }\n    get parent() {\n        return this._parent ? this._parent.nextSignificantParent() : null;\n    }\n    get nextSibling() {\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* Side.DontCare */) : null;\n    }\n    get prevSibling() {\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* Side.DontCare */) : null;\n    }\n    get tree() { return this._tree; }\n    toTree() { return this._tree; }\n    /**\n    @internal\n    */\n    toString() { return this._tree.toString(); }\n}\nfunction getChildren(node, type, before, after) {\n    let cur = node.cursor(), result = [];\n    if (!cur.firstChild())\n        return result;\n    if (before != null)\n        for (let found = false; !found;) {\n            found = cur.type.is(before);\n            if (!cur.nextSibling())\n                return result;\n        }\n    for (;;) {\n        if (after != null && cur.type.is(after))\n            return result;\n        if (cur.type.is(type))\n            result.push(cur.node);\n        if (!cur.nextSibling())\n            return after == null ? result : [];\n    }\n}\nfunction matchNodeContext(node, context, i = context.length - 1) {\n    for (let p = node; i >= 0; p = p.parent) {\n        if (!p)\n            return false;\n        if (!p.type.isAnonymous) {\n            if (context[i] && context[i] != p.name)\n                return false;\n            i--;\n        }\n    }\n    return true;\n}\nclass BufferContext {\n    constructor(parent, buffer, index, start) {\n        this.parent = parent;\n        this.buffer = buffer;\n        this.index = index;\n        this.start = start;\n    }\n}\nclass BufferNode extends BaseNode {\n    get name() { return this.type.name; }\n    get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }\n    get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }\n    constructor(context, _parent, index) {\n        super();\n        this.context = context;\n        this._parent = _parent;\n        this.index = index;\n        this.type = context.buffer.set.types[context.buffer.buffer[index]];\n    }\n    child(dir, pos, side) {\n        let { buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);\n        return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n    get firstChild() { return this.child(1, 0, 4 /* Side.DontCare */); }\n    get lastChild() { return this.child(-1, 0, 4 /* Side.DontCare */); }\n    childAfter(pos) { return this.child(1, pos, 2 /* Side.After */); }\n    childBefore(pos) { return this.child(-1, pos, -2 /* Side.Before */); }\n    enter(pos, side, mode = 0) {\n        if (mode & IterMode.ExcludeBuffers)\n            return null;\n        let { buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);\n        return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n    get parent() {\n        return this._parent || this.context.parent.nextSignificantParent();\n    }\n    externalSibling(dir) {\n        return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* Side.DontCare */);\n    }\n    get nextSibling() {\n        let { buffer } = this.context;\n        let after = buffer.buffer[this.index + 3];\n        if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))\n            return new BufferNode(this.context, this._parent, after);\n        return this.externalSibling(1);\n    }\n    get prevSibling() {\n        let { buffer } = this.context;\n        let parentStart = this._parent ? this._parent.index + 4 : 0;\n        if (this.index == parentStart)\n            return this.externalSibling(-1);\n        return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));\n    }\n    get tree() { return null; }\n    toTree() {\n        let children = [], positions = [];\n        let { buffer } = this.context;\n        let startI = this.index + 4, endI = buffer.buffer[this.index + 3];\n        if (endI > startI) {\n            let from = buffer.buffer[this.index + 1];\n            children.push(buffer.slice(startI, endI, from));\n            positions.push(0);\n        }\n        return new Tree(this.type, children, positions, this.to - this.from);\n    }\n    /**\n    @internal\n    */\n    toString() { return this.context.buffer.childString(this.index); }\n}\nfunction iterStack(heads) {\n    if (!heads.length)\n        return null;\n    let pick = 0, picked = heads[0];\n    for (let i = 1; i < heads.length; i++) {\n        let node = heads[i];\n        if (node.from > picked.from || node.to < picked.to) {\n            picked = node;\n            pick = i;\n        }\n    }\n    let next = picked instanceof TreeNode && picked.index < 0 ? null : picked.parent;\n    let newHeads = heads.slice();\n    if (next)\n        newHeads[pick] = next;\n    else\n        newHeads.splice(pick, 1);\n    return new StackIterator(newHeads, picked);\n}\nclass StackIterator {\n    constructor(heads, node) {\n        this.heads = heads;\n        this.node = node;\n    }\n    get next() { return iterStack(this.heads); }\n}\nfunction stackIterator(tree, pos, side) {\n    let inner = tree.resolveInner(pos, side), layers = null;\n    for (let scan = inner instanceof TreeNode ? inner : inner.context.parent; scan; scan = scan.parent) {\n        if (scan.index < 0) { // This is an overlay root\n            let parent = scan.parent;\n            (layers || (layers = [inner])).push(parent.resolve(pos, side));\n            scan = parent;\n        }\n        else {\n            let mount = MountedTree.get(scan.tree);\n            // Relevant overlay branching off\n            if (mount && mount.overlay && mount.overlay[0].from <= pos && mount.overlay[mount.overlay.length - 1].to >= pos) {\n                let root = new TreeNode(mount.tree, mount.overlay[0].from + scan.from, -1, scan);\n                (layers || (layers = [inner])).push(resolveNode(root, pos, side, false));\n            }\n        }\n    }\n    return layers ? iterStack(layers) : inner;\n}\n/**\nA tree cursor object focuses on a given node in a syntax tree, and\nallows you to move to adjacent nodes.\n*/\nclass TreeCursor {\n    /**\n    Shorthand for `.type.name`.\n    */\n    get name() { return this.type.name; }\n    /**\n    @internal\n    */\n    constructor(node, \n    /**\n    @internal\n    */\n    mode = 0) {\n        this.mode = mode;\n        /**\n        @internal\n        */\n        this.buffer = null;\n        this.stack = [];\n        /**\n        @internal\n        */\n        this.index = 0;\n        this.bufferNode = null;\n        if (node instanceof TreeNode) {\n            this.yieldNode(node);\n        }\n        else {\n            this._tree = node.context.parent;\n            this.buffer = node.context;\n            for (let n = node._parent; n; n = n._parent)\n                this.stack.unshift(n.index);\n            this.bufferNode = node;\n            this.yieldBuf(node.index);\n        }\n    }\n    yieldNode(node) {\n        if (!node)\n            return false;\n        this._tree = node;\n        this.type = node.type;\n        this.from = node.from;\n        this.to = node.to;\n        return true;\n    }\n    yieldBuf(index, type) {\n        this.index = index;\n        let { start, buffer } = this.buffer;\n        this.type = type || buffer.set.types[buffer.buffer[index]];\n        this.from = start + buffer.buffer[index + 1];\n        this.to = start + buffer.buffer[index + 2];\n        return true;\n    }\n    /**\n    @internal\n    */\n    yield(node) {\n        if (!node)\n            return false;\n        if (node instanceof TreeNode) {\n            this.buffer = null;\n            return this.yieldNode(node);\n        }\n        this.buffer = node.context;\n        return this.yieldBuf(node.index, node.type);\n    }\n    /**\n    @internal\n    */\n    toString() {\n        return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();\n    }\n    /**\n    @internal\n    */\n    enterChild(dir, pos, side) {\n        if (!this.buffer)\n            return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));\n        let { buffer } = this.buffer;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);\n        if (index < 0)\n            return false;\n        this.stack.push(this.index);\n        return this.yieldBuf(index);\n    }\n    /**\n    Move the cursor to this node's first child. When this returns\n    false, the node has no child, and the cursor has not been moved.\n    */\n    firstChild() { return this.enterChild(1, 0, 4 /* Side.DontCare */); }\n    /**\n    Move the cursor to this node's last child.\n    */\n    lastChild() { return this.enterChild(-1, 0, 4 /* Side.DontCare */); }\n    /**\n    Move the cursor to the first child that ends after `pos`.\n    */\n    childAfter(pos) { return this.enterChild(1, pos, 2 /* Side.After */); }\n    /**\n    Move to the last child that starts before `pos`.\n    */\n    childBefore(pos) { return this.enterChild(-1, pos, -2 /* Side.Before */); }\n    /**\n    Move the cursor to the child around `pos`. If side is -1 the\n    child may end at that position, when 1 it may start there. This\n    will also enter [overlaid](#common.MountedTree.overlay)\n    [mounted](#common.NodeProp^mounted) trees unless `overlays` is\n    set to false.\n    */\n    enter(pos, side, mode = this.mode) {\n        if (!this.buffer)\n            return this.yield(this._tree.enter(pos, side, mode));\n        return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);\n    }\n    /**\n    Move to the node's parent node, if this isn't the top node.\n    */\n    parent() {\n        if (!this.buffer)\n            return this.yieldNode((this.mode & IterMode.IncludeAnonymous) ? this._tree._parent : this._tree.parent);\n        if (this.stack.length)\n            return this.yieldBuf(this.stack.pop());\n        let parent = (this.mode & IterMode.IncludeAnonymous) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();\n        this.buffer = null;\n        return this.yieldNode(parent);\n    }\n    /**\n    @internal\n    */\n    sibling(dir) {\n        if (!this.buffer)\n            return !this._tree._parent ? false\n                : this.yield(this._tree.index < 0 ? null\n                    : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode));\n        let { buffer } = this.buffer, d = this.stack.length - 1;\n        if (dir < 0) {\n            let parentStart = d < 0 ? 0 : this.stack[d] + 4;\n            if (this.index != parentStart)\n                return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));\n        }\n        else {\n            let after = buffer.buffer[this.index + 3];\n            if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))\n                return this.yieldBuf(after);\n        }\n        return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode)) : false;\n    }\n    /**\n    Move to this node's next sibling, if any.\n    */\n    nextSibling() { return this.sibling(1); }\n    /**\n    Move to this node's previous sibling, if any.\n    */\n    prevSibling() { return this.sibling(-1); }\n    atLastNode(dir) {\n        let index, parent, { buffer } = this;\n        if (buffer) {\n            if (dir > 0) {\n                if (this.index < buffer.buffer.buffer.length)\n                    return false;\n            }\n            else {\n                for (let i = 0; i < this.index; i++)\n                    if (buffer.buffer.buffer[i + 3] < this.index)\n                        return false;\n            }\n            ({ index, parent } = buffer);\n        }\n        else {\n            ({ index, _parent: parent } = this._tree);\n        }\n        for (; parent; { index, _parent: parent } = parent) {\n            if (index > -1)\n                for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {\n                    let child = parent._tree.children[i];\n                    if ((this.mode & IterMode.IncludeAnonymous) ||\n                        child instanceof TreeBuffer ||\n                        !child.type.isAnonymous ||\n                        hasChild(child))\n                        return false;\n                }\n        }\n        return true;\n    }\n    move(dir, enter) {\n        if (enter && this.enterChild(dir, 0, 4 /* Side.DontCare */))\n            return true;\n        for (;;) {\n            if (this.sibling(dir))\n                return true;\n            if (this.atLastNode(dir) || !this.parent())\n                return false;\n        }\n    }\n    /**\n    Move to the next node in a\n    [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)\n    traversal, going from a node to its first child or, if the\n    current node is empty or `enter` is false, its next sibling or\n    the next sibling of the first parent node that has one.\n    */\n    next(enter = true) { return this.move(1, enter); }\n    /**\n    Move to the next node in a last-to-first pre-order traversal. A\n    node is followed by its last child or, if it has none, its\n    previous sibling or the previous sibling of the first parent\n    node that has one.\n    */\n    prev(enter = true) { return this.move(-1, enter); }\n    /**\n    Move the cursor to the innermost node that covers `pos`. If\n    `side` is -1, it will enter nodes that end at `pos`. If it is 1,\n    it will enter nodes that start at `pos`.\n    */\n    moveTo(pos, side = 0) {\n        // Move up to a node that actually holds the position, if possible\n        while (this.from == this.to ||\n            (side < 1 ? this.from >= pos : this.from > pos) ||\n            (side > -1 ? this.to <= pos : this.to < pos))\n            if (!this.parent())\n                break;\n        // Then scan down into child nodes as far as possible\n        while (this.enterChild(1, pos, side)) { }\n        return this;\n    }\n    /**\n    Get a [syntax node](#common.SyntaxNode) at the cursor's current\n    position.\n    */\n    get node() {\n        if (!this.buffer)\n            return this._tree;\n        let cache = this.bufferNode, result = null, depth = 0;\n        if (cache && cache.context == this.buffer) {\n            scan: for (let index = this.index, d = this.stack.length; d >= 0;) {\n                for (let c = cache; c; c = c._parent)\n                    if (c.index == index) {\n                        if (index == this.index)\n                            return c;\n                        result = c;\n                        depth = d + 1;\n                        break scan;\n                    }\n                index = this.stack[--d];\n            }\n        }\n        for (let i = depth; i < this.stack.length; i++)\n            result = new BufferNode(this.buffer, result, this.stack[i]);\n        return this.bufferNode = new BufferNode(this.buffer, result, this.index);\n    }\n    /**\n    Get the [tree](#common.Tree) that represents the current node, if\n    any. Will return null when the node is in a [tree\n    buffer](#common.TreeBuffer).\n    */\n    get tree() {\n        return this.buffer ? null : this._tree._tree;\n    }\n    /**\n    Iterate over the current node and all its descendants, calling\n    `enter` when entering a node and `leave`, if given, when leaving\n    one. When `enter` returns `false`, any children of that node are\n    skipped, and `leave` isn't called for it.\n    */\n    iterate(enter, leave) {\n        for (let depth = 0;;) {\n            let mustLeave = false;\n            if (this.type.isAnonymous || enter(this) !== false) {\n                if (this.firstChild()) {\n                    depth++;\n                    continue;\n                }\n                if (!this.type.isAnonymous)\n                    mustLeave = true;\n            }\n            for (;;) {\n                if (mustLeave && leave)\n                    leave(this);\n                mustLeave = this.type.isAnonymous;\n                if (!depth)\n                    return;\n                if (this.nextSibling())\n                    break;\n                this.parent();\n                depth--;\n                mustLeave = true;\n            }\n        }\n    }\n    /**\n    Test whether the current node matches a given context—a sequence\n    of direct parent node names. Empty strings in the context array\n    are treated as wildcards.\n    */\n    matchContext(context) {\n        if (!this.buffer)\n            return matchNodeContext(this.node.parent, context);\n        let { buffer } = this.buffer, { types } = buffer.set;\n        for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {\n            if (d < 0)\n                return matchNodeContext(this._tree, context, i);\n            let type = types[buffer.buffer[this.stack[d]]];\n            if (!type.isAnonymous) {\n                if (context[i] && context[i] != type.name)\n                    return false;\n                i--;\n            }\n        }\n        return true;\n    }\n}\nfunction hasChild(tree) {\n    return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));\n}\nfunction buildTree(data) {\n    var _a;\n    let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;\n    let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;\n    let types = nodeSet.types;\n    let contextHash = 0, lookAhead = 0;\n    function takeNode(parentStart, minPos, children, positions, inRepeat, depth) {\n        let { id, start, end, size } = cursor;\n        let lookAheadAtStart = lookAhead, contextAtStart = contextHash;\n        while (size < 0) {\n            cursor.next();\n            if (size == -1 /* SpecialRecord.Reuse */) {\n                let node = reused[id];\n                children.push(node);\n                positions.push(start - parentStart);\n                return;\n            }\n            else if (size == -3 /* SpecialRecord.ContextChange */) { // Context change\n                contextHash = id;\n                return;\n            }\n            else if (size == -4 /* SpecialRecord.LookAhead */) {\n                lookAhead = id;\n                return;\n            }\n            else {\n                throw new RangeError(`Unrecognized record size: ${size}`);\n            }\n        }\n        let type = types[id], node, buffer;\n        let startPos = start - parentStart;\n        if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {\n            // Small enough for a buffer, and no reused nodes inside\n            let data = new Uint16Array(buffer.size - buffer.skip);\n            let endPos = cursor.pos - buffer.size, index = data.length;\n            while (cursor.pos > endPos)\n                index = copyToBuffer(buffer.start, data, index);\n            node = new TreeBuffer(data, end - buffer.start, nodeSet);\n            startPos = buffer.start - parentStart;\n        }\n        else { // Make it a node\n            let endPos = cursor.pos - size;\n            cursor.next();\n            let localChildren = [], localPositions = [];\n            let localInRepeat = id >= minRepeatType ? id : -1;\n            let lastGroup = 0, lastEnd = end;\n            while (cursor.pos > endPos) {\n                if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {\n                    if (cursor.end <= lastEnd - maxBufferLength) {\n                        makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart, contextAtStart);\n                        lastGroup = localChildren.length;\n                        lastEnd = cursor.end;\n                    }\n                    cursor.next();\n                }\n                else if (depth > 2500 /* CutOff.Depth */) {\n                    takeFlatNode(start, endPos, localChildren, localPositions);\n                }\n                else {\n                    takeNode(start, endPos, localChildren, localPositions, localInRepeat, depth + 1);\n                }\n            }\n            if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)\n                makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart, contextAtStart);\n            localChildren.reverse();\n            localPositions.reverse();\n            if (localInRepeat > -1 && lastGroup > 0) {\n                let make = makeBalanced(type, contextAtStart);\n                node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);\n            }\n            else {\n                node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end, contextAtStart);\n            }\n        }\n        children.push(node);\n        positions.push(startPos);\n    }\n    function takeFlatNode(parentStart, minPos, children, positions) {\n        let nodes = []; // Temporary, inverted array of leaf nodes found, with absolute positions\n        let nodeCount = 0, stopAt = -1;\n        while (cursor.pos > minPos) {\n            let { id, start, end, size } = cursor;\n            if (size > 4) { // Not a leaf\n                cursor.next();\n            }\n            else if (stopAt > -1 && start < stopAt) {\n                break;\n            }\n            else {\n                if (stopAt < 0)\n                    stopAt = end - maxBufferLength;\n                nodes.push(id, start, end);\n                nodeCount++;\n                cursor.next();\n            }\n        }\n        if (nodeCount) {\n            let buffer = new Uint16Array(nodeCount * 4);\n            let start = nodes[nodes.length - 2];\n            for (let i = nodes.length - 3, j = 0; i >= 0; i -= 3) {\n                buffer[j++] = nodes[i];\n                buffer[j++] = nodes[i + 1] - start;\n                buffer[j++] = nodes[i + 2] - start;\n                buffer[j++] = j;\n            }\n            children.push(new TreeBuffer(buffer, nodes[2] - start, nodeSet));\n            positions.push(start - parentStart);\n        }\n    }\n    function makeBalanced(type, contextHash) {\n        return (children, positions, length) => {\n            let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;\n            if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {\n                if (!lastI && last.type == type && last.length == length)\n                    return last;\n                if (lookAheadProp = last.prop(NodeProp.lookAhead))\n                    lookAhead = positions[lastI] + last.length + lookAheadProp;\n            }\n            return makeTree(type, children, positions, length, lookAhead, contextHash);\n        };\n    }\n    function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead, contextHash) {\n        let localChildren = [], localPositions = [];\n        while (children.length > i) {\n            localChildren.push(children.pop());\n            localPositions.push(positions.pop() + base - from);\n        }\n        children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to, contextHash));\n        positions.push(from - base);\n    }\n    function makeTree(type, children, positions, length, lookAhead, contextHash, props) {\n        if (contextHash) {\n            let pair = [NodeProp.contextHash, contextHash];\n            props = props ? [pair].concat(props) : [pair];\n        }\n        if (lookAhead > 25) {\n            let pair = [NodeProp.lookAhead, lookAhead];\n            props = props ? [pair].concat(props) : [pair];\n        }\n        return new Tree(type, children, positions, length, props);\n    }\n    function findBufferSize(maxSize, inRepeat) {\n        // Scan through the buffer to find previous siblings that fit\n        // together in a TreeBuffer, and don't contain any reused nodes\n        // (which can't be stored in a buffer).\n        // If `inRepeat` is > -1, ignore node boundaries of that type for\n        // nesting, but make sure the end falls either at the start\n        // (`maxSize`) or before such a node.\n        let fork = cursor.fork();\n        let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;\n        let result = { size: 0, start: 0, skip: 0 };\n        scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {\n            let nodeSize = fork.size;\n            // Pretend nested repeat nodes of the same type don't exist\n            if (fork.id == inRepeat && nodeSize >= 0) {\n                // Except that we store the current state as a valid return\n                // value.\n                result.size = size;\n                result.start = start;\n                result.skip = skip;\n                skip += 4;\n                size += 4;\n                fork.next();\n                continue;\n            }\n            let startPos = fork.pos - nodeSize;\n            if (nodeSize < 0 || startPos < minPos || fork.start < minStart)\n                break;\n            let localSkipped = fork.id >= minRepeatType ? 4 : 0;\n            let nodeStart = fork.start;\n            fork.next();\n            while (fork.pos > startPos) {\n                if (fork.size < 0) {\n                    if (fork.size == -3 /* SpecialRecord.ContextChange */)\n                        localSkipped += 4;\n                    else\n                        break scan;\n                }\n                else if (fork.id >= minRepeatType) {\n                    localSkipped += 4;\n                }\n                fork.next();\n            }\n            start = nodeStart;\n            size += nodeSize;\n            skip += localSkipped;\n        }\n        if (inRepeat < 0 || size == maxSize) {\n            result.size = size;\n            result.start = start;\n            result.skip = skip;\n        }\n        return result.size > 4 ? result : undefined;\n    }\n    function copyToBuffer(bufferStart, buffer, index) {\n        let { id, start, end, size } = cursor;\n        cursor.next();\n        if (size >= 0 && id < minRepeatType) {\n            let startIndex = index;\n            if (size > 4) {\n                let endPos = cursor.pos - (size - 4);\n                while (cursor.pos > endPos)\n                    index = copyToBuffer(bufferStart, buffer, index);\n            }\n            buffer[--index] = startIndex;\n            buffer[--index] = end - bufferStart;\n            buffer[--index] = start - bufferStart;\n            buffer[--index] = id;\n        }\n        else if (size == -3 /* SpecialRecord.ContextChange */) {\n            contextHash = id;\n        }\n        else if (size == -4 /* SpecialRecord.LookAhead */) {\n            lookAhead = id;\n        }\n        return index;\n    }\n    let children = [], positions = [];\n    while (cursor.pos > 0)\n        takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1, 0);\n    let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);\n    return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);\n}\nconst nodeSizeCache = new WeakMap;\nfunction nodeSize(balanceType, node) {\n    if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)\n        return 1;\n    let size = nodeSizeCache.get(node);\n    if (size == null) {\n        size = 1;\n        for (let child of node.children) {\n            if (child.type != balanceType || !(child instanceof Tree)) {\n                size = 1;\n                break;\n            }\n            size += nodeSize(balanceType, child);\n        }\n        nodeSizeCache.set(node, size);\n    }\n    return size;\n}\nfunction balanceRange(\n// The type the balanced tree's inner nodes.\nbalanceType, \n// The direct children and their positions\nchildren, positions, \n// The index range in children/positions to use\nfrom, to, \n// The start position of the nodes, relative to their parent.\nstart, \n// Length of the outer node\nlength, \n// Function to build the top node of the balanced tree\nmkTop, \n// Function to build internal nodes for the balanced tree\nmkTree) {\n    let total = 0;\n    for (let i = from; i < to; i++)\n        total += nodeSize(balanceType, children[i]);\n    let maxChild = Math.ceil((total * 1.5) / 8 /* Balance.BranchFactor */);\n    let localChildren = [], localPositions = [];\n    function divide(children, positions, from, to, offset) {\n        for (let i = from; i < to;) {\n            let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);\n            i++;\n            for (; i < to; i++) {\n                let nextSize = nodeSize(balanceType, children[i]);\n                if (groupSize + nextSize >= maxChild)\n                    break;\n                groupSize += nextSize;\n            }\n            if (i == groupFrom + 1) {\n                if (groupSize > maxChild) {\n                    let only = children[groupFrom]; // Only trees can have a size > 1\n                    divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);\n                    continue;\n                }\n                localChildren.push(children[groupFrom]);\n            }\n            else {\n                let length = positions[i - 1] + children[i - 1].length - groupStart;\n                localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));\n            }\n            localPositions.push(groupStart + offset - start);\n        }\n    }\n    divide(children, positions, from, to, 0);\n    return (mkTop || mkTree)(localChildren, localPositions, length);\n}\n/**\nProvides a way to associate values with pieces of trees. As long\nas that part of the tree is reused, the associated values can be\nretrieved from an updated tree.\n*/\nclass NodeWeakMap {\n    constructor() {\n        this.map = new WeakMap();\n    }\n    setBuffer(buffer, index, value) {\n        let inner = this.map.get(buffer);\n        if (!inner)\n            this.map.set(buffer, inner = new Map);\n        inner.set(index, value);\n    }\n    getBuffer(buffer, index) {\n        let inner = this.map.get(buffer);\n        return inner && inner.get(index);\n    }\n    /**\n    Set the value for this syntax node.\n    */\n    set(node, value) {\n        if (node instanceof BufferNode)\n            this.setBuffer(node.context.buffer, node.index, value);\n        else if (node instanceof TreeNode)\n            this.map.set(node.tree, value);\n    }\n    /**\n    Retrieve value for this syntax node, if it exists in the map.\n    */\n    get(node) {\n        return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index)\n            : node instanceof TreeNode ? this.map.get(node.tree) : undefined;\n    }\n    /**\n    Set the value for the node that a cursor currently points to.\n    */\n    cursorSet(cursor, value) {\n        if (cursor.buffer)\n            this.setBuffer(cursor.buffer.buffer, cursor.index, value);\n        else\n            this.map.set(cursor.tree, value);\n    }\n    /**\n    Retrieve the value for the node that a cursor currently points\n    to.\n    */\n    cursorGet(cursor) {\n        return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);\n    }\n}\n\n/**\nTree fragments are used during [incremental\nparsing](#common.Parser.startParse) to track parts of old trees\nthat can be reused in a new parse. An array of fragments is used\nto track regions of an old tree whose nodes might be reused in new\nparses. Use the static\n[`applyChanges`](#common.TreeFragment^applyChanges) method to\nupdate fragments for document changes.\n*/\nclass TreeFragment {\n    /**\n    Construct a tree fragment. You'll usually want to use\n    [`addTree`](#common.TreeFragment^addTree) and\n    [`applyChanges`](#common.TreeFragment^applyChanges) instead of\n    calling this directly.\n    */\n    constructor(\n    /**\n    The start of the unchanged range pointed to by this fragment.\n    This refers to an offset in the _updated_ document (as opposed\n    to the original tree).\n    */\n    from, \n    /**\n    The end of the unchanged range.\n    */\n    to, \n    /**\n    The tree that this fragment is based on.\n    */\n    tree, \n    /**\n    The offset between the fragment's tree and the document that\n    this fragment can be used against. Add this when going from\n    document to tree positions, subtract it to go from tree to\n    document positions.\n    */\n    offset, openStart = false, openEnd = false) {\n        this.from = from;\n        this.to = to;\n        this.tree = tree;\n        this.offset = offset;\n        this.open = (openStart ? 1 /* Open.Start */ : 0) | (openEnd ? 2 /* Open.End */ : 0);\n    }\n    /**\n    Whether the start of the fragment represents the start of a\n    parse, or the end of a change. (In the second case, it may not\n    be safe to reuse some nodes at the start, depending on the\n    parsing algorithm.)\n    */\n    get openStart() { return (this.open & 1 /* Open.Start */) > 0; }\n    /**\n    Whether the end of the fragment represents the end of a\n    full-document parse, or the start of a change.\n    */\n    get openEnd() { return (this.open & 2 /* Open.End */) > 0; }\n    /**\n    Create a set of fragments from a freshly parsed tree, or update\n    an existing set of fragments by replacing the ones that overlap\n    with a tree with content from the new tree. When `partial` is\n    true, the parse is treated as incomplete, and the resulting\n    fragment has [`openEnd`](#common.TreeFragment.openEnd) set to\n    true.\n    */\n    static addTree(tree, fragments = [], partial = false) {\n        let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];\n        for (let f of fragments)\n            if (f.to > tree.length)\n                result.push(f);\n        return result;\n    }\n    /**\n    Apply a set of edits to an array of fragments, removing or\n    splitting fragments as necessary to remove edited ranges, and\n    adjusting offsets for fragments that moved.\n    */\n    static applyChanges(fragments, changes, minGap = 128) {\n        if (!changes.length)\n            return fragments;\n        let result = [];\n        let fI = 1, nextF = fragments.length ? fragments[0] : null;\n        for (let cI = 0, pos = 0, off = 0;; cI++) {\n            let nextC = cI < changes.length ? changes[cI] : null;\n            let nextPos = nextC ? nextC.fromA : 1e9;\n            if (nextPos - pos >= minGap)\n                while (nextF && nextF.from < nextPos) {\n                    let cut = nextF;\n                    if (pos >= cut.from || nextPos <= cut.to || off) {\n                        let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;\n                        cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);\n                    }\n                    if (cut)\n                        result.push(cut);\n                    if (nextF.to > nextPos)\n                        break;\n                    nextF = fI < fragments.length ? fragments[fI++] : null;\n                }\n            if (!nextC)\n                break;\n            pos = nextC.toA;\n            off = nextC.toA - nextC.toB;\n        }\n        return result;\n    }\n}\n/**\nA superclass that parsers should extend.\n*/\nclass Parser {\n    /**\n    Start a parse, returning a [partial parse](#common.PartialParse)\n    object. [`fragments`](#common.TreeFragment) can be passed in to\n    make the parse incremental.\n    \n    By default, the entire input is parsed. You can pass `ranges`,\n    which should be a sorted array of non-empty, non-overlapping\n    ranges, to parse only those ranges. The tree returned in that\n    case will start at `ranges[0].from`.\n    */\n    startParse(input, fragments, ranges) {\n        if (typeof input == \"string\")\n            input = new StringInput(input);\n        ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];\n        return this.createParse(input, fragments || [], ranges);\n    }\n    /**\n    Run a full parse, returning the resulting tree.\n    */\n    parse(input, fragments, ranges) {\n        let parse = this.startParse(input, fragments, ranges);\n        for (;;) {\n            let done = parse.advance();\n            if (done)\n                return done;\n        }\n    }\n}\nclass StringInput {\n    constructor(string) {\n        this.string = string;\n    }\n    get length() { return this.string.length; }\n    chunk(from) { return this.string.slice(from); }\n    get lineChunks() { return false; }\n    read(from, to) { return this.string.slice(from, to); }\n}\n\n/**\nCreate a parse wrapper that, after the inner parse completes,\nscans its tree for mixed language regions with the `nest`\nfunction, runs the resulting [inner parses](#common.NestedParse),\nand then [mounts](#common.NodeProp^mounted) their results onto the\ntree.\n*/\nfunction parseMixed(nest) {\n    return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);\n}\nclass InnerParse {\n    constructor(parser, parse, overlay, target, from) {\n        this.parser = parser;\n        this.parse = parse;\n        this.overlay = overlay;\n        this.target = target;\n        this.from = from;\n    }\n}\nfunction checkRanges(ranges) {\n    if (!ranges.length || ranges.some(r => r.from >= r.to))\n        throw new RangeError(\"Invalid inner parse ranges given: \" + JSON.stringify(ranges));\n}\nclass ActiveOverlay {\n    constructor(parser, predicate, mounts, index, start, target, prev) {\n        this.parser = parser;\n        this.predicate = predicate;\n        this.mounts = mounts;\n        this.index = index;\n        this.start = start;\n        this.target = target;\n        this.prev = prev;\n        this.depth = 0;\n        this.ranges = [];\n    }\n}\nconst stoppedInner = new NodeProp({ perNode: true });\nclass MixedParse {\n    constructor(base, nest, input, fragments, ranges) {\n        this.nest = nest;\n        this.input = input;\n        this.fragments = fragments;\n        this.ranges = ranges;\n        this.inner = [];\n        this.innerDone = 0;\n        this.baseTree = null;\n        this.stoppedAt = null;\n        this.baseParse = base;\n    }\n    advance() {\n        if (this.baseParse) {\n            let done = this.baseParse.advance();\n            if (!done)\n                return null;\n            this.baseParse = null;\n            this.baseTree = done;\n            this.startInner();\n            if (this.stoppedAt != null)\n                for (let inner of this.inner)\n                    inner.parse.stopAt(this.stoppedAt);\n        }\n        if (this.innerDone == this.inner.length) {\n            let result = this.baseTree;\n            if (this.stoppedAt != null)\n                result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));\n            return result;\n        }\n        let inner = this.inner[this.innerDone], done = inner.parse.advance();\n        if (done) {\n            this.innerDone++;\n            // This is a somewhat dodgy but super helpful hack where we\n            // patch up nodes created by the inner parse (and thus\n            // presumably not aliased anywhere else) to hold the information\n            // about the inner parse.\n            let props = Object.assign(Object.create(null), inner.target.props);\n            props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);\n            inner.target.props = props;\n        }\n        return null;\n    }\n    get parsedPos() {\n        if (this.baseParse)\n            return 0;\n        let pos = this.input.length;\n        for (let i = this.innerDone; i < this.inner.length; i++) {\n            if (this.inner[i].from < pos)\n                pos = Math.min(pos, this.inner[i].parse.parsedPos);\n        }\n        return pos;\n    }\n    stopAt(pos) {\n        this.stoppedAt = pos;\n        if (this.baseParse)\n            this.baseParse.stopAt(pos);\n        else\n            for (let i = this.innerDone; i < this.inner.length; i++)\n                this.inner[i].parse.stopAt(pos);\n    }\n    startInner() {\n        let fragmentCursor = new FragmentCursor(this.fragments);\n        let overlay = null;\n        let covered = null;\n        let cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), IterMode.IncludeAnonymous | IterMode.IgnoreMounts);\n        scan: for (let nest, isCovered;;) {\n            let enter = true, range;\n            if (this.stoppedAt != null && cursor.from >= this.stoppedAt) {\n                enter = false;\n            }\n            else if (fragmentCursor.hasNode(cursor)) {\n                if (overlay) {\n                    let match = overlay.mounts.find(m => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);\n                    if (match)\n                        for (let r of match.mount.overlay) {\n                            let from = r.from + match.pos, to = r.to + match.pos;\n                            if (from >= cursor.from && to <= cursor.to && !overlay.ranges.some(r => r.from < to && r.to > from))\n                                overlay.ranges.push({ from, to });\n                        }\n                }\n                enter = false;\n            }\n            else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {\n                enter = isCovered != 2 /* Cover.Full */;\n            }\n            else if (!cursor.type.isAnonymous && (nest = this.nest(cursor, this.input)) &&\n                (cursor.from < cursor.to || !nest.overlay)) {\n                if (!cursor.tree)\n                    materialize(cursor);\n                let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);\n                if (typeof nest.overlay == \"function\") {\n                    overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);\n                }\n                else {\n                    let ranges = punchRanges(this.ranges, nest.overlay ||\n                        (cursor.from < cursor.to ? [new Range(cursor.from, cursor.to)] : []));\n                    if (ranges.length)\n                        checkRanges(ranges);\n                    if (ranges.length || !nest.overlay)\n                        this.inner.push(new InnerParse(nest.parser, ranges.length ? nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges)\n                            : nest.parser.startParse(\"\"), nest.overlay ? nest.overlay.map(r => new Range(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree, ranges.length ? ranges[0].from : cursor.from));\n                    if (!nest.overlay)\n                        enter = false;\n                    else if (ranges.length)\n                        covered = { ranges, depth: 0, prev: covered };\n                }\n            }\n            else if (overlay && (range = overlay.predicate(cursor))) {\n                if (range === true)\n                    range = new Range(cursor.from, cursor.to);\n                if (range.from < range.to) {\n                    let last = overlay.ranges.length - 1;\n                    if (last >= 0 && overlay.ranges[last].to == range.from)\n                        overlay.ranges[last] = { from: overlay.ranges[last].from, to: range.to };\n                    else\n                        overlay.ranges.push(range);\n                }\n            }\n            if (enter && cursor.firstChild()) {\n                if (overlay)\n                    overlay.depth++;\n                if (covered)\n                    covered.depth++;\n            }\n            else {\n                for (;;) {\n                    if (cursor.nextSibling())\n                        break;\n                    if (!cursor.parent())\n                        break scan;\n                    if (overlay && !--overlay.depth) {\n                        let ranges = punchRanges(this.ranges, overlay.ranges);\n                        if (ranges.length) {\n                            checkRanges(ranges);\n                            this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map(r => new Range(r.from - overlay.start, r.to - overlay.start)), overlay.target, ranges[0].from));\n                        }\n                        overlay = overlay.prev;\n                    }\n                    if (covered && !--covered.depth)\n                        covered = covered.prev;\n                }\n            }\n        }\n    }\n}\nfunction checkCover(covered, from, to) {\n    for (let range of covered) {\n        if (range.from >= to)\n            break;\n        if (range.to > from)\n            return range.from <= from && range.to >= to ? 2 /* Cover.Full */ : 1 /* Cover.Partial */;\n    }\n    return 0 /* Cover.None */;\n}\n// Take a piece of buffer and convert it into a stand-alone\n// TreeBuffer.\nfunction sliceBuf(buf, startI, endI, nodes, positions, off) {\n    if (startI < endI) {\n        let from = buf.buffer[startI + 1];\n        nodes.push(buf.slice(startI, endI, from));\n        positions.push(from - off);\n    }\n}\n// This function takes a node that's in a buffer, and converts it, and\n// its parent buffer nodes, into a Tree. This is again acting on the\n// assumption that the trees and buffers have been constructed by the\n// parse that was ran via the mix parser, and thus aren't shared with\n// any other code, making violations of the immutability safe.\nfunction materialize(cursor) {\n    let { node } = cursor, stack = [];\n    let buffer = node.context.buffer;\n    // Scan up to the nearest tree\n    do {\n        stack.push(cursor.index);\n        cursor.parent();\n    } while (!cursor.tree);\n    // Find the index of the buffer in that tree\n    let base = cursor.tree, i = base.children.indexOf(buffer);\n    let buf = base.children[i], b = buf.buffer, newStack = [i];\n    // Split a level in the buffer, putting the nodes before and after\n    // the child that contains `node` into new buffers.\n    function split(startI, endI, type, innerOffset, length, stackPos) {\n        let targetI = stack[stackPos];\n        let children = [], positions = [];\n        sliceBuf(buf, startI, targetI, children, positions, innerOffset);\n        let from = b[targetI + 1], to = b[targetI + 2];\n        newStack.push(children.length);\n        let child = stackPos\n            ? split(targetI + 4, b[targetI + 3], buf.set.types[b[targetI]], from, to - from, stackPos - 1)\n            : node.toTree();\n        children.push(child);\n        positions.push(from - innerOffset);\n        sliceBuf(buf, b[targetI + 3], endI, children, positions, innerOffset);\n        return new Tree(type, children, positions, length);\n    }\n    base.children[i] = split(0, b.length, NodeType.none, 0, buf.length, stack.length - 1);\n    // Move the cursor back to the target node\n    for (let index of newStack) {\n        let tree = cursor.tree.children[index], pos = cursor.tree.positions[index];\n        cursor.yield(new TreeNode(tree, pos + cursor.from, index, cursor._tree));\n    }\n}\nclass StructureCursor {\n    constructor(root, offset) {\n        this.offset = offset;\n        this.done = false;\n        this.cursor = root.cursor(IterMode.IncludeAnonymous | IterMode.IgnoreMounts);\n    }\n    // Move to the first node (in pre-order) that starts at or after `pos`.\n    moveTo(pos) {\n        let { cursor } = this, p = pos - this.offset;\n        while (!this.done && cursor.from < p) {\n            if (cursor.to >= pos && cursor.enter(p, 1, IterMode.IgnoreOverlays | IterMode.ExcludeBuffers)) ;\n            else if (!cursor.next(false))\n                this.done = true;\n        }\n    }\n    hasNode(cursor) {\n        this.moveTo(cursor.from);\n        if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {\n            for (let tree = this.cursor.tree;;) {\n                if (tree == cursor.tree)\n                    return true;\n                if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree)\n                    tree = tree.children[0];\n                else\n                    break;\n            }\n        }\n        return false;\n    }\n}\nclass FragmentCursor {\n    constructor(fragments) {\n        var _a;\n        this.fragments = fragments;\n        this.curTo = 0;\n        this.fragI = 0;\n        if (fragments.length) {\n            let first = this.curFrag = fragments[0];\n            this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;\n            this.inner = new StructureCursor(first.tree, -first.offset);\n        }\n        else {\n            this.curFrag = this.inner = null;\n        }\n    }\n    hasNode(node) {\n        while (this.curFrag && node.from >= this.curTo)\n            this.nextFrag();\n        return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);\n    }\n    nextFrag() {\n        var _a;\n        this.fragI++;\n        if (this.fragI == this.fragments.length) {\n            this.curFrag = this.inner = null;\n        }\n        else {\n            let frag = this.curFrag = this.fragments[this.fragI];\n            this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;\n            this.inner = new StructureCursor(frag.tree, -frag.offset);\n        }\n    }\n    findMounts(pos, parser) {\n        var _a;\n        let result = [];\n        if (this.inner) {\n            this.inner.cursor.moveTo(pos, 1);\n            for (let pos = this.inner.cursor.node; pos; pos = pos.parent) {\n                let mount = (_a = pos.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);\n                if (mount && mount.parser == parser) {\n                    for (let i = this.fragI; i < this.fragments.length; i++) {\n                        let frag = this.fragments[i];\n                        if (frag.from >= pos.to)\n                            break;\n                        if (frag.tree == this.curFrag.tree)\n                            result.push({\n                                frag,\n                                pos: pos.from - frag.offset,\n                                mount\n                            });\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\nfunction punchRanges(outer, ranges) {\n    let copy = null, current = ranges;\n    for (let i = 1, j = 0; i < outer.length; i++) {\n        let gapFrom = outer[i - 1].to, gapTo = outer[i].from;\n        for (; j < current.length; j++) {\n            let r = current[j];\n            if (r.from >= gapTo)\n                break;\n            if (r.to <= gapFrom)\n                continue;\n            if (!copy)\n                current = copy = ranges.slice();\n            if (r.from < gapFrom) {\n                copy[j] = new Range(r.from, gapFrom);\n                if (r.to > gapTo)\n                    copy.splice(j + 1, 0, new Range(gapTo, r.to));\n            }\n            else if (r.to > gapTo) {\n                copy[j--] = new Range(gapTo, r.to);\n            }\n            else {\n                copy.splice(j--, 1);\n            }\n        }\n    }\n    return current;\n}\nfunction findCoverChanges(a, b, from, to) {\n    let iA = 0, iB = 0, inA = false, inB = false, pos = -1e9;\n    let result = [];\n    for (;;) {\n        let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;\n        let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;\n        if (inA != inB) {\n            let start = Math.max(pos, from), end = Math.min(nextA, nextB, to);\n            if (start < end)\n                result.push(new Range(start, end));\n        }\n        pos = Math.min(nextA, nextB);\n        if (pos == 1e9)\n            break;\n        if (nextA == pos) {\n            if (!inA)\n                inA = true;\n            else {\n                inA = false;\n                iA++;\n            }\n        }\n        if (nextB == pos) {\n            if (!inB)\n                inB = true;\n            else {\n                inB = false;\n                iB++;\n            }\n        }\n    }\n    return result;\n}\n// Given a number of fragments for the outer tree, and a set of ranges\n// to parse, find fragments for inner trees mounted around those\n// ranges, if any.\nfunction enterFragments(mounts, ranges) {\n    let result = [];\n    for (let { pos, mount, frag } of mounts) {\n        let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0), endPos = startPos + mount.tree.length;\n        let from = Math.max(frag.from, startPos), to = Math.min(frag.to, endPos);\n        if (mount.overlay) {\n            let overlay = mount.overlay.map(r => new Range(r.from + pos, r.to + pos));\n            let changes = findCoverChanges(ranges, overlay, from, to);\n            for (let i = 0, pos = from;; i++) {\n                let last = i == changes.length, end = last ? to : changes[i].from;\n                if (end > pos)\n                    result.push(new TreeFragment(pos, end, mount.tree, -startPos, frag.from >= pos || frag.openStart, frag.to <= end || frag.openEnd));\n                if (last)\n                    break;\n                pos = changes[i].to;\n            }\n        }\n        else {\n            result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos || frag.openStart, frag.to <= endPos || frag.openEnd));\n        }\n    }\n    return result;\n}\n\nexport { DefaultBufferLength, IterMode, MountedTree, NodeProp, NodeSet, NodeType, NodeWeakMap, Parser, Tree, TreeBuffer, TreeCursor, TreeFragment, parseMixed };\n","import { Parser, NodeProp, NodeSet, NodeType, DefaultBufferLength, Tree, IterMode } from '@lezer/common';\n\n/**\nA parse stack. These are used internally by the parser to track\nparsing progress. They also provide some properties and methods\nthat external code such as a tokenizer can use to get information\nabout the parse state.\n*/\nclass Stack {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The parse that this stack is part of @internal\n    */\n    p, \n    /**\n    Holds state, input pos, buffer index triplets for all but the\n    top state @internal\n    */\n    stack, \n    /**\n    The current parse state @internal\n    */\n    state, \n    // The position at which the next reduce should take place. This\n    // can be less than `this.pos` when skipped expressions have been\n    // added to the stack (which should be moved outside of the next\n    // reduction)\n    /**\n    @internal\n    */\n    reducePos, \n    /**\n    The input position up to which this stack has parsed.\n    */\n    pos, \n    /**\n    The dynamic score of the stack, including dynamic precedence\n    and error-recovery penalties\n    @internal\n    */\n    score, \n    // The output buffer. Holds (type, start, end, size) quads\n    // representing nodes created by the parser, where `size` is\n    // amount of buffer array entries covered by this node.\n    /**\n    @internal\n    */\n    buffer, \n    // The base offset of the buffer. When stacks are split, the split\n    // instance shared the buffer history with its parent up to\n    // `bufferBase`, which is the absolute offset (including the\n    // offset of previous splits) into the buffer at which this stack\n    // starts writing.\n    /**\n    @internal\n    */\n    bufferBase, \n    /**\n    @internal\n    */\n    curContext, \n    /**\n    @internal\n    */\n    lookAhead = 0, \n    // A parent stack from which this was split off, if any. This is\n    // set up so that it always points to a stack that has some\n    // additional buffer content, never to a stack with an equal\n    // `bufferBase`.\n    /**\n    @internal\n    */\n    parent) {\n        this.p = p;\n        this.stack = stack;\n        this.state = state;\n        this.reducePos = reducePos;\n        this.pos = pos;\n        this.score = score;\n        this.buffer = buffer;\n        this.bufferBase = bufferBase;\n        this.curContext = curContext;\n        this.lookAhead = lookAhead;\n        this.parent = parent;\n    }\n    /**\n    @internal\n    */\n    toString() {\n        return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? \"!\" + this.score : \"\"}`;\n    }\n    // Start an empty stack\n    /**\n    @internal\n    */\n    static start(p, state, pos = 0) {\n        let cx = p.parser.context;\n        return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);\n    }\n    /**\n    The stack's current [context](#lr.ContextTracker) value, if\n    any. Its type will depend on the context tracker's type\n    parameter, or it will be `null` if there is no context\n    tracker.\n    */\n    get context() { return this.curContext ? this.curContext.context : null; }\n    // Push a state onto the stack, tracking its start position as well\n    // as the buffer base at that point.\n    /**\n    @internal\n    */\n    pushState(state, start) {\n        this.stack.push(this.state, start, this.bufferBase + this.buffer.length);\n        this.state = state;\n    }\n    // Apply a reduce action\n    /**\n    @internal\n    */\n    reduce(action) {\n        var _a;\n        let depth = action >> 19 /* Action.ReduceDepthShift */, type = action & 65535 /* Action.ValueMask */;\n        let { parser } = this.p;\n        let lookaheadRecord = this.reducePos < this.pos - 25 /* Lookahead.Margin */;\n        if (lookaheadRecord)\n            this.setLookAhead(this.pos);\n        let dPrec = parser.dynamicPrecedence(type);\n        if (dPrec)\n            this.score += dPrec;\n        if (depth == 0) {\n            this.pushState(parser.getGoto(this.state, type, true), this.reducePos);\n            // Zero-depth reductions are a special case—they add stuff to\n            // the stack without popping anything off.\n            if (type < parser.minRepeatTerm)\n                this.storeNode(type, this.reducePos, this.reducePos, lookaheadRecord ? 8 : 4, true);\n            this.reduceContext(type, this.reducePos);\n            return;\n        }\n        // Find the base index into `this.stack`, content after which will\n        // be dropped. Note that with `StayFlag` reductions we need to\n        // consume two extra frames (the dummy parent node for the skipped\n        // expression and the state that we'll be staying in, which should\n        // be moved to `this.state`).\n        let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* Action.StayFlag */ ? 6 : 0);\n        let start = base ? this.stack[base - 2] : this.p.ranges[0].from, size = this.reducePos - start;\n        // This is a kludge to try and detect overly deep left-associative\n        // trees, which will not increase the parse stack depth and thus\n        // won't be caught by the regular stack-depth limit check.\n        if (size >= 2000 /* Recover.MinBigReduction */ && !((_a = this.p.parser.nodeSet.types[type]) === null || _a === void 0 ? void 0 : _a.isAnonymous)) {\n            if (start == this.p.lastBigReductionStart) {\n                this.p.bigReductionCount++;\n                this.p.lastBigReductionSize = size;\n            }\n            else if (this.p.lastBigReductionSize < size) {\n                this.p.bigReductionCount = 1;\n                this.p.lastBigReductionStart = start;\n                this.p.lastBigReductionSize = size;\n            }\n        }\n        let bufferBase = base ? this.stack[base - 1] : 0, count = this.bufferBase + this.buffer.length - bufferBase;\n        // Store normal terms or `R -> R R` repeat reductions\n        if (type < parser.minRepeatTerm || (action & 131072 /* Action.RepeatFlag */)) {\n            let pos = parser.stateFlag(this.state, 1 /* StateFlag.Skipped */) ? this.pos : this.reducePos;\n            this.storeNode(type, start, pos, count + 4, true);\n        }\n        if (action & 262144 /* Action.StayFlag */) {\n            this.state = this.stack[base];\n        }\n        else {\n            let baseStateID = this.stack[base - 3];\n            this.state = parser.getGoto(baseStateID, type, true);\n        }\n        while (this.stack.length > base)\n            this.stack.pop();\n        this.reduceContext(type, start);\n    }\n    // Shift a value into the buffer\n    /**\n    @internal\n    */\n    storeNode(term, start, end, size = 4, mustSink = false) {\n        if (term == 0 /* Term.Err */ &&\n            (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {\n            // Try to omit/merge adjacent error nodes\n            let cur = this, top = this.buffer.length;\n            if (top == 0 && cur.parent) {\n                top = cur.bufferBase - cur.parent.bufferBase;\n                cur = cur.parent;\n            }\n            if (top > 0 && cur.buffer[top - 4] == 0 /* Term.Err */ && cur.buffer[top - 1] > -1) {\n                if (start == end)\n                    return;\n                if (cur.buffer[top - 2] >= start) {\n                    cur.buffer[top - 2] = end;\n                    return;\n                }\n            }\n        }\n        if (!mustSink || this.pos == end) { // Simple case, just append\n            this.buffer.push(term, start, end, size);\n        }\n        else { // There may be skipped nodes that have to be moved forward\n            let index = this.buffer.length;\n            if (index > 0 && this.buffer[index - 4] != 0 /* Term.Err */) {\n                let mustMove = false;\n                for (let scan = index; scan > 0 && this.buffer[scan - 2] > end; scan -= 4) {\n                    if (this.buffer[scan - 1] >= 0) {\n                        mustMove = true;\n                        break;\n                    }\n                }\n                if (mustMove)\n                    while (index > 0 && this.buffer[index - 2] > end) {\n                        // Move this record forward\n                        this.buffer[index] = this.buffer[index - 4];\n                        this.buffer[index + 1] = this.buffer[index - 3];\n                        this.buffer[index + 2] = this.buffer[index - 2];\n                        this.buffer[index + 3] = this.buffer[index - 1];\n                        index -= 4;\n                        if (size > 4)\n                            size -= 4;\n                    }\n            }\n            this.buffer[index] = term;\n            this.buffer[index + 1] = start;\n            this.buffer[index + 2] = end;\n            this.buffer[index + 3] = size;\n        }\n    }\n    // Apply a shift action\n    /**\n    @internal\n    */\n    shift(action, type, start, end) {\n        if (action & 131072 /* Action.GotoFlag */) {\n            this.pushState(action & 65535 /* Action.ValueMask */, this.pos);\n        }\n        else if ((action & 262144 /* Action.StayFlag */) == 0) { // Regular shift\n            let nextState = action, { parser } = this.p;\n            if (end > this.pos || type <= parser.maxNode) {\n                this.pos = end;\n                if (!parser.stateFlag(nextState, 1 /* StateFlag.Skipped */))\n                    this.reducePos = end;\n            }\n            this.pushState(nextState, start);\n            this.shiftContext(type, start);\n            if (type <= parser.maxNode)\n                this.buffer.push(type, start, end, 4);\n        }\n        else { // Shift-and-stay, which means this is a skipped token\n            this.pos = end;\n            this.shiftContext(type, start);\n            if (type <= this.p.parser.maxNode)\n                this.buffer.push(type, start, end, 4);\n        }\n    }\n    // Apply an action\n    /**\n    @internal\n    */\n    apply(action, next, nextStart, nextEnd) {\n        if (action & 65536 /* Action.ReduceFlag */)\n            this.reduce(action);\n        else\n            this.shift(action, next, nextStart, nextEnd);\n    }\n    // Add a prebuilt (reused) node into the buffer.\n    /**\n    @internal\n    */\n    useNode(value, next) {\n        let index = this.p.reused.length - 1;\n        if (index < 0 || this.p.reused[index] != value) {\n            this.p.reused.push(value);\n            index++;\n        }\n        let start = this.pos;\n        this.reducePos = this.pos = start + value.length;\n        this.pushState(next, start);\n        this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));\n    }\n    // Split the stack. Due to the buffer sharing and the fact\n    // that `this.stack` tends to stay quite shallow, this isn't very\n    // expensive.\n    /**\n    @internal\n    */\n    split() {\n        let parent = this;\n        let off = parent.buffer.length;\n        // Because the top of the buffer (after this.pos) may be mutated\n        // to reorder reductions and skipped tokens, and shared buffers\n        // should be immutable, this copies any outstanding skipped tokens\n        // to the new buffer, and puts the base pointer before them.\n        while (off > 0 && parent.buffer[off - 2] > parent.reducePos)\n            off -= 4;\n        let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;\n        // Make sure parent points to an actual parent with content, if there is such a parent.\n        while (parent && base == parent.bufferBase)\n            parent = parent.parent;\n        return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);\n    }\n    // Try to recover from an error by 'deleting' (ignoring) one token.\n    /**\n    @internal\n    */\n    recoverByDelete(next, nextEnd) {\n        let isNode = next <= this.p.parser.maxNode;\n        if (isNode)\n            this.storeNode(next, this.pos, nextEnd, 4);\n        this.storeNode(0 /* Term.Err */, this.pos, nextEnd, isNode ? 8 : 4);\n        this.pos = this.reducePos = nextEnd;\n        this.score -= 190 /* Recover.Delete */;\n    }\n    /**\n    Check if the given term would be able to be shifted (optionally\n    after some reductions) on this stack. This can be useful for\n    external tokenizers that want to make sure they only provide a\n    given token when it applies.\n    */\n    canShift(term) {\n        for (let sim = new SimulatedStack(this);;) {\n            let action = this.p.parser.stateSlot(sim.state, 4 /* ParseState.DefaultReduce */) || this.p.parser.hasAction(sim.state, term);\n            if (action == 0)\n                return false;\n            if ((action & 65536 /* Action.ReduceFlag */) == 0)\n                return true;\n            sim.reduce(action);\n        }\n    }\n    // Apply up to Recover.MaxNext recovery actions that conceptually\n    // inserts some missing token or rule.\n    /**\n    @internal\n    */\n    recoverByInsert(next) {\n        if (this.stack.length >= 300 /* Recover.MaxInsertStackDepth */)\n            return [];\n        let nextStates = this.p.parser.nextStates(this.state);\n        if (nextStates.length > 4 /* Recover.MaxNext */ << 1 || this.stack.length >= 120 /* Recover.DampenInsertStackDepth */) {\n            let best = [];\n            for (let i = 0, s; i < nextStates.length; i += 2) {\n                if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))\n                    best.push(nextStates[i], s);\n            }\n            if (this.stack.length < 120 /* Recover.DampenInsertStackDepth */)\n                for (let i = 0; best.length < 4 /* Recover.MaxNext */ << 1 && i < nextStates.length; i += 2) {\n                    let s = nextStates[i + 1];\n                    if (!best.some((v, i) => (i & 1) && v == s))\n                        best.push(nextStates[i], s);\n                }\n            nextStates = best;\n        }\n        let result = [];\n        for (let i = 0; i < nextStates.length && result.length < 4 /* Recover.MaxNext */; i += 2) {\n            let s = nextStates[i + 1];\n            if (s == this.state)\n                continue;\n            let stack = this.split();\n            stack.pushState(s, this.pos);\n            stack.storeNode(0 /* Term.Err */, stack.pos, stack.pos, 4, true);\n            stack.shiftContext(nextStates[i], this.pos);\n            stack.reducePos = this.pos;\n            stack.score -= 200 /* Recover.Insert */;\n            result.push(stack);\n        }\n        return result;\n    }\n    // Force a reduce, if possible. Return false if that can't\n    // be done.\n    /**\n    @internal\n    */\n    forceReduce() {\n        let { parser } = this.p;\n        let reduce = parser.stateSlot(this.state, 5 /* ParseState.ForcedReduce */);\n        if ((reduce & 65536 /* Action.ReduceFlag */) == 0)\n            return false;\n        if (!parser.validAction(this.state, reduce)) {\n            let depth = reduce >> 19 /* Action.ReduceDepthShift */, term = reduce & 65535 /* Action.ValueMask */;\n            let target = this.stack.length - depth * 3;\n            if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0) {\n                let backup = this.findForcedReduction();\n                if (backup == null)\n                    return false;\n                reduce = backup;\n            }\n            this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n            this.score -= 100 /* Recover.Reduce */;\n        }\n        this.reducePos = this.pos;\n        this.reduce(reduce);\n        return true;\n    }\n    /**\n    Try to scan through the automaton to find some kind of reduction\n    that can be applied. Used when the regular ForcedReduce field\n    isn't a valid action. @internal\n    */\n    findForcedReduction() {\n        let { parser } = this.p, seen = [];\n        let explore = (state, depth) => {\n            if (seen.includes(state))\n                return;\n            seen.push(state);\n            return parser.allActions(state, (action) => {\n                if (action & (262144 /* Action.StayFlag */ | 131072 /* Action.GotoFlag */)) ;\n                else if (action & 65536 /* Action.ReduceFlag */) {\n                    let rDepth = (action >> 19 /* Action.ReduceDepthShift */) - depth;\n                    if (rDepth > 1) {\n                        let term = action & 65535 /* Action.ValueMask */, target = this.stack.length - rDepth * 3;\n                        if (target >= 0 && parser.getGoto(this.stack[target], term, false) >= 0)\n                            return (rDepth << 19 /* Action.ReduceDepthShift */) | 65536 /* Action.ReduceFlag */ | term;\n                    }\n                }\n                else {\n                    let found = explore(action, depth + 1);\n                    if (found != null)\n                        return found;\n                }\n            });\n        };\n        return explore(this.state, 0);\n    }\n    /**\n    @internal\n    */\n    forceAll() {\n        while (!this.p.parser.stateFlag(this.state, 2 /* StateFlag.Accepting */)) {\n            if (!this.forceReduce()) {\n                this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n                break;\n            }\n        }\n        return this;\n    }\n    /**\n    Check whether this state has no further actions (assumed to be a direct descendant of the\n    top state, since any other states must be able to continue\n    somehow). @internal\n    */\n    get deadEnd() {\n        if (this.stack.length != 3)\n            return false;\n        let { parser } = this.p;\n        return parser.data[parser.stateSlot(this.state, 1 /* ParseState.Actions */)] == 65535 /* Seq.End */ &&\n            !parser.stateSlot(this.state, 4 /* ParseState.DefaultReduce */);\n    }\n    /**\n    Restart the stack (put it back in its start state). Only safe\n    when this.stack.length == 3 (state is directly below the top\n    state). @internal\n    */\n    restart() {\n        this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n        this.state = this.stack[0];\n        this.stack.length = 0;\n    }\n    /**\n    @internal\n    */\n    sameState(other) {\n        if (this.state != other.state || this.stack.length != other.stack.length)\n            return false;\n        for (let i = 0; i < this.stack.length; i += 3)\n            if (this.stack[i] != other.stack[i])\n                return false;\n        return true;\n    }\n    /**\n    Get the parser used by this stack.\n    */\n    get parser() { return this.p.parser; }\n    /**\n    Test whether a given dialect (by numeric ID, as exported from\n    the terms file) is enabled.\n    */\n    dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }\n    shiftContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    reduceContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    /**\n    @internal\n    */\n    emitContext() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -3)\n            this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);\n    }\n    /**\n    @internal\n    */\n    emitLookAhead() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -4)\n            this.buffer.push(this.lookAhead, this.pos, this.pos, -4);\n    }\n    updateContext(context) {\n        if (context != this.curContext.context) {\n            let newCx = new StackContext(this.curContext.tracker, context);\n            if (newCx.hash != this.curContext.hash)\n                this.emitContext();\n            this.curContext = newCx;\n        }\n    }\n    /**\n    @internal\n    */\n    setLookAhead(lookAhead) {\n        if (lookAhead > this.lookAhead) {\n            this.emitLookAhead();\n            this.lookAhead = lookAhead;\n        }\n    }\n    /**\n    @internal\n    */\n    close() {\n        if (this.curContext && this.curContext.tracker.strict)\n            this.emitContext();\n        if (this.lookAhead > 0)\n            this.emitLookAhead();\n    }\n}\nclass StackContext {\n    constructor(tracker, context) {\n        this.tracker = tracker;\n        this.context = context;\n        this.hash = tracker.strict ? tracker.hash(context) : 0;\n    }\n}\n// Used to cheaply run some reductions to scan ahead without mutating\n// an entire stack\nclass SimulatedStack {\n    constructor(start) {\n        this.start = start;\n        this.state = start.state;\n        this.stack = start.stack;\n        this.base = this.stack.length;\n    }\n    reduce(action) {\n        let term = action & 65535 /* Action.ValueMask */, depth = action >> 19 /* Action.ReduceDepthShift */;\n        if (depth == 0) {\n            if (this.stack == this.start.stack)\n                this.stack = this.stack.slice();\n            this.stack.push(this.state, 0, 0);\n            this.base += 3;\n        }\n        else {\n            this.base -= (depth - 1) * 3;\n        }\n        let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);\n        this.state = goto;\n    }\n}\n// This is given to `Tree.build` to build a buffer, and encapsulates\n// the parent-stack-walking necessary to read the nodes.\nclass StackBufferCursor {\n    constructor(stack, pos, index) {\n        this.stack = stack;\n        this.pos = pos;\n        this.index = index;\n        this.buffer = stack.buffer;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    static create(stack, pos = stack.bufferBase + stack.buffer.length) {\n        return new StackBufferCursor(stack, pos, pos - stack.bufferBase);\n    }\n    maybeNext() {\n        let next = this.stack.parent;\n        if (next != null) {\n            this.index = this.stack.bufferBase - next.bufferBase;\n            this.stack = next;\n            this.buffer = next.buffer;\n        }\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    next() {\n        this.index -= 4;\n        this.pos -= 4;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    fork() {\n        return new StackBufferCursor(this.stack, this.pos, this.index);\n    }\n}\n\n// See lezer-generator/src/encode.ts for comments about the encoding\n// used here\nfunction decodeArray(input, Type = Uint16Array) {\n    if (typeof input != \"string\")\n        return input;\n    let array = null;\n    for (let pos = 0, out = 0; pos < input.length;) {\n        let value = 0;\n        for (;;) {\n            let next = input.charCodeAt(pos++), stop = false;\n            if (next == 126 /* Encode.BigValCode */) {\n                value = 65535 /* Encode.BigVal */;\n                break;\n            }\n            if (next >= 92 /* Encode.Gap2 */)\n                next--;\n            if (next >= 34 /* Encode.Gap1 */)\n                next--;\n            let digit = next - 32 /* Encode.Start */;\n            if (digit >= 46 /* Encode.Base */) {\n                digit -= 46 /* Encode.Base */;\n                stop = true;\n            }\n            value += digit;\n            if (stop)\n                break;\n            value *= 46 /* Encode.Base */;\n        }\n        if (array)\n            array[out++] = value;\n        else\n            array = new Type(value);\n    }\n    return array;\n}\n\nclass CachedToken {\n    constructor() {\n        this.start = -1;\n        this.value = -1;\n        this.end = -1;\n        this.extended = -1;\n        this.lookAhead = 0;\n        this.mask = 0;\n        this.context = 0;\n    }\n}\nconst nullToken = new CachedToken;\n/**\n[Tokenizers](#lr.ExternalTokenizer) interact with the input\nthrough this interface. It presents the input as a stream of\ncharacters, tracking lookahead and hiding the complexity of\n[ranges](#common.Parser.parse^ranges) from tokenizer code.\n*/\nclass InputStream {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    @internal\n    */\n    input, \n    /**\n    @internal\n    */\n    ranges) {\n        this.input = input;\n        this.ranges = ranges;\n        /**\n        @internal\n        */\n        this.chunk = \"\";\n        /**\n        @internal\n        */\n        this.chunkOff = 0;\n        /**\n        Backup chunk\n        */\n        this.chunk2 = \"\";\n        this.chunk2Pos = 0;\n        /**\n        The character code of the next code unit in the input, or -1\n        when the stream is at the end of the input.\n        */\n        this.next = -1;\n        /**\n        @internal\n        */\n        this.token = nullToken;\n        this.rangeIndex = 0;\n        this.pos = this.chunkPos = ranges[0].from;\n        this.range = ranges[0];\n        this.end = ranges[ranges.length - 1].to;\n        this.readNext();\n    }\n    /**\n    @internal\n    */\n    resolveOffset(offset, assoc) {\n        let range = this.range, index = this.rangeIndex;\n        let pos = this.pos + offset;\n        while (pos < range.from) {\n            if (!index)\n                return null;\n            let next = this.ranges[--index];\n            pos -= range.from - next.to;\n            range = next;\n        }\n        while (assoc < 0 ? pos > range.to : pos >= range.to) {\n            if (index == this.ranges.length - 1)\n                return null;\n            let next = this.ranges[++index];\n            pos += next.from - range.to;\n            range = next;\n        }\n        return pos;\n    }\n    /**\n    @internal\n    */\n    clipPos(pos) {\n        if (pos >= this.range.from && pos < this.range.to)\n            return pos;\n        for (let range of this.ranges)\n            if (range.to > pos)\n                return Math.max(pos, range.from);\n        return this.end;\n    }\n    /**\n    Look at a code unit near the stream position. `.peek(0)` equals\n    `.next`, `.peek(-1)` gives you the previous character, and so\n    on.\n    \n    Note that looking around during tokenizing creates dependencies\n    on potentially far-away content, which may reduce the\n    effectiveness incremental parsing—when looking forward—or even\n    cause invalid reparses when looking backward more than 25 code\n    units, since the library does not track lookbehind.\n    */\n    peek(offset) {\n        let idx = this.chunkOff + offset, pos, result;\n        if (idx >= 0 && idx < this.chunk.length) {\n            pos = this.pos + offset;\n            result = this.chunk.charCodeAt(idx);\n        }\n        else {\n            let resolved = this.resolveOffset(offset, 1);\n            if (resolved == null)\n                return -1;\n            pos = resolved;\n            if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {\n                result = this.chunk2.charCodeAt(pos - this.chunk2Pos);\n            }\n            else {\n                let i = this.rangeIndex, range = this.range;\n                while (range.to <= pos)\n                    range = this.ranges[++i];\n                this.chunk2 = this.input.chunk(this.chunk2Pos = pos);\n                if (pos + this.chunk2.length > range.to)\n                    this.chunk2 = this.chunk2.slice(0, range.to - pos);\n                result = this.chunk2.charCodeAt(0);\n            }\n        }\n        if (pos >= this.token.lookAhead)\n            this.token.lookAhead = pos + 1;\n        return result;\n    }\n    /**\n    Accept a token. By default, the end of the token is set to the\n    current stream position, but you can pass an offset (relative to\n    the stream position) to change that.\n    */\n    acceptToken(token, endOffset = 0) {\n        let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;\n        if (end == null || end < this.token.start)\n            throw new RangeError(\"Token end out of bounds\");\n        this.token.value = token;\n        this.token.end = end;\n    }\n    /**\n    Accept a token ending at a specific given position.\n    */\n    acceptTokenTo(token, endPos) {\n        this.token.value = token;\n        this.token.end = endPos;\n    }\n    getChunk() {\n        if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {\n            let { chunk, chunkPos } = this;\n            this.chunk = this.chunk2;\n            this.chunkPos = this.chunk2Pos;\n            this.chunk2 = chunk;\n            this.chunk2Pos = chunkPos;\n            this.chunkOff = this.pos - this.chunkPos;\n        }\n        else {\n            this.chunk2 = this.chunk;\n            this.chunk2Pos = this.chunkPos;\n            let nextChunk = this.input.chunk(this.pos);\n            let end = this.pos + nextChunk.length;\n            this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;\n            this.chunkPos = this.pos;\n            this.chunkOff = 0;\n        }\n    }\n    readNext() {\n        if (this.chunkOff >= this.chunk.length) {\n            this.getChunk();\n            if (this.chunkOff == this.chunk.length)\n                return this.next = -1;\n        }\n        return this.next = this.chunk.charCodeAt(this.chunkOff);\n    }\n    /**\n    Move the stream forward N (defaults to 1) code units. Returns\n    the new value of [`next`](#lr.InputStream.next).\n    */\n    advance(n = 1) {\n        this.chunkOff += n;\n        while (this.pos + n >= this.range.to) {\n            if (this.rangeIndex == this.ranges.length - 1)\n                return this.setDone();\n            n -= this.range.to - this.pos;\n            this.range = this.ranges[++this.rangeIndex];\n            this.pos = this.range.from;\n        }\n        this.pos += n;\n        if (this.pos >= this.token.lookAhead)\n            this.token.lookAhead = this.pos + 1;\n        return this.readNext();\n    }\n    setDone() {\n        this.pos = this.chunkPos = this.end;\n        this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];\n        this.chunk = \"\";\n        return this.next = -1;\n    }\n    /**\n    @internal\n    */\n    reset(pos, token) {\n        if (token) {\n            this.token = token;\n            token.start = pos;\n            token.lookAhead = pos + 1;\n            token.value = token.extended = -1;\n        }\n        else {\n            this.token = nullToken;\n        }\n        if (this.pos != pos) {\n            this.pos = pos;\n            if (pos == this.end) {\n                this.setDone();\n                return this;\n            }\n            while (pos < this.range.from)\n                this.range = this.ranges[--this.rangeIndex];\n            while (pos >= this.range.to)\n                this.range = this.ranges[++this.rangeIndex];\n            if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {\n                this.chunkOff = pos - this.chunkPos;\n            }\n            else {\n                this.chunk = \"\";\n                this.chunkOff = 0;\n            }\n            this.readNext();\n        }\n        return this;\n    }\n    /**\n    @internal\n    */\n    read(from, to) {\n        if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)\n            return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);\n        if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)\n            return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);\n        if (from >= this.range.from && to <= this.range.to)\n            return this.input.read(from, to);\n        let result = \"\";\n        for (let r of this.ranges) {\n            if (r.from >= to)\n                break;\n            if (r.to > from)\n                result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));\n        }\n        return result;\n    }\n}\n/**\n@internal\n*/\nclass TokenGroup {\n    constructor(data, id) {\n        this.data = data;\n        this.id = id;\n    }\n    token(input, stack) {\n        let { parser } = stack.p;\n        readToken(this.data, input, stack, this.id, parser.data, parser.tokenPrecTable);\n    }\n}\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/**\n@hide\n*/\nclass LocalTokenGroup {\n    constructor(data, precTable, elseToken) {\n        this.precTable = precTable;\n        this.elseToken = elseToken;\n        this.data = typeof data == \"string\" ? decodeArray(data) : data;\n    }\n    token(input, stack) {\n        let start = input.pos, skipped = 0;\n        for (;;) {\n            let atEof = input.next < 0, nextPos = input.resolveOffset(1, 1);\n            readToken(this.data, input, stack, 0, this.data, this.precTable);\n            if (input.token.value > -1)\n                break;\n            if (this.elseToken == null)\n                return;\n            if (!atEof)\n                skipped++;\n            if (nextPos == null)\n                break;\n            input.reset(nextPos, input.token);\n        }\n        if (skipped) {\n            input.reset(start, input.token);\n            input.acceptToken(this.elseToken, skipped);\n        }\n    }\n}\nLocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/**\n`@external tokens` declarations in the grammar should resolve to\nan instance of this class.\n*/\nclass ExternalTokenizer {\n    /**\n    Create a tokenizer. The first argument is the function that,\n    given an input stream, scans for the types of tokens it\n    recognizes at the stream's position, and calls\n    [`acceptToken`](#lr.InputStream.acceptToken) when it finds\n    one.\n    */\n    constructor(\n    /**\n    @internal\n    */\n    token, options = {}) {\n        this.token = token;\n        this.contextual = !!options.contextual;\n        this.fallback = !!options.fallback;\n        this.extend = !!options.extend;\n    }\n}\n// Tokenizer data is stored a big uint16 array containing, for each\n// state:\n//\n//  - A group bitmask, indicating what token groups are reachable from\n//    this state, so that paths that can only lead to tokens not in\n//    any of the current groups can be cut off early.\n//\n//  - The position of the end of the state's sequence of accepting\n//    tokens\n//\n//  - The number of outgoing edges for the state\n//\n//  - The accepting tokens, as (token id, group mask) pairs\n//\n//  - The outgoing edges, as (start character, end character, state\n//    index) triples, with end character being exclusive\n//\n// This function interprets that data, running through a stream as\n// long as new states with the a matching group mask can be reached,\n// and updating `input.token` when it matches a token.\nfunction readToken(data, input, stack, group, precTable, precOffset) {\n    let state = 0, groupMask = 1 << group, { dialect } = stack.p.parser;\n    scan: for (;;) {\n        if ((groupMask & data[state]) == 0)\n            break;\n        let accEnd = data[state + 1];\n        // Check whether this state can lead to a token in the current group\n        // Accept tokens in this state, possibly overwriting\n        // lower-precedence / shorter tokens\n        for (let i = state + 3; i < accEnd; i += 2)\n            if ((data[i + 1] & groupMask) > 0) {\n                let term = data[i];\n                if (dialect.allows(term) &&\n                    (input.token.value == -1 || input.token.value == term ||\n                        overrides(term, input.token.value, precTable, precOffset))) {\n                    input.acceptToken(term);\n                    break;\n                }\n            }\n        let next = input.next, low = 0, high = data[state + 2];\n        // Special case for EOF\n        if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */) {\n            state = data[accEnd + high * 3 - 1];\n            continue scan;\n        }\n        // Do a binary search on the state's edges\n        for (; low < high;) {\n            let mid = (low + high) >> 1;\n            let index = accEnd + mid + (mid << 1);\n            let from = data[index], to = data[index + 1] || 0x10000;\n            if (next < from)\n                high = mid;\n            else if (next >= to)\n                low = mid + 1;\n            else {\n                state = data[index + 2];\n                input.advance();\n                continue scan;\n            }\n        }\n        break;\n    }\n}\nfunction findOffset(data, start, term) {\n    for (let i = start, next; (next = data[i]) != 65535 /* Seq.End */; i++)\n        if (next == term)\n            return i - start;\n    return -1;\n}\nfunction overrides(token, prev, tableData, tableOffset) {\n    let iPrev = findOffset(tableData, tableOffset, prev);\n    return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;\n}\n\n// Environment variable used to control console output\nconst verbose = typeof process != \"undefined\" && process.env && /\\bparse\\b/.test(process.env.LOG);\nlet stackIDs = null;\nfunction cutAt(tree, pos, side) {\n    let cursor = tree.cursor(IterMode.IncludeAnonymous);\n    cursor.moveTo(pos);\n    for (;;) {\n        if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))\n            for (;;) {\n                if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)\n                    return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Lookahead.Margin */))\n                        : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Lookahead.Margin */));\n                if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())\n                    break;\n                if (!cursor.parent())\n                    return side < 0 ? 0 : tree.length;\n            }\n    }\n}\nclass FragmentCursor {\n    constructor(fragments, nodeSet) {\n        this.fragments = fragments;\n        this.nodeSet = nodeSet;\n        this.i = 0;\n        this.fragment = null;\n        this.safeFrom = -1;\n        this.safeTo = -1;\n        this.trees = [];\n        this.start = [];\n        this.index = [];\n        this.nextFragment();\n    }\n    nextFragment() {\n        let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\n        if (fr) {\n            this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;\n            this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;\n            while (this.trees.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n            }\n            this.trees.push(fr.tree);\n            this.start.push(-fr.offset);\n            this.index.push(0);\n            this.nextStart = this.safeFrom;\n        }\n        else {\n            this.nextStart = 1e9;\n        }\n    }\n    // `pos` must be >= any previously given `pos` for this cursor\n    nodeAt(pos) {\n        if (pos < this.nextStart)\n            return null;\n        while (this.fragment && this.safeTo <= pos)\n            this.nextFragment();\n        if (!this.fragment)\n            return null;\n        for (;;) {\n            let last = this.trees.length - 1;\n            if (last < 0) { // End of tree\n                this.nextFragment();\n                return null;\n            }\n            let top = this.trees[last], index = this.index[last];\n            if (index == top.children.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n                continue;\n            }\n            let next = top.children[index];\n            let start = this.start[last] + top.positions[index];\n            if (start > pos) {\n                this.nextStart = start;\n                return null;\n            }\n            if (next instanceof Tree) {\n                if (start == pos) {\n                    if (start < this.safeFrom)\n                        return null;\n                    let end = start + next.length;\n                    if (end <= this.safeTo) {\n                        let lookAhead = next.prop(NodeProp.lookAhead);\n                        if (!lookAhead || end + lookAhead < this.fragment.to)\n                            return next;\n                    }\n                }\n                this.index[last]++;\n                if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node\n                    this.trees.push(next);\n                    this.start.push(start);\n                    this.index.push(0);\n                }\n            }\n            else {\n                this.index[last]++;\n                this.nextStart = start + next.length;\n            }\n        }\n    }\n}\nclass TokenCache {\n    constructor(parser, stream) {\n        this.stream = stream;\n        this.tokens = [];\n        this.mainToken = null;\n        this.actions = [];\n        this.tokens = parser.tokenizers.map(_ => new CachedToken);\n    }\n    getActions(stack) {\n        let actionIndex = 0;\n        let main = null;\n        let { parser } = stack.p, { tokenizers } = parser;\n        let mask = parser.stateSlot(stack.state, 3 /* ParseState.TokenizerMask */);\n        let context = stack.curContext ? stack.curContext.hash : 0;\n        let lookAhead = 0;\n        for (let i = 0; i < tokenizers.length; i++) {\n            if (((1 << i) & mask) == 0)\n                continue;\n            let tokenizer = tokenizers[i], token = this.tokens[i];\n            if (main && !tokenizer.fallback)\n                continue;\n            if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\n                this.updateCachedToken(token, tokenizer, stack);\n                token.mask = mask;\n                token.context = context;\n            }\n            if (token.lookAhead > token.end + 25 /* Lookahead.Margin */)\n                lookAhead = Math.max(token.lookAhead, lookAhead);\n            if (token.value != 0 /* Term.Err */) {\n                let startIndex = actionIndex;\n                if (token.extended > -1)\n                    actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);\n                actionIndex = this.addActions(stack, token.value, token.end, actionIndex);\n                if (!tokenizer.extend) {\n                    main = token;\n                    if (actionIndex > startIndex)\n                        break;\n                }\n            }\n        }\n        while (this.actions.length > actionIndex)\n            this.actions.pop();\n        if (lookAhead)\n            stack.setLookAhead(lookAhead);\n        if (!main && stack.pos == this.stream.end) {\n            main = new CachedToken;\n            main.value = stack.p.parser.eofTerm;\n            main.start = main.end = stack.pos;\n            actionIndex = this.addActions(stack, main.value, main.end, actionIndex);\n        }\n        this.mainToken = main;\n        return this.actions;\n    }\n    getMainToken(stack) {\n        if (this.mainToken)\n            return this.mainToken;\n        let main = new CachedToken, { pos, p } = stack;\n        main.start = pos;\n        main.end = Math.min(pos + 1, p.stream.end);\n        main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Term.Err */;\n        return main;\n    }\n    updateCachedToken(token, tokenizer, stack) {\n        let start = this.stream.clipPos(stack.pos);\n        tokenizer.token(this.stream.reset(start, token), stack);\n        if (token.value > -1) {\n            let { parser } = stack.p;\n            for (let i = 0; i < parser.specialized.length; i++)\n                if (parser.specialized[i] == token.value) {\n                    let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);\n                    if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\n                        if ((result & 1) == 0 /* Specialize.Specialize */)\n                            token.value = result >> 1;\n                        else\n                            token.extended = result >> 1;\n                        break;\n                    }\n                }\n        }\n        else {\n            token.value = 0 /* Term.Err */;\n            token.end = this.stream.clipPos(start + 1);\n        }\n    }\n    putAction(action, token, end, index) {\n        // Don't add duplicate actions\n        for (let i = 0; i < index; i += 3)\n            if (this.actions[i] == action)\n                return index;\n        this.actions[index++] = action;\n        this.actions[index++] = token;\n        this.actions[index++] = end;\n        return index;\n    }\n    addActions(stack, token, end, index) {\n        let { state } = stack, { parser } = stack.p, { data } = parser;\n        for (let set = 0; set < 2; set++) {\n            for (let i = parser.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */);; i += 3) {\n                if (data[i] == 65535 /* Seq.End */) {\n                    if (data[i + 1] == 1 /* Seq.Next */) {\n                        i = pair(data, i + 2);\n                    }\n                    else {\n                        if (index == 0 && data[i + 1] == 2 /* Seq.Other */)\n                            index = this.putAction(pair(data, i + 2), token, end, index);\n                        break;\n                    }\n                }\n                if (data[i] == token)\n                    index = this.putAction(pair(data, i + 1), token, end, index);\n            }\n        }\n        return index;\n    }\n}\nclass Parse {\n    constructor(parser, input, fragments, ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.recovering = 0;\n        this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧\n        this.minStackPos = 0;\n        this.reused = [];\n        this.stoppedAt = null;\n        this.lastBigReductionStart = -1;\n        this.lastBigReductionSize = 0;\n        this.bigReductionCount = 0;\n        this.stream = new InputStream(input, ranges);\n        this.tokens = new TokenCache(parser, this.stream);\n        this.topTerm = parser.top[1];\n        let { from } = ranges[0];\n        this.stacks = [Stack.start(this, parser.top[0], from)];\n        this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4\n            ? new FragmentCursor(fragments, parser.nodeSet) : null;\n    }\n    get parsedPos() {\n        return this.minStackPos;\n    }\n    // Move the parser forward. This will process all parse stacks at\n    // `this.pos` and try to advance them to a further position. If no\n    // stack for such a position is found, it'll start error-recovery.\n    //\n    // When the parse is finished, this will return a syntax tree. When\n    // not, it returns `null`.\n    advance() {\n        let stacks = this.stacks, pos = this.minStackPos;\n        // This will hold stacks beyond `pos`.\n        let newStacks = this.stacks = [];\n        let stopped, stoppedTokens;\n        // If a large amount of reductions happened with the same start\n        // position, force the stack out of that production in order to\n        // avoid creating a tree too deep to recurse through.\n        // (This is an ugly kludge, because unfortunately there is no\n        // straightforward, cheap way to check for this happening, due to\n        // the history of reductions only being available in an\n        // expensive-to-access format in the stack buffers.)\n        if (this.bigReductionCount > 300 /* Rec.MaxLeftAssociativeReductionCount */ && stacks.length == 1) {\n            let [s] = stacks;\n            while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) { }\n            this.bigReductionCount = this.lastBigReductionSize = 0;\n        }\n        // Keep advancing any stacks at `pos` until they either move\n        // forward or can't be advanced. Gather stacks that can't be\n        // advanced further in `stopped`.\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i];\n            for (;;) {\n                this.tokens.mainToken = null;\n                if (stack.pos > pos) {\n                    newStacks.push(stack);\n                }\n                else if (this.advanceStack(stack, newStacks, stacks)) {\n                    continue;\n                }\n                else {\n                    if (!stopped) {\n                        stopped = [];\n                        stoppedTokens = [];\n                    }\n                    stopped.push(stack);\n                    let tok = this.tokens.getMainToken(stack);\n                    stoppedTokens.push(tok.value, tok.end);\n                }\n                break;\n            }\n        }\n        if (!newStacks.length) {\n            let finished = stopped && findFinished(stopped);\n            if (finished) {\n                if (verbose)\n                    console.log(\"Finish with \" + this.stackID(finished));\n                return this.stackToTree(finished);\n            }\n            if (this.parser.strict) {\n                if (verbose && stopped)\n                    console.log(\"Stuck with token \" + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : \"none\"));\n                throw new SyntaxError(\"No parse at \" + pos);\n            }\n            if (!this.recovering)\n                this.recovering = 5 /* Rec.Distance */;\n        }\n        if (this.recovering && stopped) {\n            let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]\n                : this.runRecovery(stopped, stoppedTokens, newStacks);\n            if (finished) {\n                if (verbose)\n                    console.log(\"Force-finish \" + this.stackID(finished));\n                return this.stackToTree(finished.forceAll());\n            }\n        }\n        if (this.recovering) {\n            let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* Rec.MaxRemainingPerStep */;\n            if (newStacks.length > maxRemaining) {\n                newStacks.sort((a, b) => b.score - a.score);\n                while (newStacks.length > maxRemaining)\n                    newStacks.pop();\n            }\n            if (newStacks.some(s => s.reducePos > pos))\n                this.recovering--;\n        }\n        else if (newStacks.length > 1) {\n            // Prune stacks that are in the same state, or that have been\n            // running without splitting for a while, to avoid getting stuck\n            // with multiple successful stacks running endlessly on.\n            outer: for (let i = 0; i < newStacks.length - 1; i++) {\n                let stack = newStacks[i];\n                for (let j = i + 1; j < newStacks.length; j++) {\n                    let other = newStacks[j];\n                    if (stack.sameState(other) ||\n                        stack.buffer.length > 500 /* Rec.MinBufferLengthPrune */ && other.buffer.length > 500 /* Rec.MinBufferLengthPrune */) {\n                        if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {\n                            newStacks.splice(j--, 1);\n                        }\n                        else {\n                            newStacks.splice(i--, 1);\n                            continue outer;\n                        }\n                    }\n                }\n            }\n            if (newStacks.length > 12 /* Rec.MaxStackCount */)\n                newStacks.splice(12 /* Rec.MaxStackCount */, newStacks.length - 12 /* Rec.MaxStackCount */);\n        }\n        this.minStackPos = newStacks[0].pos;\n        for (let i = 1; i < newStacks.length; i++)\n            if (newStacks[i].pos < this.minStackPos)\n                this.minStackPos = newStacks[i].pos;\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    // Returns an updated version of the given stack, or null if the\n    // stack can't advance normally. When `split` and `stacks` are\n    // given, stacks split off by ambiguous operations will be pushed to\n    // `split`, or added to `stacks` if they move `pos` forward.\n    advanceStack(stack, stacks, split) {\n        let start = stack.pos, { parser } = this;\n        let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n        if (this.stoppedAt != null && start > this.stoppedAt)\n            return stack.forceReduce() ? stack : null;\n        if (this.fragments) {\n            let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;\n            for (let cached = this.fragments.nodeAt(start); cached;) {\n                let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;\n                if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {\n                    stack.useNode(cached, match);\n                    if (verbose)\n                        console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);\n                    return true;\n                }\n                if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)\n                    break;\n                let inner = cached.children[0];\n                if (inner instanceof Tree && cached.positions[0] == 0)\n                    cached = inner;\n                else\n                    break;\n            }\n        }\n        let defaultReduce = parser.stateSlot(stack.state, 4 /* ParseState.DefaultReduce */);\n        if (defaultReduce > 0) {\n            stack.reduce(defaultReduce);\n            if (verbose)\n                console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* Action.ValueMask */)})`);\n            return true;\n        }\n        if (stack.stack.length >= 8400 /* Rec.CutDepth */) {\n            while (stack.stack.length > 6000 /* Rec.CutTo */ && stack.forceReduce()) { }\n        }\n        let actions = this.tokens.getActions(stack);\n        for (let i = 0; i < actions.length;) {\n            let action = actions[i++], term = actions[i++], end = actions[i++];\n            let last = i == actions.length || !split;\n            let localStack = last ? stack : stack.split();\n            let main = this.tokens.mainToken;\n            localStack.apply(action, term, main ? main.start : localStack.pos, end);\n            if (verbose)\n                console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* Action.ReduceFlag */) == 0 ? \"shift\"\n                    : `reduce of ${parser.getName(action & 65535 /* Action.ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? \"\" : \", split\"})`);\n            if (last)\n                return true;\n            else if (localStack.pos > start)\n                stacks.push(localStack);\n            else\n                split.push(localStack);\n        }\n        return false;\n    }\n    // Advance a given stack forward as far as it will go. Returns the\n    // (possibly updated) stack if it got stuck, or null if it moved\n    // forward and was given to `pushStackDedup`.\n    advanceFully(stack, newStacks) {\n        let pos = stack.pos;\n        for (;;) {\n            if (!this.advanceStack(stack, null, null))\n                return false;\n            if (stack.pos > pos) {\n                pushStackDedup(stack, newStacks);\n                return true;\n            }\n        }\n    }\n    runRecovery(stacks, tokens, newStacks) {\n        let finished = null, restarted = false;\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];\n            let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n            if (stack.deadEnd) {\n                if (restarted)\n                    continue;\n                restarted = true;\n                stack.restart();\n                if (verbose)\n                    console.log(base + this.stackID(stack) + \" (restarted)\");\n                let done = this.advanceFully(stack, newStacks);\n                if (done)\n                    continue;\n            }\n            let force = stack.split(), forceBase = base;\n            for (let j = 0; force.forceReduce() && j < 10 /* Rec.ForceReduceLimit */; j++) {\n                if (verbose)\n                    console.log(forceBase + this.stackID(force) + \" (via force-reduce)\");\n                let done = this.advanceFully(force, newStacks);\n                if (done)\n                    break;\n                if (verbose)\n                    forceBase = this.stackID(force) + \" -> \";\n            }\n            for (let insert of stack.recoverByInsert(token)) {\n                if (verbose)\n                    console.log(base + this.stackID(insert) + \" (via recover-insert)\");\n                this.advanceFully(insert, newStacks);\n            }\n            if (this.stream.end > stack.pos) {\n                if (tokenEnd == stack.pos) {\n                    tokenEnd++;\n                    token = 0 /* Term.Err */;\n                }\n                stack.recoverByDelete(token, tokenEnd);\n                if (verbose)\n                    console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);\n                pushStackDedup(stack, newStacks);\n            }\n            else if (!finished || finished.score < stack.score) {\n                finished = stack;\n            }\n        }\n        return finished;\n    }\n    // Convert the stack's buffer to a syntax tree.\n    stackToTree(stack) {\n        stack.close();\n        return Tree.build({ buffer: StackBufferCursor.create(stack),\n            nodeSet: this.parser.nodeSet,\n            topID: this.topTerm,\n            maxBufferLength: this.parser.bufferLength,\n            reused: this.reused,\n            start: this.ranges[0].from,\n            length: stack.pos - this.ranges[0].from,\n            minRepeatType: this.parser.minRepeatTerm });\n    }\n    stackID(stack) {\n        let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);\n        if (!id)\n            stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));\n        return id + stack;\n    }\n}\nfunction pushStackDedup(stack, newStacks) {\n    for (let i = 0; i < newStacks.length; i++) {\n        let other = newStacks[i];\n        if (other.pos == stack.pos && other.sameState(stack)) {\n            if (newStacks[i].score < stack.score)\n                newStacks[i] = stack;\n            return;\n        }\n    }\n    newStacks.push(stack);\n}\nclass Dialect {\n    constructor(source, flags, disabled) {\n        this.source = source;\n        this.flags = flags;\n        this.disabled = disabled;\n    }\n    allows(term) { return !this.disabled || this.disabled[term] == 0; }\n}\nconst id = x => x;\n/**\nContext trackers are used to track stateful context (such as\nindentation in the Python grammar, or parent elements in the XML\ngrammar) needed by external tokenizers. You declare them in a\ngrammar file as `@context exportName from \"module\"`.\n\nContext values should be immutable, and can be updated (replaced)\non shift or reduce actions.\n\nThe export used in a `@context` declaration should be of this\ntype.\n*/\nclass ContextTracker {\n    /**\n    Define a context tracker.\n    */\n    constructor(spec) {\n        this.start = spec.start;\n        this.shift = spec.shift || id;\n        this.reduce = spec.reduce || id;\n        this.reuse = spec.reuse || id;\n        this.hash = spec.hash || (() => 0);\n        this.strict = spec.strict !== false;\n    }\n}\n/**\nHolds the parse tables for a given grammar, as generated by\n`lezer-generator`, and provides [methods](#common.Parser) to parse\ncontent with.\n*/\nclass LRParser extends Parser {\n    /**\n    @internal\n    */\n    constructor(spec) {\n        super();\n        /**\n        @internal\n        */\n        this.wrappers = [];\n        if (spec.version != 14 /* File.Version */)\n            throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* File.Version */})`);\n        let nodeNames = spec.nodeNames.split(\" \");\n        this.minRepeatTerm = nodeNames.length;\n        for (let i = 0; i < spec.repeatNodeCount; i++)\n            nodeNames.push(\"\");\n        let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);\n        let nodeProps = [];\n        for (let i = 0; i < nodeNames.length; i++)\n            nodeProps.push([]);\n        function setProp(nodeID, prop, value) {\n            nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);\n        }\n        if (spec.nodeProps)\n            for (let propSpec of spec.nodeProps) {\n                let prop = propSpec[0];\n                if (typeof prop == \"string\")\n                    prop = NodeProp[prop];\n                for (let i = 1; i < propSpec.length;) {\n                    let next = propSpec[i++];\n                    if (next >= 0) {\n                        setProp(next, prop, propSpec[i++]);\n                    }\n                    else {\n                        let value = propSpec[i + -next];\n                        for (let j = -next; j > 0; j--)\n                            setProp(propSpec[i++], prop, value);\n                        i++;\n                    }\n                }\n            }\n        this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({\n            name: i >= this.minRepeatTerm ? undefined : name,\n            id: i,\n            props: nodeProps[i],\n            top: topTerms.indexOf(i) > -1,\n            error: i == 0,\n            skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\n        })));\n        if (spec.propSources)\n            this.nodeSet = this.nodeSet.extend(...spec.propSources);\n        this.strict = false;\n        this.bufferLength = DefaultBufferLength;\n        let tokenArray = decodeArray(spec.tokenData);\n        this.context = spec.context;\n        this.specializerSpecs = spec.specialized || [];\n        this.specialized = new Uint16Array(this.specializerSpecs.length);\n        for (let i = 0; i < this.specializerSpecs.length; i++)\n            this.specialized[i] = this.specializerSpecs[i].term;\n        this.specializers = this.specializerSpecs.map(getSpecializer);\n        this.states = decodeArray(spec.states, Uint32Array);\n        this.data = decodeArray(spec.stateData);\n        this.goto = decodeArray(spec.goto);\n        this.maxTerm = spec.maxTerm;\n        this.tokenizers = spec.tokenizers.map(value => typeof value == \"number\" ? new TokenGroup(tokenArray, value) : value);\n        this.topRules = spec.topRules;\n        this.dialects = spec.dialects || {};\n        this.dynamicPrecedences = spec.dynamicPrecedences || null;\n        this.tokenPrecTable = spec.tokenPrec;\n        this.termNames = spec.termNames || null;\n        this.maxNode = this.nodeSet.types.length - 1;\n        this.dialect = this.parseDialect();\n        this.top = this.topRules[Object.keys(this.topRules)[0]];\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new Parse(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /**\n    Get a goto table entry @internal\n    */\n    getGoto(state, term, loose = false) {\n        let table = this.goto;\n        if (term >= table[0])\n            return -1;\n        for (let pos = table[term + 1];;) {\n            let groupTag = table[pos++], last = groupTag & 1;\n            let target = table[pos++];\n            if (last && loose)\n                return target;\n            for (let end = pos + (groupTag >> 1); pos < end; pos++)\n                if (table[pos] == state)\n                    return target;\n            if (last)\n                return -1;\n        }\n    }\n    /**\n    Check if this state has an action for a given terminal @internal\n    */\n    hasAction(state, terminal) {\n        let data = this.data;\n        for (let set = 0; set < 2; set++) {\n            for (let i = this.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */), next;; i += 3) {\n                if ((next = data[i]) == 65535 /* Seq.End */) {\n                    if (data[i + 1] == 1 /* Seq.Next */)\n                        next = data[i = pair(data, i + 2)];\n                    else if (data[i + 1] == 2 /* Seq.Other */)\n                        return pair(data, i + 2);\n                    else\n                        break;\n                }\n                if (next == terminal || next == 0 /* Term.Err */)\n                    return pair(data, i + 1);\n            }\n        }\n        return 0;\n    }\n    /**\n    @internal\n    */\n    stateSlot(state, slot) {\n        return this.states[(state * 6 /* ParseState.Size */) + slot];\n    }\n    /**\n    @internal\n    */\n    stateFlag(state, flag) {\n        return (this.stateSlot(state, 0 /* ParseState.Flags */) & flag) > 0;\n    }\n    /**\n    @internal\n    */\n    validAction(state, action) {\n        return !!this.allActions(state, a => a == action ? true : null);\n    }\n    /**\n    @internal\n    */\n    allActions(state, action) {\n        let deflt = this.stateSlot(state, 4 /* ParseState.DefaultReduce */);\n        let result = deflt ? action(deflt) : undefined;\n        for (let i = this.stateSlot(state, 1 /* ParseState.Actions */); result == null; i += 3) {\n            if (this.data[i] == 65535 /* Seq.End */) {\n                if (this.data[i + 1] == 1 /* Seq.Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            result = action(pair(this.data, i + 1));\n        }\n        return result;\n    }\n    /**\n    Get the states that can follow this one through shift actions or\n    goto jumps. @internal\n    */\n    nextStates(state) {\n        let result = [];\n        for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* Seq.End */) {\n                if (this.data[i + 1] == 1 /* Seq.Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            if ((this.data[i + 2] & (65536 /* Action.ReduceFlag */ >> 16)) == 0) {\n                let value = this.data[i + 1];\n                if (!result.some((v, i) => (i & 1) && v == value))\n                    result.push(this.data[i], value);\n            }\n        }\n        return result;\n    }\n    /**\n    Configure the parser. Returns a new parser instance that has the\n    given settings modified. Settings not provided in `config` are\n    kept from the original parser.\n    */\n    configure(config) {\n        // Hideous reflection-based kludge to make it easy to create a\n        // slightly modified copy of a parser.\n        let copy = Object.assign(Object.create(LRParser.prototype), this);\n        if (config.props)\n            copy.nodeSet = this.nodeSet.extend(...config.props);\n        if (config.top) {\n            let info = this.topRules[config.top];\n            if (!info)\n                throw new RangeError(`Invalid top rule name ${config.top}`);\n            copy.top = info;\n        }\n        if (config.tokenizers)\n            copy.tokenizers = this.tokenizers.map(t => {\n                let found = config.tokenizers.find(r => r.from == t);\n                return found ? found.to : t;\n            });\n        if (config.specializers) {\n            copy.specializers = this.specializers.slice();\n            copy.specializerSpecs = this.specializerSpecs.map((s, i) => {\n                let found = config.specializers.find(r => r.from == s.external);\n                if (!found)\n                    return s;\n                let spec = Object.assign(Object.assign({}, s), { external: found.to });\n                copy.specializers[i] = getSpecializer(spec);\n                return spec;\n            });\n        }\n        if (config.contextTracker)\n            copy.context = config.contextTracker;\n        if (config.dialect)\n            copy.dialect = this.parseDialect(config.dialect);\n        if (config.strict != null)\n            copy.strict = config.strict;\n        if (config.wrap)\n            copy.wrappers = copy.wrappers.concat(config.wrap);\n        if (config.bufferLength != null)\n            copy.bufferLength = config.bufferLength;\n        return copy;\n    }\n    /**\n    Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)\n    are registered for this parser.\n    */\n    hasWrappers() {\n        return this.wrappers.length > 0;\n    }\n    /**\n    Returns the name associated with a given term. This will only\n    work for all terms when the parser was generated with the\n    `--names` option. By default, only the names of tagged terms are\n    stored.\n    */\n    getName(term) {\n        return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);\n    }\n    /**\n    The eof term id is always allocated directly after the node\n    types. @internal\n    */\n    get eofTerm() { return this.maxNode + 1; }\n    /**\n    The type of top node produced by the parser.\n    */\n    get topNode() { return this.nodeSet.types[this.top[1]]; }\n    /**\n    @internal\n    */\n    dynamicPrecedence(term) {\n        let prec = this.dynamicPrecedences;\n        return prec == null ? 0 : prec[term] || 0;\n    }\n    /**\n    @internal\n    */\n    parseDialect(dialect) {\n        let values = Object.keys(this.dialects), flags = values.map(() => false);\n        if (dialect)\n            for (let part of dialect.split(\" \")) {\n                let id = values.indexOf(part);\n                if (id >= 0)\n                    flags[id] = true;\n            }\n        let disabled = null;\n        for (let i = 0; i < values.length; i++)\n            if (!flags[i]) {\n                for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* Seq.End */;)\n                    (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;\n            }\n        return new Dialect(dialect, flags, disabled);\n    }\n    /**\n    Used by the output of the parser generator. Not available to\n    user code. @hide\n    */\n    static deserialize(spec) {\n        return new LRParser(spec);\n    }\n}\nfunction pair(data, off) { return data[off] | (data[off + 1] << 16); }\nfunction findFinished(stacks) {\n    let best = null;\n    for (let stack of stacks) {\n        let stopped = stack.p.stoppedAt;\n        if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&\n            stack.p.parser.stateFlag(stack.state, 2 /* StateFlag.Accepting */) &&\n            (!best || best.score < stack.score))\n            best = stack;\n    }\n    return best;\n}\nfunction getSpecializer(spec) {\n    if (spec.external) {\n        let mask = spec.extend ? 1 /* Specialize.Extend */ : 0 /* Specialize.Specialize */;\n        return (value, stack) => (spec.external(value, stack) << 1) | mask;\n    }\n    return spec.get;\n}\n\nexport { ContextTracker, ExternalTokenizer, InputStream, LRParser, LocalTokenGroup, Stack };\n","import { ContextTracker, ExternalTokenizer, LRParser } from '@lezer/lr';\nimport { styleTags, tags } from '@lezer/highlight';\nimport { parseMixed } from '@lezer/common';\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst scriptText = 54,\n  StartCloseScriptTag = 1,\n  styleText = 55,\n  StartCloseStyleTag = 2,\n  textareaText = 56,\n  StartCloseTextareaTag = 3,\n  EndTag = 4,\n  SelfClosingEndTag = 5,\n  StartTag = 6,\n  StartScriptTag = 7,\n  StartStyleTag = 8,\n  StartTextareaTag = 9,\n  StartSelfClosingTag = 10,\n  StartCloseTag = 11,\n  NoMatchStartCloseTag = 12,\n  MismatchedStartCloseTag = 13,\n  missingCloseTag = 57,\n  IncompleteCloseTag = 14,\n  commentContent$1 = 58,\n  Element = 20,\n  TagName = 22,\n  Attribute = 23,\n  AttributeName = 24,\n  AttributeValue = 26,\n  UnquotedAttributeValue = 27,\n  ScriptText = 28,\n  StyleText = 31,\n  TextareaText = 34,\n  OpenTag = 36,\n  CloseTag = 37,\n  Dialect_noMatch = 0,\n  Dialect_selfClosing = 1;\n\n/* Hand-written tokenizers for HTML. */\n\nconst selfClosers = {\n  area: true, base: true, br: true, col: true, command: true,\n  embed: true, frame: true, hr: true, img: true, input: true,\n  keygen: true, link: true, meta: true, param: true, source: true,\n  track: true, wbr: true, menuitem: true\n};\n\nconst implicitlyClosed = {\n  dd: true, li: true, optgroup: true, option: true, p: true,\n  rp: true, rt: true, tbody: true, td: true, tfoot: true,\n  th: true, tr: true\n};\n\nconst closeOnOpen = {\n  dd: {dd: true, dt: true},\n  dt: {dd: true, dt: true},\n  li: {li: true},\n  option: {option: true, optgroup: true},\n  optgroup: {optgroup: true},\n  p: {\n    address: true, article: true, aside: true, blockquote: true, dir: true,\n    div: true, dl: true, fieldset: true, footer: true, form: true,\n    h1: true, h2: true, h3: true, h4: true, h5: true, h6: true,\n    header: true, hgroup: true, hr: true, menu: true, nav: true, ol: true,\n    p: true, pre: true, section: true, table: true, ul: true\n  },\n  rp: {rp: true, rt: true},\n  rt: {rp: true, rt: true},\n  tbody: {tbody: true, tfoot: true},\n  td: {td: true, th: true},\n  tfoot: {tbody: true},\n  th: {td: true, th: true},\n  thead: {tbody: true, tfoot: true},\n  tr: {tr: true}\n};\n\nfunction nameChar(ch) {\n  return ch == 45 || ch == 46 || ch == 58 || ch >= 65 && ch <= 90 || ch == 95 || ch >= 97 && ch <= 122 || ch >= 161\n}\n\nfunction isSpace(ch) {\n  return ch == 9 || ch == 10 || ch == 13 || ch == 32\n}\n\nlet cachedName = null, cachedInput = null, cachedPos = 0;\nfunction tagNameAfter(input, offset) {\n  let pos = input.pos + offset;\n  if (cachedPos == pos && cachedInput == input) return cachedName\n  let next = input.peek(offset);\n  while (isSpace(next)) next = input.peek(++offset);\n  let name = \"\";\n  for (;;) {\n    if (!nameChar(next)) break\n    name += String.fromCharCode(next);\n    next = input.peek(++offset);\n  }\n  // Undefined to signal there's a <? or <!, null for just missing\n  cachedInput = input; cachedPos = pos;\n  return cachedName = name ? name.toLowerCase() : next == question || next == bang ? undefined : null\n}\n\nconst lessThan = 60, greaterThan = 62, slash = 47, question = 63, bang = 33, dash = 45;\n\nfunction ElementContext(name, parent) {\n  this.name = name;\n  this.parent = parent;\n}\n\nconst startTagTerms = [StartTag, StartSelfClosingTag, StartScriptTag, StartStyleTag, StartTextareaTag];\n\nconst elementContext = new ContextTracker({\n  start: null,\n  shift(context, term, stack, input) {\n    return startTagTerms.indexOf(term) > -1 ? new ElementContext(tagNameAfter(input, 1) || \"\", context) : context\n  },\n  reduce(context, term) {\n    return term == Element && context ? context.parent : context\n  },\n  reuse(context, node, stack, input) {\n    let type = node.type.id;\n    return type == StartTag || type == OpenTag\n      ? new ElementContext(tagNameAfter(input, 1) || \"\", context) : context\n  },\n  strict: false\n});\n\nconst tagStart = new ExternalTokenizer((input, stack) => {\n  if (input.next != lessThan) {\n    // End of file, close any open tags\n    if (input.next < 0 && stack.context) input.acceptToken(missingCloseTag);\n    return\n  }\n  input.advance();\n  let close = input.next == slash;\n  if (close) input.advance();\n  let name = tagNameAfter(input, 0);\n  if (name === undefined) return\n  if (!name) return input.acceptToken(close ? IncompleteCloseTag : StartTag)\n\n  let parent = stack.context ? stack.context.name : null;\n  if (close) {\n    if (name == parent) return input.acceptToken(StartCloseTag)\n    if (parent && implicitlyClosed[parent]) return input.acceptToken(missingCloseTag, -2)\n    if (stack.dialectEnabled(Dialect_noMatch)) return input.acceptToken(NoMatchStartCloseTag)\n    for (let cx = stack.context; cx; cx = cx.parent) if (cx.name == name) return\n    input.acceptToken(MismatchedStartCloseTag);\n  } else {\n    if (name == \"script\") return input.acceptToken(StartScriptTag)\n    if (name == \"style\") return input.acceptToken(StartStyleTag)\n    if (name == \"textarea\") return input.acceptToken(StartTextareaTag)\n    if (selfClosers.hasOwnProperty(name)) return input.acceptToken(StartSelfClosingTag)\n    if (parent && closeOnOpen[parent] && closeOnOpen[parent][name]) input.acceptToken(missingCloseTag, -1);\n    else input.acceptToken(StartTag);\n  }\n}, {contextual: true});\n\nconst commentContent = new ExternalTokenizer(input => {\n  for (let dashes = 0, i = 0;; i++) {\n    if (input.next < 0) {\n      if (i) input.acceptToken(commentContent$1);\n      break\n    }\n    if (input.next == dash) {\n      dashes++;\n    } else if (input.next == greaterThan && dashes >= 2) {\n      if (i >= 3) input.acceptToken(commentContent$1, -2);\n      break\n    } else {\n      dashes = 0;\n    }\n    input.advance();\n  }\n});\n\nfunction inForeignElement(context) {\n  for (; context; context = context.parent)\n    if (context.name == \"svg\" || context.name == \"math\") return true\n  return false\n}\n\nconst endTag = new ExternalTokenizer((input, stack) => {\n  if (input.next == slash && input.peek(1) == greaterThan) {\n    let selfClosing = stack.dialectEnabled(Dialect_selfClosing) || inForeignElement(stack.context);\n    input.acceptToken(selfClosing ? SelfClosingEndTag : EndTag, 2);\n  } else if (input.next == greaterThan) {\n    input.acceptToken(EndTag, 1);\n  }\n});\n\nfunction contentTokenizer(tag, textToken, endToken) {\n  let lastState = 2 + tag.length;\n  return new ExternalTokenizer(input => {\n    // state means:\n    // - 0 nothing matched\n    // - 1 '<' matched\n    // - 2 '</' + possibly whitespace matched\n    // - 3-(1+tag.length) part of the tag matched\n    // - lastState whole tag + possibly whitespace matched\n    for (let state = 0, matchedLen = 0, i = 0;; i++) {\n      if (input.next < 0) {\n        if (i) input.acceptToken(textToken);\n        break\n      }\n      if (state == 0 && input.next == lessThan ||\n          state == 1 && input.next == slash ||\n          state >= 2 && state < lastState && input.next == tag.charCodeAt(state - 2)) {\n        state++;\n        matchedLen++;\n      } else if ((state == 2 || state == lastState) && isSpace(input.next)) {\n        matchedLen++;\n      } else if (state == lastState && input.next == greaterThan) {\n        if (i > matchedLen)\n          input.acceptToken(textToken, -matchedLen);\n        else\n          input.acceptToken(endToken, -(matchedLen - 2));\n        break\n      } else if ((input.next == 10 /* '\\n' */ || input.next == 13 /* '\\r' */) && i) {\n        input.acceptToken(textToken, 1);\n        break\n      } else {\n        state = matchedLen = 0;\n      }\n      input.advance();\n    }\n  })\n}\n\nconst scriptTokens = contentTokenizer(\"script\", scriptText, StartCloseScriptTag);\n\nconst styleTokens = contentTokenizer(\"style\", styleText, StartCloseStyleTag);\n\nconst textareaTokens = contentTokenizer(\"textarea\", textareaText, StartCloseTextareaTag);\n\nconst htmlHighlighting = styleTags({\n  \"Text RawText\": tags.content,\n  \"StartTag StartCloseTag SelfClosingEndTag EndTag\": tags.angleBracket,\n  TagName: tags.tagName,\n  \"MismatchedCloseTag/TagName\": [tags.tagName,  tags.invalid],\n  AttributeName: tags.attributeName,\n  \"AttributeValue UnquotedAttributeValue\": tags.attributeValue,\n  Is: tags.definitionOperator,\n  \"EntityReference CharacterReference\": tags.character,\n  Comment: tags.blockComment,\n  ProcessingInst: tags.processingInstruction,\n  DoctypeDecl: tags.documentMeta\n});\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst parser = LRParser.deserialize({\n  version: 14,\n  states: \",xOVO!rOOO!WQ#tO'#CqO!]Q#tO'#CzO!bQ#tO'#C}O!gQ#tO'#DQO!lQ#tO'#DSO!qOaO'#CpO!|ObO'#CpO#XOdO'#CpO$eO!rO'#CpOOO`'#Cp'#CpO$lO$fO'#DTO$tQ#tO'#DVO$yQ#tO'#DWOOO`'#Dk'#DkOOO`'#DY'#DYQVO!rOOO%OQ&rO,59]O%ZQ&rO,59fO%fQ&rO,59iO%qQ&rO,59lO%|Q&rO,59nOOOa'#D^'#D^O&XOaO'#CxO&dOaO,59[OOOb'#D_'#D_O&lObO'#C{O&wObO,59[OOOd'#D`'#D`O'POdO'#DOO'[OdO,59[OOO`'#Da'#DaO'dO!rO,59[O'kQ#tO'#DROOO`,59[,59[OOOp'#Db'#DbO'pO$fO,59oOOO`,59o,59oO'xQ#|O,59qO'}Q#|O,59rOOO`-E7W-E7WO(SQ&rO'#CsOOQW'#DZ'#DZO(bQ&rO1G.wOOOa1G.w1G.wOOO`1G/Y1G/YO(mQ&rO1G/QOOOb1G/Q1G/QO(xQ&rO1G/TOOOd1G/T1G/TO)TQ&rO1G/WOOO`1G/W1G/WO)`Q&rO1G/YOOOa-E7[-E7[O)kQ#tO'#CyOOO`1G.v1G.vOOOb-E7]-E7]O)pQ#tO'#C|OOOd-E7^-E7^O)uQ#tO'#DPOOO`-E7_-E7_O)zQ#|O,59mOOOp-E7`-E7`OOO`1G/Z1G/ZOOO`1G/]1G/]OOO`1G/^1G/^O*PQ,UO,59_OOQW-E7X-E7XOOOa7+$c7+$cOOO`7+$t7+$tOOOb7+$l7+$lOOOd7+$o7+$oOOO`7+$r7+$rO*[Q#|O,59eO*aQ#|O,59hO*fQ#|O,59kOOO`1G/X1G/XO*kO7[O'#CvO*|OMhO'#CvOOQW1G.y1G.yOOO`1G/P1G/POOO`1G/S1G/SOOO`1G/V1G/VOOOO'#D['#D[O+_O7[O,59bOOQW,59b,59bOOOO'#D]'#D]O+pOMhO,59bOOOO-E7Y-E7YOOQW1G.|1G.|OOOO-E7Z-E7Z\",\n  stateData: \",]~O!^OS~OUSOVPOWQOXROYTO[]O][O^^O`^Oa^Ob^Oc^Ox^O{_O!dZO~OfaO~OfbO~OfcO~OfdO~OfeO~O!WfOPlP!ZlP~O!XiOQoP!ZoP~O!YlORrP!ZrP~OUSOVPOWQOXROYTOZqO[]O][O^^O`^Oa^Ob^Oc^Ox^O!dZO~O!ZrO~P#dO![sO!euO~OfvO~OfwO~OS|OT}OhyO~OS!POT}OhyO~OS!ROT}OhyO~OS!TOT}OhyO~OS}OT}OhyO~O!WfOPlX!ZlX~OP!WO!Z!XO~O!XiOQoX!ZoX~OQ!ZO!Z!XO~O!YlORrX!ZrX~OR!]O!Z!XO~O!Z!XO~P#dOf!_O~O![sO!e!aO~OS!bO~OS!cO~Oi!dOSgXTgXhgX~OS!fOT!gOhyO~OS!hOT!gOhyO~OS!iOT!gOhyO~OS!jOT!gOhyO~OS!gOT!gOhyO~Of!kO~Of!lO~Of!mO~OS!nO~Ok!qO!`!oO!b!pO~OS!rO~OS!sO~OS!tO~Oa!uOb!uOc!uO!`!wO!a!uO~Oa!xOb!xOc!xO!b!wO!c!xO~Oa!uOb!uOc!uO!`!{O!a!uO~Oa!xOb!xOc!xO!b!{O!c!xO~OT~bac!dx{!d~\",\n  goto: \"%p!`PPPPPPPPPPPPPPPPPPPP!a!gP!mPP!yP!|#P#S#Y#]#`#f#i#l#r#x!aP!a!aP$O$U$l$r$x%O%U%[%bPPPPPPPP%hX^OX`pXUOX`pezabcde{!O!Q!S!UR!q!dRhUR!XhXVOX`pRkVR!XkXWOX`pRnWR!XnXXOX`pQrXR!XpXYOX`pQ`ORx`Q{aQ!ObQ!QcQ!SdQ!UeZ!e{!O!Q!S!UQ!v!oR!z!vQ!y!pR!|!yQgUR!VgQjVR!YjQmWR![mQpXR!^pQtZR!`tS_O`ToXp\",\n  nodeNames: \"⚠ StartCloseTag StartCloseTag StartCloseTag EndTag SelfClosingEndTag StartTag StartTag StartTag StartTag StartTag StartCloseTag StartCloseTag StartCloseTag IncompleteCloseTag Document Text EntityReference CharacterReference InvalidEntity Element OpenTag TagName Attribute AttributeName Is AttributeValue UnquotedAttributeValue ScriptText CloseTag OpenTag StyleText CloseTag OpenTag TextareaText CloseTag OpenTag CloseTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag CloseTag DoctypeDecl\",\n  maxTerm: 67,\n  context: elementContext,\n  nodeProps: [\n    [\"closedBy\", -10,1,2,3,7,8,9,10,11,12,13,\"EndTag\",6,\"EndTag SelfClosingEndTag\",-4,21,30,33,36,\"CloseTag\"],\n    [\"openedBy\", 4,\"StartTag StartCloseTag\",5,\"StartTag\",-4,29,32,35,37,\"OpenTag\"],\n    [\"group\", -9,14,17,18,19,20,39,40,41,42,\"Entity\",16,\"Entity TextContent\",-3,28,31,34,\"TextContent Entity\"],\n    [\"isolate\", -11,21,29,30,32,33,35,36,37,38,41,42,\"ltr\",-3,26,27,39,\"\"]\n  ],\n  propSources: [htmlHighlighting],\n  skippedNodes: [0],\n  repeatNodeCount: 9,\n  tokenData: \"!<p!aR!YOX$qXY,QYZ,QZ[$q[]&X]^,Q^p$qpq,Qqr-_rs3_sv-_vw3}wxHYx}-_}!OH{!O!P-_!P!Q$q!Q![-_![!]Mz!]!^-_!^!_!$S!_!`!;x!`!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4U-_4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!Z$|c`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr$qrs&}sv$qvw+Pwx(tx!^$q!^!_*V!_!a&X!a#S$q#S#T&X#T;'S$q;'S;=`+z<%lO$q!R&bX`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&Xq'UV`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}P'pT`POv'kw!^'k!_;'S'k;'S;=`(P<%lO'kP(SP;=`<%l'kp([S!cpOv(Vx;'S(V;'S;=`(h<%lO(Vp(kP;=`<%l(Vq(qP;=`<%l&}a({W`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t`)jT!a`Or)esv)ew;'S)e;'S;=`)y<%lO)e`)|P;=`<%l)ea*SP;=`<%l(t!Q*^V!a`!cpOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!Q*vP;=`<%l*V!R*|P;=`<%l&XW+UYkWOX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+PW+wP;=`<%l+P!Z+}P;=`<%l$q!a,]``P!a`!cp!^^OX&XXY,QYZ,QZ]&X]^,Q^p&Xpq,Qqr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!_-ljhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q[/ebhSkWOX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+PS0rXhSqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0mS1bP;=`<%l0m[1hP;=`<%l/^!V1vchS`P!a`!cpOq&Xqr1krs&}sv1kvw0mwx(tx!P1k!P!Q&X!Q!^1k!^!_*V!_!a&X!a#s1k#s$f&X$f;'S1k;'S;=`3R<%l?Ah1k?Ah?BY&X?BY?Mn1k?MnO&X!V3UP;=`<%l1k!_3[P;=`<%l-_!Z3hV!`h`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}!_4WihSkWc!ROX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst>]tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^/^!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!Z5zbkWOX5uXZ7SZ[5u[^7S^p5uqr5urs7Sst+Ptw5uwx7Sx!]5u!]!^7w!^!a7S!a#S5u#S#T7S#T;'S5u;'S;=`8n<%lO5u!R7VVOp7Sqs7St!]7S!]!^7l!^;'S7S;'S;=`7q<%lO7S!R7qOa!R!R7tP;=`<%l7S!Z8OYkWa!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!Z8qP;=`<%l5u!_8{ihSkWOX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst/^tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^:j!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!_:sbhSkWa!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!V<QchSOp7Sqr;{rs7Sst0mtw;{wx7Sx!P;{!P!Q7S!Q!];{!]!^=]!^!a7S!a#s;{#s$f7S$f;'S;{;'S;=`>P<%l?Ah;{?Ah?BY7S?BY?Mn;{?MnO7S!V=dXhSa!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!V>SP;=`<%l;{!_>YP;=`<%l8t!_>dhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^/^!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!Z@TakWOX@OXZAYZ[@O[^AY^p@Oqr@OrsAYsw@OwxAYx!]@O!]!^Az!^!aAY!a#S@O#S#TAY#T;'S@O;'S;=`Bq<%lO@O!RA]UOpAYq!]AY!]!^Ao!^;'SAY;'S;=`At<%lOAY!RAtOb!R!RAwP;=`<%lAY!ZBRYkWb!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!ZBtP;=`<%l@O!_COhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^Dj!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!_DsbhSkWb!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!VFQbhSOpAYqrE{rsAYswE{wxAYx!PE{!P!QAY!Q!]E{!]!^GY!^!aAY!a#sE{#s$fAY$f;'SE{;'S;=`G|<%l?AhE{?Ah?BYAY?BY?MnE{?MnOAY!VGaXhSb!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!VHPP;=`<%lE{!_HVP;=`<%lBw!ZHcW!bx`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t!aIYlhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OKQ!O!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!aK_khS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!`&X!`!aMS!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!TM_X`P!a`!cp!eQOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!aNZ!ZhSfQ`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OMz!O!PMz!P!Q$q!Q![Mz![!]Mz!]!^-_!^!_*V!_!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f$}-_$}%OMz%O%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4UMz4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Je-_$Je$JgMz$Jg$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!a!$PP;=`<%lMz!R!$ZY!a`!cpOq*Vqr!$yrs(Vsv*Vwx)ex!a*V!a!b!4t!b;'S*V;'S;=`*s<%lO*V!R!%Q]!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!%y!O!f*V!f!g!']!g#W*V#W#X!0`#X;'S*V;'S;=`*s<%lO*V!R!&QX!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!&m!O;'S*V;'S;=`*s<%lO*V!R!&vV!a`!cp!dPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!'dX!a`!cpOr*Vrs(Vsv*Vwx)ex!q*V!q!r!(P!r;'S*V;'S;=`*s<%lO*V!R!(WX!a`!cpOr*Vrs(Vsv*Vwx)ex!e*V!e!f!(s!f;'S*V;'S;=`*s<%lO*V!R!(zX!a`!cpOr*Vrs(Vsv*Vwx)ex!v*V!v!w!)g!w;'S*V;'S;=`*s<%lO*V!R!)nX!a`!cpOr*Vrs(Vsv*Vwx)ex!{*V!{!|!*Z!|;'S*V;'S;=`*s<%lO*V!R!*bX!a`!cpOr*Vrs(Vsv*Vwx)ex!r*V!r!s!*}!s;'S*V;'S;=`*s<%lO*V!R!+UX!a`!cpOr*Vrs(Vsv*Vwx)ex!g*V!g!h!+q!h;'S*V;'S;=`*s<%lO*V!R!+xY!a`!cpOr!+qrs!,hsv!+qvw!-Swx!.[x!`!+q!`!a!/j!a;'S!+q;'S;=`!0Y<%lO!+qq!,mV!cpOv!,hvx!-Sx!`!,h!`!a!-q!a;'S!,h;'S;=`!.U<%lO!,hP!-VTO!`!-S!`!a!-f!a;'S!-S;'S;=`!-k<%lO!-SP!-kO{PP!-nP;=`<%l!-Sq!-xS!cp{POv(Vx;'S(V;'S;=`(h<%lO(Vq!.XP;=`<%l!,ha!.aX!a`Or!.[rs!-Ssv!.[vw!-Sw!`!.[!`!a!.|!a;'S!.[;'S;=`!/d<%lO!.[a!/TT!a`{POr)esv)ew;'S)e;'S;=`)y<%lO)ea!/gP;=`<%l!.[!R!/sV!a`!cp{POr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!0]P;=`<%l!+q!R!0gX!a`!cpOr*Vrs(Vsv*Vwx)ex#c*V#c#d!1S#d;'S*V;'S;=`*s<%lO*V!R!1ZX!a`!cpOr*Vrs(Vsv*Vwx)ex#V*V#V#W!1v#W;'S*V;'S;=`*s<%lO*V!R!1}X!a`!cpOr*Vrs(Vsv*Vwx)ex#h*V#h#i!2j#i;'S*V;'S;=`*s<%lO*V!R!2qX!a`!cpOr*Vrs(Vsv*Vwx)ex#m*V#m#n!3^#n;'S*V;'S;=`*s<%lO*V!R!3eX!a`!cpOr*Vrs(Vsv*Vwx)ex#d*V#d#e!4Q#e;'S*V;'S;=`*s<%lO*V!R!4XX!a`!cpOr*Vrs(Vsv*Vwx)ex#X*V#X#Y!+q#Y;'S*V;'S;=`*s<%lO*V!R!4{Y!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!a!4t!a!b!:]!b;'S!4t;'S;=`!;r<%lO!4tq!5pV!cpOv!5kvx!6Vx!a!5k!a!b!7W!b;'S!5k;'S;=`!8V<%lO!5kP!6YTO!a!6V!a!b!6i!b;'S!6V;'S;=`!7Q<%lO!6VP!6lTO!`!6V!`!a!6{!a;'S!6V;'S;=`!7Q<%lO!6VP!7QOxPP!7TP;=`<%l!6Vq!7]V!cpOv!5kvx!6Vx!`!5k!`!a!7r!a;'S!5k;'S;=`!8V<%lO!5kq!7yS!cpxPOv(Vx;'S(V;'S;=`(h<%lO(Vq!8YP;=`<%l!5ka!8bX!a`Or!8]rs!6Vsv!8]vw!6Vw!a!8]!a!b!8}!b;'S!8];'S;=`!:V<%lO!8]a!9SX!a`Or!8]rs!6Vsv!8]vw!6Vw!`!8]!`!a!9o!a;'S!8];'S;=`!:V<%lO!8]a!9vT!a`xPOr)esv)ew;'S)e;'S;=`)y<%lO)ea!:YP;=`<%l!8]!R!:dY!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!`!4t!`!a!;S!a;'S!4t;'S;=`!;r<%lO!4t!R!;]V!a`!cpxPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!;uP;=`<%l!4t!V!<TXiS`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X\",\n  tokenizers: [scriptTokens, styleTokens, textareaTokens, endTag, tagStart, commentContent, 0, 1, 2, 3, 4, 5],\n  topRules: {\"Document\":[0,15]},\n  dialects: {noMatch: 0, selfClosing: 509},\n  tokenPrec: 511\n});\n\nfunction getAttrs(openTag, input) {\n  let attrs = Object.create(null);\n  for (let att of openTag.getChildren(Attribute)) {\n    let name = att.getChild(AttributeName), value = att.getChild(AttributeValue) || att.getChild(UnquotedAttributeValue);\n    if (name) attrs[input.read(name.from, name.to)] =\n      !value ? \"\" : value.type.id == AttributeValue ? input.read(value.from + 1, value.to - 1) : input.read(value.from, value.to);\n  }\n  return attrs\n}\n\nfunction findTagName(openTag, input) {\n  let tagNameNode = openTag.getChild(TagName);\n  return tagNameNode ? input.read(tagNameNode.from, tagNameNode.to) : \" \"\n}\n\nfunction maybeNest(node, input, tags) {\n  let attrs;\n  for (let tag of tags) {\n    if (!tag.attrs || tag.attrs(attrs || (attrs = getAttrs(node.node.parent.firstChild, input))))\n      return {parser: tag.parser}\n  }\n  return null\n}\n\n// tags?: {\n//   tag: string,\n//   attrs?: ({[attr: string]: string}) => boolean,\n//   parser: Parser\n// }[]\n// attributes?: {\n//   name: string,\n//   tagName?: string,\n//   parser: Parser\n// }[]\n \nfunction configureNesting(tags = [], attributes = []) {\n  let script = [], style = [], textarea = [], other = [];\n  for (let tag of tags) {\n    let array = tag.tag == \"script\" ? script : tag.tag == \"style\" ? style : tag.tag == \"textarea\" ? textarea : other;\n    array.push(tag);\n  }\n  let attrs = attributes.length ? Object.create(null) : null;\n  for (let attr of attributes) (attrs[attr.name] || (attrs[attr.name] = [])).push(attr);\n\n  return parseMixed((node, input) => {\n    let id = node.type.id;\n    if (id == ScriptText) return maybeNest(node, input, script)\n    if (id == StyleText) return maybeNest(node, input, style)\n    if (id == TextareaText) return maybeNest(node, input, textarea)\n\n    if (id == Element && other.length) {\n      let n = node.node, open = n.firstChild, tagName = open && findTagName(open, input), attrs;\n      if (tagName) for (let tag of other) {\n        if (tag.tag == tagName && (!tag.attrs || tag.attrs(attrs || (attrs = getAttrs(open, input))))) {\n          let close = n.lastChild;\n          let to = close.type.id == CloseTag ? close.from : n.to;\n          if (to > open.to)\n            return {parser: tag.parser, overlay: [{from: open.to, to}]}\n        }\n      }\n    }\n\n    if (attrs && id == Attribute) {\n      let n = node.node, nameNode;\n      if (nameNode = n.firstChild) {\n        let matches = attrs[input.read(nameNode.from, nameNode.to)];\n        if (matches) for (let attr of matches) {\n          if (attr.tagName && attr.tagName != findTagName(n.parent, input)) continue\n          let value = n.lastChild;\n          if (value.type.id == AttributeValue) {\n            let from = value.from + 1;\n            let last = value.lastChild, to = value.to - (last && last.isError ? 0 : 1);\n            if (to > from) return {parser: attr.parser, overlay: [{from, to}]}\n          } else if (value.type.id == UnquotedAttributeValue) {\n            return {parser: attr.parser, overlay: [{from: value.from, to: value.to}]}\n          }\n        }\n      }\n    }\n    return null\n  })\n}\n\nexport { configureNesting, parser };\n","import { ExternalTokenizer, LRParser, LocalTokenGroup } from '@lezer/lr';\nimport { styleTags, tags } from '@lezer/highlight';\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst descendantOp = 107,\n  Unit = 1,\n  callee = 108,\n  identifier = 109,\n  VariableName = 2,\n  queryIdentifier = 110;\n\n/* Hand-written tokenizers for CSS tokens that can't be\n   expressed by Lezer's built-in tokenizer. */\n\nconst space = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197,\n               8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288];\nconst colon = 58, parenL = 40, underscore = 95, bracketL = 91, dash = 45, period = 46,\n      hash = 35, percent = 37, ampersand = 38, backslash = 92, newline = 10, asterisk = 42;\n\nfunction isAlpha(ch) { return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch >= 161 }\n\nfunction isDigit(ch) { return ch >= 48 && ch <= 57 }\n\nconst identifiers = new ExternalTokenizer((input, stack) => {\n  for (let inside = false, dashes = 0, i = 0;; i++) {\n    let {next} = input;\n    if (isAlpha(next) || next == dash || next == underscore || (inside && isDigit(next))) {\n      if (!inside && (next != dash || i > 0)) inside = true;\n      if (dashes === i && next == dash) dashes++;\n      input.advance();\n    } else if (next == backslash && input.peek(1) != newline) {\n      input.advance();\n      if (input.next > -1) input.advance();\n      inside = true;\n    } else {\n      if (inside) input.acceptToken(\n        dashes == 2 && stack.canShift(VariableName) ? VariableName\n          : stack.canShift(queryIdentifier) ? queryIdentifier\n          : next == parenL ? callee\n          : identifier);\n      break\n    }\n  }\n});\n\nconst descendant = new ExternalTokenizer(input => {\n  if (space.includes(input.peek(-1))) {\n    let {next} = input;\n    if (isAlpha(next) || next == underscore || next == hash || next == period ||\n        next == asterisk || next == bracketL || next == colon && isAlpha(input.peek(1)) ||\n        next == dash || next == ampersand)\n      input.acceptToken(descendantOp);\n  }\n});\n\nconst unitToken = new ExternalTokenizer(input => {\n  if (!space.includes(input.peek(-1))) {\n    let {next} = input;\n    if (next == percent) { input.advance(); input.acceptToken(Unit); }\n    if (isAlpha(next)) {\n      do { input.advance(); } while (isAlpha(input.next) || isDigit(input.next))\n      input.acceptToken(Unit);\n    }\n  }\n});\n\nconst cssHighlighting = styleTags({\n  \"AtKeyword import charset namespace keyframes media supports\": tags.definitionKeyword,\n  \"from to selector\": tags.keyword,\n  NamespaceName: tags.namespace,\n  KeyframeName: tags.labelName,\n  KeyframeRangeName: tags.operatorKeyword,\n  TagName: tags.tagName,\n  ClassName: tags.className,\n  PseudoClassName: tags.constant(tags.className),\n  IdName: tags.labelName,\n  \"FeatureName PropertyName\": tags.propertyName,\n  AttributeName: tags.attributeName,\n  NumberLiteral: tags.number,\n  KeywordQuery: tags.keyword,\n  UnaryQueryOp: tags.operatorKeyword,\n  \"CallTag ValueName\": tags.atom,\n  VariableName: tags.variableName,\n  Callee: tags.operatorKeyword,\n  Unit: tags.unit,\n  \"UniversalSelector NestingSelector\": tags.definitionOperator,\n  \"MatchOp CompareOp\": tags.compareOperator,\n  \"ChildOp SiblingOp, LogicOp\": tags.logicOperator,\n  BinOp: tags.arithmeticOperator,\n  Important: tags.modifier,\n  Comment: tags.blockComment,\n  ColorLiteral: tags.color,\n  \"ParenthesizedContent StringLiteral\": tags.string,\n  \":\": tags.punctuation,\n  \"PseudoOp #\": tags.derefOperator,\n  \"; ,\": tags.separator,\n  \"( )\": tags.paren,\n  \"[ ]\": tags.squareBracket,\n  \"{ }\": tags.brace\n});\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst spec_callee = {__proto__:null,lang:34, \"nth-child\":34, \"nth-last-child\":34, \"nth-of-type\":34, \"nth-last-of-type\":34, dir:34, \"host-context\":34, url:62, \"url-prefix\":62, domain:62, regexp:62};\nconst spec_AtKeyword = {__proto__:null,\"@import\":120, \"@media\":154, \"@charset\":158, \"@namespace\":162, \"@keyframes\":168, \"@supports\":180};\nconst spec_queryIdentifier = {__proto__:null,layer:124, not:144, only:144, selector:150};\nconst parser = LRParser.deserialize({\n  version: 14,\n  states: \">`QYQ[OOO#kQ[OOP#rOWOOOOQP'#Cd'#CdOOQP'#Cc'#CcO#wQ[O'#CfO$hQXO'#CaO$rQ[O'#CiO$}Q[O'#DUO%SQ[O'#DXO%XQ[O'#D[O%XQ[O'#D_OOQP'#Ev'#EvO%yQdO'#DhO&hQ[O'#DzO%yQdO'#D|O&yQ[O'#EOO'UQ[O'#ERO'^Q[O'#EXO'lQ[O'#EZOOQS'#Eu'#EuOOQS'#E^'#E^QYQ[OOO'sQXO'#CdO(hQWO'#DdO(mQWO'#E{O(xQ[O'#E{QOQWOOP)SO#tO'#C_POOO)C@e)C@eOOQP'#Ch'#ChOOQP,59Q,59QO#wQ[O,59QO)_Q[O,59TO$}Q[O,59pO%SQ[O,59sO%XQ[O,59vO%XQ[O,59xO%XQ[O,59yO%XQ[O'#EcO)jQWO,58{O)rQ[O'#DcOOQS,58{,58{OOQP'#Cl'#ClOOQO'#DS'#DSOOQP,59T,59TO)yQWO,59TO*OQWO,59TOOQP'#DW'#DWOOQP,59p,59pOOQO'#DY'#DYO*TQ`O,59sO*nQXO,59vO+UQXO,59yOOQS'#Cq'#CqO%yQdO'#CrO+lQvO'#CtO-hQtO,5:SOOQO'#Cy'#CyO*OQWO'#CxO-rQWO'#CzO-wQ[O'#DPOOQS'#Ex'#ExOOQO'#Dn'#DnO.eQdO'#DwO.uQWO'#E|O'^Q[O'#DuO/TQWO'#DxOOQO'#E}'#E}O)mQWO,5:fO/YQpO,5:hOOQS'#EQ'#EQO/bQWO,5:jO/gQ[O,5:jOOQO'#ET'#ETO/oQWO,5:mO/tQWO,5:sO/|QWO,5:uOOQS-E8[-E8[O0UQdO,5:OO0fQ[O'#EeO0sQWO,5;gO0sQWO,5;gPOOO'#E]'#E]P1OO#tO,58yPOOO,58y,58yOOQP1G.l1G.lOOQP1G.o1G.oO)yQWO1G.oO*OQWO1G.oOOQP1G/[1G/[O1ZQ`O1G/_O1cQXO1G/bO1yQXO1G/dO2aQXO1G/eO2wQXO,5:}OOQO-E8a-E8aOOQS1G.g1G.gO3RQWO,59}O3WQ[O'#DTO3_QdO'#CpOOQP1G/_1G/_O%yQdO1G/_O3fQpO,59^OOQS,59`,59`O%yQdO,59bO3nQ[O'#DkO4PQWO1G/nO-VQ[O1G/nOOQS,59d,59dO4UQ!bO,59fOOQS'#DQ'#DQOOQS'#E`'#E`O4aQ[O,59kOOQS,59k,59kO4iQpO'#DnO4wQpO,5:ZO5PQWO,5:cOOQO'#FO'#FOO4zQpO,5:_O'^Q[O,5:]O5XQ[O'#EgO5pQWO,5;hO5{QWO,5:aO%XQ[O,5:dOOQS1G0Q1G0QOOQS1G0S1G0SOOQS1G0U1G0UO6^QWO1G0UO6cQdO'#EUOOQS1G0X1G0XOOQS1G0_1G0_OOQS1G0a1G0aO6nQtO1G/jOOQO1G/j1G/jOOQO,5;P,5;PO7UQ[O,5;POOQO-E8c-E8cO7cQWO1G1RPOOO-E8Z-E8ZPOOO1G.e1G.eOOQP7+$Z7+$ZOOQP7+$y7+$yO%yQdO7+$yOOQS1G/i1G/iO7nQXO'#EzO7xQWO,59oO7}QtO'#E_O8uQdO'#EwO9PQWO,59[O9UQpO7+$yOOQS1G.x1G.xOOQS1G.|1G.|O9^Q[O,5:VOOQS7+%Y7+%YO9cQWO7+%YOOQS1G/Q1G/QO9hQWO1G/QOOQS-E8^-E8^OOQS1G/V1G/VO%yQdO1G/uO9mQdO1G/yOOQO1G/}1G/}OOQO1G/w1G/wO9tQWO,5;ROOQO-E8e-E8eO:SQXO1G0OOOQS7+%p7+%pO:ZQYO'#CtOOQO'#EW'#EWO:iQ`O'#EVOOQO'#EV'#EVO:tQWO'#EhO:|QdO,5:pOOQS,5:p,5:pO;XQtO'#EdO%yQdO'#EdO<YQdO7+%UOOQO7+%U7+%UOOQO1G0k1G0kO<mQpO<<HeO<uQ[O'#EbO=PQWO,5;fOOQP1G/Z1G/ZOOQS-E8]-E8]O=XQdO'#EaO=cQWO,5;cOOQT1G.v1G.vOOQP<<He<<HeOOQO'#Dm'#DmO=kQWO1G/qOOQS<<Ht<<HtOOQS7+$l7+$lO=sQdO7+%aOOQO'#Dp'#DpO=zQpO7+%eOOQO7+%j7+%jOOQO,5:q,5:qO6fQdO'#EiO:tQWO,5;SOOQS,5;S,5;SOOQS-E8f-E8fOOQS1G0[1G0[O>SQtO,5;OOOQS-E8b-E8bOOQO<<Hp<<HpOOQPAN>PAN>PO?TQXO,5:|OOQO-E8`-E8`O?_QdO,5:{OOQO-E8_-E8_O9^Q[O'#EfO?iQWO7+%]OOQS7+%]7+%]OOQO<<H{<<H{OOQO<<IP<<IPO?qQdO<<IPOOQO,5;T,5;TOOQO-E8g-E8gOOQS1G0n1G0nOOQO,5;Q,5;QOOQO-E8d-E8dOOQS<<Hw<<HwO@YQWOAN>kOOQOG24VG24V\",\n  stateData: \"@g~O#dOS#eQQ~OU[OX[OZTO^VO_VOrXOyWO!PYO!SZO!]cO!^]O!o^O!q_O!s`O!vaO!|bO#aRO~OQhOU[OX[OZTO^VO_VOrXOyWO!PYO!SZO!]cO!^]O!o^O!q_O!s`O!vaO!|bO#agO~O#^#oP~P!aO#elO~O#anO~OZpO^qO_qOrsOyrO!PtO!SvO#_uO~OuwO!UyO~P#|Oa!PO#`|O#a{O~O#a!QO~O#a!SO~OU[OX[OZTO^VO_VOrXOyWO!PYO!SZO#aRO~OQ!`Oc!XOg!`Oi!`Oo!^Or!_O#`![O#a!WO#m!YO~Oc!bO!j!dO!m!eO#b!aO!U#pP~Oi!jOo!^O#a!iO~Oi!lO#a!lO~Oc!bO!j!dO!m!eO#b!aO~O!Z#pP~P&hOZWX^WX^!XX_WXrWXuWXyWX!PWX!SWX!UWX#_WX~O^!qO~O!Z!rO#^#oX!T#oX~O#^#oX!T#oX~P!aO#f!uO#g!uO#h!wO~Oa!{O#`|O#a{O~OuwO!UyO~O!T#oP~P!aOc#VO~Oc#WO~Oq#XO}#YO~OZpO^qO_qOrsOyrO~Ou!Oa!P!Oa!S!Oa!U!Oa#_!Oab!Oa~P*]Ou!Ra!P!Ra!S!Ra!U!Ra#_!Rab!Ra~P*]OP#[OchXkhX!ZhX!`hX!jhX!mhX#bhXbhX!hhXQhXghXihXohXrhXuhX!YhX#^hX#`hX#ahX#mhXqhX!ThX~Oc!bO!j!dO!m!eO#b!aO!Z#pP~Ok#]O!`#^O~P-VOc#bO~Oq#fO#a#cO~OQ#jOg#jOi#jOo!^O#`![O#m!YO~Oc!bO!j!dO!m!eO#b#gO~P.POu#mO!f#lO!U#pX!Z#pX~Oc#pO~Ok#]O!Z#rO~O!Z#sO~Oi#tOo!^O~O!U#uO~O!UyO!f#lO~O!UyO!Z#xO~O!Y#zO!Z!Wa#^!Wa!T!Wa~P%yO!Z#XX#^#XX!T#XX~P!aO!Z!rO#^#oa!T#oa~O#f!uO#g!uO#h$QO~Oq$SO}$TO~Ou!Oi!P!Oi!S!Oi!U!Oi#_!Oib!Oi~P*]Ou!Qi!P!Qi!S!Qi!U!Qi#_!Qib!Qi~P*]Ou!Ri!P!Ri!S!Ri!U!Ri#_!Rib!Ri~P*]Ou#Va!U#Va~P#|O!T$UO~Ob#nP~P%XOb#kP~P%yOb$]Ok#]O~Oc$_O!Z!_X!j!_X!m!_X#b!_X~O!Z$`O~Ob$bOi$cOp$cO~Oq$eO#a#cO~O^!dXb!bX!f!bX!h!dX~O^$fO!h$gO~Ob$hO!f#lO~Oc!bO!j!dO!m!eO#b!aOu#ZX!U#ZX!Z#ZX~Ou#mO!U#pa!Z#pa~O!f#lOu!ia!U!ia!Z!iab!ia~O!Z$mO~O!T$tO#a$oO#m$nO~Ok#]Ou$vO!Y$xO!Z!Wi#^!Wi!T!Wi~P%yO!Z#Xa#^#Xa!T#Xa~P!aO!Z!rO#^#oi!T#oi~Ou${Ob#nX~P#|Ob$}O~Ok#]OQ#RXb#RXc#RXg#RXi#RXo#RXr#RXu#RX#`#RX#a#RX#m#RX~Ou%POb#kX~P%yOb%RO~Ok#]Oq%SO~O#a%TO~O!Z%VO~Ob%WO~O#b%YO~P.PO!f#lOu#Za!U#Za!Z#Za~Ob%[O~P#|OP#[OuhX!UhXbhX~O#m$nOu!yX!U!yX~Ou%^O!UyO~O!T%bO#a$oO#m$nO~Ok#]OQ#WXc#WXg#WXi#WXo#WXr#WXu#WX!Y#WX!Z#WX#^#WX#`#WX#a#WX#m#WX!T#WX~Ou$vO!Y%eO!Z!Wq#^!Wq!T!Wq~P%yOk#]Oq%fO~Ob#UXu#UX~P%XOu${Ob#na~Ob#TXu#TX~P%yOu%POb#ka~OZ%kOb%mO~Ob%nO~P%yOb%oO!h%pO~Ok#]OQ#Wac#Wag#Wai#Wao#War#Wau#Wa!Y#Wa!Z#Wa#^#Wa#`#Wa#a#Wa#m#Wa!T#Wa~Ob#Uau#Ua~P#|Ob#Tau#Ta~P%yOZ%kOb%vO~OQ#jOg#jOi#jOo!^O#`![O#b%YO#m$nO~Ob%xO~O#dp#e#mk!S#m~\",\n  goto: \"/l#sPPP#tP#wP$Q$dP$QP$v$QPP$|PPP%S%]%]P%oP%]P&`&w'^PPPP%]'{P(P(V$QP(]$Q(cP$QP$Q$QPPP(i)O)]PP#wPP)dP)g)m)m)x)mP)mP)mP)m)mP#wP#wP#wP*R#wP*U*X*[*c#wP#wP*h*n*}+]+c+i+o+u+{,V,],c,iPPPPPPPPPPP,o,x-n-qP.g.j.p.|/cRmQ_dOPfjy!r#|q[OPYZfjtuvwy!r#V#p#|${qSOPYZfjtuvwy!r#V#p#|${QoTR!xpQ}VR!yqQ!y!PQ#a!]R$R!{q!`]_!X!q#W#Y#]#y$T$Y$f$v$w%P%X%ip!`]_!X!q#W#Y#]#y$T$Y$f$v$w%P%X%iU#j!b$g%pU$q#u$s%^R%]$pp!`]_!X!q#W#Y#]#y$T$Y$f$v$w%P%X%iV#j!b$g%pw!]]_!X!b!q#W#Y#]#y$T$Y$f$g$v$w%P%X%i%pp!`]_!X!q#W#Y#]#y$T$Y$f$v$w%P%X%iQ!j`U#j!b$g%pR#t!kT#d!_#eQ!OVR!zqQ!y!OR$R!zQ!RWR!|rQ!TXR!}sQzUQ#TxQ#q!gQ#w!nQ#x!oQ%`$rR%s%_SiPyQ!tjQ#{!rR$y#|ZhPjy!r#|R#`!ZQ%U$_R%t%kc!f^bc!Z!b!d#`#l#mQ#h!bQ%Z$gR%w%pR!k`R!maR#v!mS$r#u$sR%q%^V$p#u$s%^Q!vlR$P!vQfOSjPyU!pfj#|R#|!rQ$Y#WU%O$Y%X%iQ%X$fR%i%PQ#e!_R$d#eQ%Q$YR%j%QQ$|$VR%h$|QxUR#SxQ$w#yR%d$wQ!siS#}!s$OR$O!tQ%l%UR%u%lQ#n!cR$k#nQ$s#uR%a$sQ%_$rR%r%__eOPfjy!r#|^UOPfjy!r#|Q!UYQ!VZQ#OtQ#PuQ#QvQ#RwQ$V#VQ$l#pR%g${R$Z#WQ!Z]Q!h_Q#Z!XQ#y!q[$X#W$Y$f%P%X%iQ$[#YQ$^#]S$u#y$wQ$z$TR%c$vR$W#VQkPR#UyQ!g^Q!ocQ#_!ZR$a#`W!c^c!Z#`Q!nbQ#i!bQ#o!dQ$i#lR$j#mQ#k!bQ%Z$gR%w%p\",\n  nodeNames: \"⚠ Unit VariableName Comment StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector ClassSelector . ClassName PseudoClassSelector : :: PseudoClassName PseudoClassName ) ( ArgList ValueName ParenthesizedValue ColorLiteral NumberLiteral StringLiteral BinaryExpression BinOp CallExpression Callee CallLiteral CallTag ParenthesizedContent ] [ LineNames LineName , PseudoClassName ArgList IdSelector # IdName AttributeSelector AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp } { Block Declaration PropertyName Important ; ImportStatement AtKeyword import Layer layer LayerName KeywordQuery FeatureQuery FeatureName BinaryQuery LogicOp ComparisonQuery CompareOp UnaryQuery UnaryQueryOp ParenthesizedQuery SelectorQuery selector MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList KeyframeSelector KeyframeRangeName SupportsStatement supports AtRule Styles\",\n  maxTerm: 126,\n  nodeProps: [\n    [\"isolate\", -2,3,25,\"\"],\n    [\"openedBy\", 18,\"(\",33,\"[\",51,\"{\"],\n    [\"closedBy\", 19,\")\",34,\"]\",52,\"}\"]\n  ],\n  propSources: [cssHighlighting],\n  skippedNodes: [0,3,93],\n  repeatNodeCount: 13,\n  tokenData: \"LU~R!^OX$}X^%u^p$}pq%uqr)Xrs.Rst/utu6duv$}vw7^wx7oxy9^yz9oz{9t{|:_|}?Q}!O?c!O!P@Q!P!Q@i!Q![Ab![!]B]!]!^CX!^!_Cj!_!`Df!`!aDy!a!b$}!b!cEz!c!}$}!}#OHX#O#P$}#P#QHj#Q#R6d#R#T$}#T#UH{#U#c$}#c#dJ^#d#o$}#o#pJs#p#q6d#q#rKU#r#sKg#s#y$}#y#z%u#z$f$}$f$g%u$g#BY$}#BY#BZ%u#BZ$IS$}$IS$I_%u$I_$I|$}$I|$JO%u$JO$JT$}$JT$JU%u$JU$KV$}$KV$KW%u$KW&FU$}&FU&FV%u&FV;'S$};'S;=`LO<%lO$}`%QSOy%^z;'S%^;'S;=`%o<%lO%^`%cSp`Oy%^z;'S%^;'S;=`%o<%lO%^`%rP;=`<%l%^~%zh#d~OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^~'mh#d~p`OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^l)[UOy%^z#]%^#]#^)n#^;'S%^;'S;=`%o<%lO%^l)sUp`Oy%^z#a%^#a#b*V#b;'S%^;'S;=`%o<%lO%^l*[Up`Oy%^z#d%^#d#e*n#e;'S%^;'S;=`%o<%lO%^l*sUp`Oy%^z#c%^#c#d+V#d;'S%^;'S;=`%o<%lO%^l+[Up`Oy%^z#f%^#f#g+n#g;'S%^;'S;=`%o<%lO%^l+sUp`Oy%^z#h%^#h#i,V#i;'S%^;'S;=`%o<%lO%^l,[Up`Oy%^z#T%^#T#U,n#U;'S%^;'S;=`%o<%lO%^l,sUp`Oy%^z#b%^#b#c-V#c;'S%^;'S;=`%o<%lO%^l-[Up`Oy%^z#h%^#h#i-n#i;'S%^;'S;=`%o<%lO%^l-uS!Y[p`Oy%^z;'S%^;'S;=`%o<%lO%^~.UWOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o<%lO.R~.sOi~~.vRO;'S.R;'S;=`/P;=`O.R~/SXOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o;=`<%l.R<%lO.R~/rP;=`<%l.Rn/zYyQOy%^z!Q%^!Q![0j![!c%^!c!i0j!i#T%^#T#Z0j#Z;'S%^;'S;=`%o<%lO%^l0oYp`Oy%^z!Q%^!Q![1_![!c%^!c!i1_!i#T%^#T#Z1_#Z;'S%^;'S;=`%o<%lO%^l1dYp`Oy%^z!Q%^!Q![2S![!c%^!c!i2S!i#T%^#T#Z2S#Z;'S%^;'S;=`%o<%lO%^l2ZYg[p`Oy%^z!Q%^!Q![2y![!c%^!c!i2y!i#T%^#T#Z2y#Z;'S%^;'S;=`%o<%lO%^l3QYg[p`Oy%^z!Q%^!Q![3p![!c%^!c!i3p!i#T%^#T#Z3p#Z;'S%^;'S;=`%o<%lO%^l3uYp`Oy%^z!Q%^!Q![4e![!c%^!c!i4e!i#T%^#T#Z4e#Z;'S%^;'S;=`%o<%lO%^l4lYg[p`Oy%^z!Q%^!Q![5[![!c%^!c!i5[!i#T%^#T#Z5[#Z;'S%^;'S;=`%o<%lO%^l5aYp`Oy%^z!Q%^!Q![6P![!c%^!c!i6P!i#T%^#T#Z6P#Z;'S%^;'S;=`%o<%lO%^l6WSg[p`Oy%^z;'S%^;'S;=`%o<%lO%^d6gUOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^d7QS}Sp`Oy%^z;'S%^;'S;=`%o<%lO%^b7cSXQOy%^z;'S%^;'S;=`%o<%lO%^~7rWOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W<%lO7o~8_RO;'S7o;'S;=`8h;=`O7o~8kXOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W;=`<%l7o<%lO7o~9ZP;=`<%l7on9cSc^Oy%^z;'S%^;'S;=`%o<%lO%^~9tOb~n9{UUQkWOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^n:fWkW!SQOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^l;TUp`Oy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^l;nYp`#m[Oy%^z!Q%^!Q![;g![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^l<cYp`Oy%^z{%^{|=R|}%^}!O=R!O!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=WUp`Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=qUp`#m[Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l>[[p`#m[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^n?VSu^Oy%^z;'S%^;'S;=`%o<%lO%^l?hWkWOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^n@VUZQOy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^~@nTkWOy%^z{@}{;'S%^;'S;=`%o<%lO%^~AUSp`#e~Oy%^z;'S%^;'S;=`%o<%lO%^lAg[#m[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^jBbU^YOy%^z![%^![!]Bt!];'S%^;'S;=`%o<%lO%^bB{S_Qp`Oy%^z;'S%^;'S;=`%o<%lO%^nC^S!Z^Oy%^z;'S%^;'S;=`%o<%lO%^hCoU!hWOy%^z!_%^!_!`DR!`;'S%^;'S;=`%o<%lO%^hDYS!hWp`Oy%^z;'S%^;'S;=`%o<%lO%^lDmS!hW}SOy%^z;'S%^;'S;=`%o<%lO%^jEQV!PQ!hWOy%^z!_%^!_!`DR!`!aEg!a;'S%^;'S;=`%o<%lO%^bEnS!PQp`Oy%^z;'S%^;'S;=`%o<%lO%^bE}YOy%^z}%^}!OFm!O!c%^!c!}G[!}#T%^#T#oG[#o;'S%^;'S;=`%o<%lO%^bFrWp`Oy%^z!c%^!c!}G[!}#T%^#T#oG[#o;'S%^;'S;=`%o<%lO%^bGc[!]Qp`Oy%^z}%^}!OG[!O!Q%^!Q![G[![!c%^!c!}G[!}#T%^#T#oG[#o;'S%^;'S;=`%o<%lO%^nH^Sr^Oy%^z;'S%^;'S;=`%o<%lO%^nHoSq^Oy%^z;'S%^;'S;=`%o<%lO%^jIOUOy%^z#b%^#b#cIb#c;'S%^;'S;=`%o<%lO%^jIgUp`Oy%^z#W%^#W#XIy#X;'S%^;'S;=`%o<%lO%^jJQS!fYp`Oy%^z;'S%^;'S;=`%o<%lO%^jJaUOy%^z#f%^#f#gIy#g;'S%^;'S;=`%o<%lO%^fJxS!UUOy%^z;'S%^;'S;=`%o<%lO%^nKZS!T^Oy%^z;'S%^;'S;=`%o<%lO%^fKlU!SQOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^`LRP;=`<%l$}\",\n  tokenizers: [descendant, unitToken, identifiers, 1, 2, 3, 4, new LocalTokenGroup(\"m~RRYZ[z{a~~g~aO#g~~dP!P!Qg~lO#h~~\", 28, 114)],\n  topRules: {\"StyleSheet\":[0,4],\"Styles\":[1,92]},\n  specialized: [{term: 108, get: (value) => spec_callee[value] || -1},{term: 59, get: (value) => spec_AtKeyword[value] || -1},{term: 110, get: (value) => spec_queryIdentifier[value] || -1}],\n  tokenPrec: 1441\n});\n\nexport { parser };\n","import { parser } from '@lezer/css';\nimport { syntaxTree, LRLanguage, indentNodeProp, continuedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\nimport { NodeWeakMap, IterMode } from '@lezer/common';\n\nlet _properties = null;\nfunction properties() {\n    if (!_properties && typeof document == \"object\" && document.body) {\n        let { style } = document.body, names = [], seen = new Set;\n        for (let prop in style)\n            if (prop != \"cssText\" && prop != \"cssFloat\") {\n                if (typeof style[prop] == \"string\") {\n                    if (/[A-Z]/.test(prop))\n                        prop = prop.replace(/[A-Z]/g, ch => \"-\" + ch.toLowerCase());\n                    if (!seen.has(prop)) {\n                        names.push(prop);\n                        seen.add(prop);\n                    }\n                }\n            }\n        _properties = names.sort().map(name => ({ type: \"property\", label: name, apply: name + \": \" }));\n    }\n    return _properties || [];\n}\nconst pseudoClasses = /*@__PURE__*/[\n    \"active\", \"after\", \"any-link\", \"autofill\", \"backdrop\", \"before\",\n    \"checked\", \"cue\", \"default\", \"defined\", \"disabled\", \"empty\",\n    \"enabled\", \"file-selector-button\", \"first\", \"first-child\",\n    \"first-letter\", \"first-line\", \"first-of-type\", \"focus\",\n    \"focus-visible\", \"focus-within\", \"fullscreen\", \"has\", \"host\",\n    \"host-context\", \"hover\", \"in-range\", \"indeterminate\", \"invalid\",\n    \"is\", \"lang\", \"last-child\", \"last-of-type\", \"left\", \"link\", \"marker\",\n    \"modal\", \"not\", \"nth-child\", \"nth-last-child\", \"nth-last-of-type\",\n    \"nth-of-type\", \"only-child\", \"only-of-type\", \"optional\", \"out-of-range\",\n    \"part\", \"placeholder\", \"placeholder-shown\", \"read-only\", \"read-write\",\n    \"required\", \"right\", \"root\", \"scope\", \"selection\", \"slotted\", \"target\",\n    \"target-text\", \"valid\", \"visited\", \"where\"\n].map(name => ({ type: \"class\", label: name }));\nconst values = /*@__PURE__*/[\n    \"above\", \"absolute\", \"activeborder\", \"additive\", \"activecaption\", \"after-white-space\",\n    \"ahead\", \"alias\", \"all\", \"all-scroll\", \"alphabetic\", \"alternate\", \"always\",\n    \"antialiased\", \"appworkspace\", \"asterisks\", \"attr\", \"auto\", \"auto-flow\", \"avoid\", \"avoid-column\",\n    \"avoid-page\", \"avoid-region\", \"axis-pan\", \"background\", \"backwards\", \"baseline\", \"below\",\n    \"bidi-override\", \"blink\", \"block\", \"block-axis\", \"bold\", \"bolder\", \"border\", \"border-box\",\n    \"both\", \"bottom\", \"break\", \"break-all\", \"break-word\", \"bullets\", \"button\", \"button-bevel\",\n    \"buttonface\", \"buttonhighlight\", \"buttonshadow\", \"buttontext\", \"calc\", \"capitalize\",\n    \"caps-lock-indicator\", \"caption\", \"captiontext\", \"caret\", \"cell\", \"center\", \"checkbox\", \"circle\",\n    \"cjk-decimal\", \"clear\", \"clip\", \"close-quote\", \"col-resize\", \"collapse\", \"color\", \"color-burn\",\n    \"color-dodge\", \"column\", \"column-reverse\", \"compact\", \"condensed\", \"contain\", \"content\",\n    \"contents\", \"content-box\", \"context-menu\", \"continuous\", \"copy\", \"counter\", \"counters\", \"cover\",\n    \"crop\", \"cross\", \"crosshair\", \"currentcolor\", \"cursive\", \"cyclic\", \"darken\", \"dashed\", \"decimal\",\n    \"decimal-leading-zero\", \"default\", \"default-button\", \"dense\", \"destination-atop\", \"destination-in\",\n    \"destination-out\", \"destination-over\", \"difference\", \"disc\", \"discard\", \"disclosure-closed\",\n    \"disclosure-open\", \"document\", \"dot-dash\", \"dot-dot-dash\", \"dotted\", \"double\", \"down\", \"e-resize\",\n    \"ease\", \"ease-in\", \"ease-in-out\", \"ease-out\", \"element\", \"ellipse\", \"ellipsis\", \"embed\", \"end\",\n    \"ethiopic-abegede-gez\", \"ethiopic-halehame-aa-er\", \"ethiopic-halehame-gez\", \"ew-resize\", \"exclusion\",\n    \"expanded\", \"extends\", \"extra-condensed\", \"extra-expanded\", \"fantasy\", \"fast\", \"fill\", \"fill-box\",\n    \"fixed\", \"flat\", \"flex\", \"flex-end\", \"flex-start\", \"footnotes\", \"forwards\", \"from\",\n    \"geometricPrecision\", \"graytext\", \"grid\", \"groove\", \"hand\", \"hard-light\", \"help\", \"hidden\", \"hide\",\n    \"higher\", \"highlight\", \"highlighttext\", \"horizontal\", \"hsl\", \"hsla\", \"hue\", \"icon\", \"ignore\",\n    \"inactiveborder\", \"inactivecaption\", \"inactivecaptiontext\", \"infinite\", \"infobackground\", \"infotext\",\n    \"inherit\", \"initial\", \"inline\", \"inline-axis\", \"inline-block\", \"inline-flex\", \"inline-grid\",\n    \"inline-table\", \"inset\", \"inside\", \"intrinsic\", \"invert\", \"italic\", \"justify\", \"keep-all\",\n    \"landscape\", \"large\", \"larger\", \"left\", \"level\", \"lighter\", \"lighten\", \"line-through\", \"linear\",\n    \"linear-gradient\", \"lines\", \"list-item\", \"listbox\", \"listitem\", \"local\", \"logical\", \"loud\", \"lower\",\n    \"lower-hexadecimal\", \"lower-latin\", \"lower-norwegian\", \"lowercase\", \"ltr\", \"luminosity\", \"manipulation\",\n    \"match\", \"matrix\", \"matrix3d\", \"medium\", \"menu\", \"menutext\", \"message-box\", \"middle\", \"min-intrinsic\",\n    \"mix\", \"monospace\", \"move\", \"multiple\", \"multiple_mask_images\", \"multiply\", \"n-resize\", \"narrower\",\n    \"ne-resize\", \"nesw-resize\", \"no-close-quote\", \"no-drop\", \"no-open-quote\", \"no-repeat\", \"none\",\n    \"normal\", \"not-allowed\", \"nowrap\", \"ns-resize\", \"numbers\", \"numeric\", \"nw-resize\", \"nwse-resize\",\n    \"oblique\", \"opacity\", \"open-quote\", \"optimizeLegibility\", \"optimizeSpeed\", \"outset\", \"outside\",\n    \"outside-shape\", \"overlay\", \"overline\", \"padding\", \"padding-box\", \"painted\", \"page\", \"paused\",\n    \"perspective\", \"pinch-zoom\", \"plus-darker\", \"plus-lighter\", \"pointer\", \"polygon\", \"portrait\",\n    \"pre\", \"pre-line\", \"pre-wrap\", \"preserve-3d\", \"progress\", \"push-button\", \"radial-gradient\", \"radio\",\n    \"read-only\", \"read-write\", \"read-write-plaintext-only\", \"rectangle\", \"region\", \"relative\", \"repeat\",\n    \"repeating-linear-gradient\", \"repeating-radial-gradient\", \"repeat-x\", \"repeat-y\", \"reset\", \"reverse\",\n    \"rgb\", \"rgba\", \"ridge\", \"right\", \"rotate\", \"rotate3d\", \"rotateX\", \"rotateY\", \"rotateZ\", \"round\",\n    \"row\", \"row-resize\", \"row-reverse\", \"rtl\", \"run-in\", \"running\", \"s-resize\", \"sans-serif\", \"saturation\",\n    \"scale\", \"scale3d\", \"scaleX\", \"scaleY\", \"scaleZ\", \"screen\", \"scroll\", \"scrollbar\", \"scroll-position\",\n    \"se-resize\", \"self-start\", \"self-end\", \"semi-condensed\", \"semi-expanded\", \"separate\", \"serif\", \"show\",\n    \"single\", \"skew\", \"skewX\", \"skewY\", \"skip-white-space\", \"slide\", \"slider-horizontal\",\n    \"slider-vertical\", \"sliderthumb-horizontal\", \"sliderthumb-vertical\", \"slow\", \"small\", \"small-caps\",\n    \"small-caption\", \"smaller\", \"soft-light\", \"solid\", \"source-atop\", \"source-in\", \"source-out\",\n    \"source-over\", \"space\", \"space-around\", \"space-between\", \"space-evenly\", \"spell-out\", \"square\", \"start\",\n    \"static\", \"status-bar\", \"stretch\", \"stroke\", \"stroke-box\", \"sub\", \"subpixel-antialiased\", \"svg_masks\",\n    \"super\", \"sw-resize\", \"symbolic\", \"symbols\", \"system-ui\", \"table\", \"table-caption\", \"table-cell\",\n    \"table-column\", \"table-column-group\", \"table-footer-group\", \"table-header-group\", \"table-row\",\n    \"table-row-group\", \"text\", \"text-bottom\", \"text-top\", \"textarea\", \"textfield\", \"thick\", \"thin\",\n    \"threeddarkshadow\", \"threedface\", \"threedhighlight\", \"threedlightshadow\", \"threedshadow\", \"to\", \"top\",\n    \"transform\", \"translate\", \"translate3d\", \"translateX\", \"translateY\", \"translateZ\", \"transparent\",\n    \"ultra-condensed\", \"ultra-expanded\", \"underline\", \"unidirectional-pan\", \"unset\", \"up\", \"upper-latin\",\n    \"uppercase\", \"url\", \"var\", \"vertical\", \"vertical-text\", \"view-box\", \"visible\", \"visibleFill\",\n    \"visiblePainted\", \"visibleStroke\", \"visual\", \"w-resize\", \"wait\", \"wave\", \"wider\", \"window\", \"windowframe\",\n    \"windowtext\", \"words\", \"wrap\", \"wrap-reverse\", \"x-large\", \"x-small\", \"xor\", \"xx-large\", \"xx-small\"\n].map(name => ({ type: \"keyword\", label: name })).concat(/*@__PURE__*/[\n    \"aliceblue\", \"antiquewhite\", \"aqua\", \"aquamarine\", \"azure\", \"beige\",\n    \"bisque\", \"black\", \"blanchedalmond\", \"blue\", \"blueviolet\", \"brown\",\n    \"burlywood\", \"cadetblue\", \"chartreuse\", \"chocolate\", \"coral\", \"cornflowerblue\",\n    \"cornsilk\", \"crimson\", \"cyan\", \"darkblue\", \"darkcyan\", \"darkgoldenrod\",\n    \"darkgray\", \"darkgreen\", \"darkkhaki\", \"darkmagenta\", \"darkolivegreen\",\n    \"darkorange\", \"darkorchid\", \"darkred\", \"darksalmon\", \"darkseagreen\",\n    \"darkslateblue\", \"darkslategray\", \"darkturquoise\", \"darkviolet\",\n    \"deeppink\", \"deepskyblue\", \"dimgray\", \"dodgerblue\", \"firebrick\",\n    \"floralwhite\", \"forestgreen\", \"fuchsia\", \"gainsboro\", \"ghostwhite\",\n    \"gold\", \"goldenrod\", \"gray\", \"grey\", \"green\", \"greenyellow\", \"honeydew\",\n    \"hotpink\", \"indianred\", \"indigo\", \"ivory\", \"khaki\", \"lavender\",\n    \"lavenderblush\", \"lawngreen\", \"lemonchiffon\", \"lightblue\", \"lightcoral\",\n    \"lightcyan\", \"lightgoldenrodyellow\", \"lightgray\", \"lightgreen\", \"lightpink\",\n    \"lightsalmon\", \"lightseagreen\", \"lightskyblue\", \"lightslategray\",\n    \"lightsteelblue\", \"lightyellow\", \"lime\", \"limegreen\", \"linen\", \"magenta\",\n    \"maroon\", \"mediumaquamarine\", \"mediumblue\", \"mediumorchid\", \"mediumpurple\",\n    \"mediumseagreen\", \"mediumslateblue\", \"mediumspringgreen\", \"mediumturquoise\",\n    \"mediumvioletred\", \"midnightblue\", \"mintcream\", \"mistyrose\", \"moccasin\",\n    \"navajowhite\", \"navy\", \"oldlace\", \"olive\", \"olivedrab\", \"orange\", \"orangered\",\n    \"orchid\", \"palegoldenrod\", \"palegreen\", \"paleturquoise\", \"palevioletred\",\n    \"papayawhip\", \"peachpuff\", \"peru\", \"pink\", \"plum\", \"powderblue\",\n    \"purple\", \"rebeccapurple\", \"red\", \"rosybrown\", \"royalblue\", \"saddlebrown\",\n    \"salmon\", \"sandybrown\", \"seagreen\", \"seashell\", \"sienna\", \"silver\", \"skyblue\",\n    \"slateblue\", \"slategray\", \"snow\", \"springgreen\", \"steelblue\", \"tan\",\n    \"teal\", \"thistle\", \"tomato\", \"turquoise\", \"violet\", \"wheat\", \"white\",\n    \"whitesmoke\", \"yellow\", \"yellowgreen\"\n].map(name => ({ type: \"constant\", label: name })));\nconst tags = /*@__PURE__*/[\n    \"a\", \"abbr\", \"address\", \"article\", \"aside\", \"b\", \"bdi\", \"bdo\", \"blockquote\", \"body\",\n    \"br\", \"button\", \"canvas\", \"caption\", \"cite\", \"code\", \"col\", \"colgroup\", \"dd\", \"del\",\n    \"details\", \"dfn\", \"dialog\", \"div\", \"dl\", \"dt\", \"em\", \"figcaption\", \"figure\", \"footer\",\n    \"form\", \"header\", \"hgroup\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"hr\", \"html\", \"i\", \"iframe\",\n    \"img\", \"input\", \"ins\", \"kbd\", \"label\", \"legend\", \"li\", \"main\", \"meter\", \"nav\", \"ol\", \"output\",\n    \"p\", \"pre\", \"ruby\", \"section\", \"select\", \"small\", \"source\", \"span\", \"strong\", \"sub\", \"summary\",\n    \"sup\", \"table\", \"tbody\", \"td\", \"template\", \"textarea\", \"tfoot\", \"th\", \"thead\", \"tr\", \"u\", \"ul\"\n].map(name => ({ type: \"type\", label: name }));\nconst atRules = /*@__PURE__*/[\n    \"@charset\", \"@color-profile\", \"@container\", \"@counter-style\", \"@font-face\", \"@font-feature-values\",\n    \"@font-palette-values\", \"@import\", \"@keyframes\", \"@layer\", \"@media\", \"@namespace\", \"@page\",\n    \"@position-try\", \"@property\", \"@scope\", \"@starting-style\", \"@supports\", \"@view-transition\"\n].map(label => ({ type: \"keyword\", label }));\nconst identifier = /^(\\w[\\w-]*|-\\w[\\w-]*|)$/, variable = /^-(-[\\w-]*)?$/;\nfunction isVarArg(node, doc) {\n    var _a;\n    if (node.name == \"(\" || node.type.isError)\n        node = node.parent || node;\n    if (node.name != \"ArgList\")\n        return false;\n    let callee = (_a = node.parent) === null || _a === void 0 ? void 0 : _a.firstChild;\n    if ((callee === null || callee === void 0 ? void 0 : callee.name) != \"Callee\")\n        return false;\n    return doc.sliceString(callee.from, callee.to) == \"var\";\n}\nconst VariablesByNode = /*@__PURE__*/new NodeWeakMap();\nconst declSelector = [\"Declaration\"];\nfunction astTop(node) {\n    for (let cur = node;;) {\n        if (cur.type.isTop)\n            return cur;\n        if (!(cur = cur.parent))\n            return node;\n    }\n}\nfunction variableNames(doc, node, isVariable) {\n    if (node.to - node.from > 4096) {\n        let known = VariablesByNode.get(node);\n        if (known)\n            return known;\n        let result = [], seen = new Set, cursor = node.cursor(IterMode.IncludeAnonymous);\n        if (cursor.firstChild())\n            do {\n                for (let option of variableNames(doc, cursor.node, isVariable))\n                    if (!seen.has(option.label)) {\n                        seen.add(option.label);\n                        result.push(option);\n                    }\n            } while (cursor.nextSibling());\n        VariablesByNode.set(node, result);\n        return result;\n    }\n    else {\n        let result = [], seen = new Set;\n        node.cursor().iterate(node => {\n            var _a;\n            if (isVariable(node) && node.matchContext(declSelector) && ((_a = node.node.nextSibling) === null || _a === void 0 ? void 0 : _a.name) == \":\") {\n                let name = doc.sliceString(node.from, node.to);\n                if (!seen.has(name)) {\n                    seen.add(name);\n                    result.push({ label: name, type: \"variable\" });\n                }\n            }\n        });\n        return result;\n    }\n}\n/**\nCreate a completion source for a CSS dialect, providing a\npredicate for determining what kind of syntax node can act as a\ncompletable variable. This is used by language modes like Sass and\nLess to reuse this package's completion logic.\n*/\nconst defineCSSCompletionSource = (isVariable) => context => {\n    let { state, pos } = context, node = syntaxTree(state).resolveInner(pos, -1);\n    let isDash = node.type.isError && node.from == node.to - 1 && state.doc.sliceString(node.from, node.to) == \"-\";\n    if (node.name == \"PropertyName\" ||\n        (isDash || node.name == \"TagName\") && /^(Block|Styles)$/.test(node.resolve(node.to).name))\n        return { from: node.from, options: properties(), validFor: identifier };\n    if (node.name == \"ValueName\")\n        return { from: node.from, options: values, validFor: identifier };\n    if (node.name == \"PseudoClassName\")\n        return { from: node.from, options: pseudoClasses, validFor: identifier };\n    if (isVariable(node) || (context.explicit || isDash) && isVarArg(node, state.doc))\n        return { from: isVariable(node) || isDash ? node.from : pos,\n            options: variableNames(state.doc, astTop(node), isVariable),\n            validFor: variable };\n    if (node.name == \"TagName\") {\n        for (let { parent } = node; parent; parent = parent.parent)\n            if (parent.name == \"Block\")\n                return { from: node.from, options: properties(), validFor: identifier };\n        return { from: node.from, options: tags, validFor: identifier };\n    }\n    if (node.name == \"AtKeyword\")\n        return { from: node.from, options: atRules, validFor: identifier };\n    if (!context.explicit)\n        return null;\n    let above = node.resolve(pos), before = above.childBefore(pos);\n    if (before && before.name == \":\" && above.name == \"PseudoClassSelector\")\n        return { from: pos, options: pseudoClasses, validFor: identifier };\n    if (before && before.name == \":\" && above.name == \"Declaration\" || above.name == \"ArgList\")\n        return { from: pos, options: values, validFor: identifier };\n    if (above.name == \"Block\" || above.name == \"Styles\")\n        return { from: pos, options: properties(), validFor: identifier };\n    return null;\n};\n/**\nCSS property, variable, and value keyword completion source.\n*/\nconst cssCompletionSource = /*@__PURE__*/defineCSSCompletionSource(n => n.name == \"VariableName\");\n\n/**\nA language provider based on the [Lezer CSS\nparser](https://github.com/lezer-parser/css), extended with\nhighlighting and indentation information.\n*/\nconst cssLanguage = /*@__PURE__*/LRLanguage.define({\n    name: \"css\",\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/indentNodeProp.add({\n                Declaration: /*@__PURE__*/continuedIndent()\n            }),\n            /*@__PURE__*/foldNodeProp.add({\n                \"Block KeyframeList\": foldInside\n            })\n        ]\n    }),\n    languageData: {\n        commentTokens: { block: { open: \"/*\", close: \"*/\" } },\n        indentOnInput: /^\\s*\\}$/,\n        wordChars: \"-\"\n    }\n});\n/**\nLanguage support for CSS.\n*/\nfunction css() {\n    return new LanguageSupport(cssLanguage, cssLanguage.data.of({ autocomplete: cssCompletionSource }));\n}\n\nexport { css, cssCompletionSource, cssLanguage, defineCSSCompletionSource };\n","import { ContextTracker, ExternalTokenizer, LRParser, LocalTokenGroup } from '@lezer/lr';\nimport { styleTags, tags } from '@lezer/highlight';\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst noSemi = 315,\n  noSemiType = 316,\n  incdec = 1,\n  incdecPrefix = 2,\n  questionDot = 3,\n  JSXStartTag = 4,\n  insertSemi = 317,\n  spaces = 319,\n  newline = 320,\n  LineComment = 5,\n  BlockComment = 6,\n  Dialect_jsx = 0;\n\n/* Hand-written tokenizers for JavaScript tokens that can't be\n   expressed by lezer's built-in tokenizer. */\n\nconst space = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200,\n               8201, 8202, 8232, 8233, 8239, 8287, 12288];\n\nconst braceR = 125, semicolon = 59, slash = 47, star = 42, plus = 43, minus = 45, lt = 60, comma = 44,\n      question = 63, dot = 46, bracketL = 91;\n\nconst trackNewline = new ContextTracker({\n  start: false,\n  shift(context, term) {\n    return term == LineComment || term == BlockComment || term == spaces ? context : term == newline\n  },\n  strict: false\n});\n\nconst insertSemicolon = new ExternalTokenizer((input, stack) => {\n  let {next} = input;\n  if (next == braceR || next == -1 || stack.context)\n    input.acceptToken(insertSemi);\n}, {contextual: true, fallback: true});\n\nconst noSemicolon = new ExternalTokenizer((input, stack) => {\n  let {next} = input, after;\n  if (space.indexOf(next) > -1) return\n  if (next == slash && ((after = input.peek(1)) == slash || after == star)) return\n  if (next != braceR && next != semicolon && next != -1 && !stack.context)\n    input.acceptToken(noSemi);\n}, {contextual: true});\n\nconst noSemicolonType = new ExternalTokenizer((input, stack) => {\n  if (input.next == bracketL && !stack.context) input.acceptToken(noSemiType);\n}, {contextual: true});\n\nconst operatorToken = new ExternalTokenizer((input, stack) => {\n  let {next} = input;\n  if (next == plus || next == minus) {\n    input.advance();\n    if (next == input.next) {\n      input.advance();\n      let mayPostfix = !stack.context && stack.canShift(incdec);\n      input.acceptToken(mayPostfix ? incdec : incdecPrefix);\n    }\n  } else if (next == question && input.peek(1) == dot) {\n    input.advance(); input.advance();\n    if (input.next < 48 || input.next > 57) // No digit after\n      input.acceptToken(questionDot);\n  }\n}, {contextual: true});\n\nfunction identifierChar(ch, start) {\n  return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch == 95 || ch >= 192 ||\n    !start && ch >= 48 && ch <= 57\n}\n\nconst jsx = new ExternalTokenizer((input, stack) => {\n  if (input.next != lt || !stack.dialectEnabled(Dialect_jsx)) return\n  input.advance();\n  if (input.next == slash) return\n  // Scan for an identifier followed by a comma or 'extends', don't\n  // treat this as a start tag if present.\n  let back = 0;\n  while (space.indexOf(input.next) > -1) { input.advance(); back++; }\n  if (identifierChar(input.next, true)) {\n    input.advance();\n    back++;\n    while (identifierChar(input.next, false)) { input.advance(); back++; }\n    while (space.indexOf(input.next) > -1) { input.advance(); back++; }\n    if (input.next == comma) return\n    for (let i = 0;; i++) {\n      if (i == 7) {\n        if (!identifierChar(input.next, true)) return\n        break\n      }\n      if (input.next != \"extends\".charCodeAt(i)) break\n      input.advance();\n      back++;\n    }\n  }\n  input.acceptToken(JSXStartTag, -back);\n});\n\nconst jsHighlight = styleTags({\n  \"get set async static\": tags.modifier,\n  \"for while do if else switch try catch finally return throw break continue default case\": tags.controlKeyword,\n  \"in of await yield void typeof delete instanceof as satisfies\": tags.operatorKeyword,\n  \"let var const using function class extends\": tags.definitionKeyword,\n  \"import export from\": tags.moduleKeyword,\n  \"with debugger new\": tags.keyword,\n  TemplateString: tags.special(tags.string),\n  super: tags.atom,\n  BooleanLiteral: tags.bool,\n  this: tags.self,\n  null: tags.null,\n  Star: tags.modifier,\n  VariableName: tags.variableName,\n  \"CallExpression/VariableName TaggedTemplateExpression/VariableName\": tags.function(tags.variableName),\n  VariableDefinition: tags.definition(tags.variableName),\n  Label: tags.labelName,\n  PropertyName: tags.propertyName,\n  PrivatePropertyName: tags.special(tags.propertyName),\n  \"CallExpression/MemberExpression/PropertyName\": tags.function(tags.propertyName),\n  \"FunctionDeclaration/VariableDefinition\": tags.function(tags.definition(tags.variableName)),\n  \"ClassDeclaration/VariableDefinition\": tags.definition(tags.className),\n  \"NewExpression/VariableName\": tags.className,\n  PropertyDefinition: tags.definition(tags.propertyName),\n  PrivatePropertyDefinition: tags.definition(tags.special(tags.propertyName)),\n  UpdateOp: tags.updateOperator,\n  \"LineComment Hashbang\": tags.lineComment,\n  BlockComment: tags.blockComment,\n  Number: tags.number,\n  String: tags.string,\n  Escape: tags.escape,\n  ArithOp: tags.arithmeticOperator,\n  LogicOp: tags.logicOperator,\n  BitOp: tags.bitwiseOperator,\n  CompareOp: tags.compareOperator,\n  RegExp: tags.regexp,\n  Equals: tags.definitionOperator,\n  Arrow: tags.function(tags.punctuation),\n  \": Spread\": tags.punctuation,\n  \"( )\": tags.paren,\n  \"[ ]\": tags.squareBracket,\n  \"{ }\": tags.brace,\n  \"InterpolationStart InterpolationEnd\": tags.special(tags.brace),\n  \".\": tags.derefOperator,\n  \", ;\": tags.separator,\n  \"@\": tags.meta,\n\n  TypeName: tags.typeName,\n  TypeDefinition: tags.definition(tags.typeName),\n  \"type enum interface implements namespace module declare\": tags.definitionKeyword,\n  \"abstract global Privacy readonly override\": tags.modifier,\n  \"is keyof unique infer asserts\": tags.operatorKeyword,\n\n  JSXAttributeValue: tags.attributeValue,\n  JSXText: tags.content,\n  \"JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag\": tags.angleBracket,\n  \"JSXIdentifier JSXNameSpacedName\": tags.tagName,\n  \"JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName\": tags.attributeName,\n  \"JSXBuiltin/JSXIdentifier\": tags.standard(tags.tagName)\n});\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst spec_identifier = {__proto__:null,export:20, as:25, from:33, default:36, async:41, function:42, in:52, out:55, const:56, extends:60, this:64, true:72, false:72, null:84, void:88, typeof:92, super:108, new:142, delete:154, yield:163, await:167, class:172, public:235, private:235, protected:235, readonly:237, instanceof:256, satisfies:259, import:292, keyof:349, unique:353, infer:359, asserts:395, is:397, abstract:417, implements:419, type:421, let:424, var:426, using:429, interface:435, enum:439, namespace:445, module:447, declare:451, global:455, for:474, of:483, while:486, with:490, do:494, if:498, else:500, switch:504, case:510, try:516, catch:520, finally:524, return:528, throw:532, break:536, continue:540, debugger:544};\nconst spec_word = {__proto__:null,async:129, get:131, set:133, declare:195, public:197, private:197, protected:197, static:199, abstract:201, override:203, readonly:209, accessor:211, new:401};\nconst spec_LessThan = {__proto__:null,\"<\":193};\nconst parser = LRParser.deserialize({\n  version: 14,\n  states: \"$EOQ%TQlOOO%[QlOOO'_QpOOP(lO`OOO*zQ!0MxO'#CiO+RO#tO'#CjO+aO&jO'#CjO+oO#@ItO'#DaO.QQlO'#DgO.bQlO'#DrO%[QlO'#DzO0fQlO'#ESOOQ!0Lf'#E['#E[O1PQ`O'#EXOOQO'#Ep'#EpOOQO'#Ik'#IkO1XQ`O'#GsO1dQ`O'#EoO1iQ`O'#EoO3hQ!0MxO'#JqO6[Q!0MxO'#JrO6uQ`O'#F]O6zQ,UO'#FtOOQ!0Lf'#Ff'#FfO7VO7dO'#FfO7eQMhO'#F|O9[Q`O'#F{OOQ!0Lf'#Jr'#JrOOQ!0Lb'#Jq'#JqO9aQ`O'#GwOOQ['#K^'#K^O9lQ`O'#IXO9qQ!0LrO'#IYOOQ['#J_'#J_OOQ['#I^'#I^Q`QlOOQ`QlOOO9yQ!L^O'#DvO:QQlO'#EOO:XQlO'#EQO9gQ`O'#GsO:`QMhO'#CoO:nQ`O'#EnO:yQ`O'#EyO;OQMhO'#FeO;mQ`O'#GsOOQO'#K_'#K_O;rQ`O'#K_O<QQ`O'#G{O<QQ`O'#G|O<QQ`O'#HOO9gQ`O'#HRO<wQ`O'#HUO>`Q`O'#CeO>pQ`O'#HbO>xQ`O'#HhO>xQ`O'#HjO`QlO'#HlO>xQ`O'#HnO>xQ`O'#HqO>}Q`O'#HwO?SQ!0LsO'#H}O%[QlO'#IPO?_Q!0LsO'#IRO?jQ!0LsO'#ITO9qQ!0LrO'#IVO?uQ!0MxO'#CiO@wQpO'#DlQOQ`OOO%[QlO'#EQOA_Q`O'#ETO:`QMhO'#EnOAjQ`O'#EnOAuQ!bO'#FeOOQ['#Cg'#CgOOQ!0Lb'#Dq'#DqOOQ!0Lb'#Ju'#JuO%[QlO'#JuOOQO'#Jx'#JxOOQO'#Ig'#IgOBuQpO'#EgOOQ!0Lb'#Ef'#EfOOQ!0Lb'#J|'#J|OCqQ!0MSO'#EgOC{QpO'#EWOOQO'#Jw'#JwODaQpO'#JxOEnQpO'#EWOC{QpO'#EgPE{O&2DjO'#CbPOOO)CD|)CD|OOOO'#I_'#I_OFWO#tO,59UOOQ!0Lh,59U,59UOOOO'#I`'#I`OFfO&jO,59UOFtQ!L^O'#DcOOOO'#Ib'#IbOF{O#@ItO,59{OOQ!0Lf,59{,59{OGZQlO'#IcOGnQ`O'#JsOImQ!fO'#JsO+}QlO'#JsOItQ`O,5:ROJ[Q`O'#EpOJiQ`O'#KSOJtQ`O'#KROJtQ`O'#KROJ|Q`O,5;^OKRQ`O'#KQOOQ!0Ln,5:^,5:^OKYQlO,5:^OMWQ!0MxO,5:fOMwQ`O,5:nONbQ!0LrO'#KPONiQ`O'#KOO9aQ`O'#KOON}Q`O'#KOO! VQ`O,5;]O! [Q`O'#KOO!#aQ!fO'#JrOOQ!0Lh'#Ci'#CiO%[QlO'#ESO!$PQ!fO,5:sOOQS'#Jy'#JyOOQO-E<i-E<iO9gQ`O,5=_O!$gQ`O,5=_O!$lQlO,5;ZO!&oQMhO'#EkO!(YQ`O,5;ZO!(_QlO'#DyO!(iQpO,5;dO!(qQpO,5;dO%[QlO,5;dOOQ['#FT'#FTOOQ['#FV'#FVO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eOOQ['#FZ'#FZO!)PQlO,5;tOOQ!0Lf,5;y,5;yOOQ!0Lf,5;z,5;zOOQ!0Lf,5;|,5;|O%[QlO'#IoO!+SQ!0LrO,5<iO%[QlO,5;eO!&oQMhO,5;eO!+qQMhO,5;eO!-cQMhO'#E^O%[QlO,5;wOOQ!0Lf,5;{,5;{O!-jQ,UO'#FjO!.gQ,UO'#KWO!.RQ,UO'#KWO!.nQ,UO'#KWOOQO'#KW'#KWO!/SQ,UO,5<SOOOW,5<`,5<`O!/eQlO'#FvOOOW'#In'#InO7VO7dO,5<QO!/lQ,UO'#FxOOQ!0Lf,5<Q,5<QO!0]Q$IUO'#CyOOQ!0Lh'#C}'#C}O!0pO#@ItO'#DRO!1^QMjO,5<eO!1eQ`O,5<hO!3QQ(CWO'#GXO!3_Q`O'#GYO!3dQ`O'#GYO!5SQ(CWO'#G^O!6XQpO'#GbOOQO'#Gn'#GnO!+xQMhO'#GmOOQO'#Gp'#GpO!+xQMhO'#GoO!6zQ$IUO'#JkOOQ!0Lh'#Jk'#JkO!7UQ`O'#JjO!7dQ`O'#JiO!7lQ`O'#CuOOQ!0Lh'#C{'#C{O!7}Q`O'#C}OOQ!0Lh'#DV'#DVOOQ!0Lh'#DX'#DXO1SQ`O'#DZO!+xQMhO'#GPO!+xQMhO'#GRO!8SQ`O'#GTO!8XQ`O'#GUO!3dQ`O'#G[O!+xQMhO'#GaO<QQ`O'#JjO!8^Q`O'#EqO!8{Q`O,5<gOOQ!0Lb'#Cr'#CrO!9TQ`O'#ErO!9}QpO'#EsOOQ!0Lb'#KQ'#KQO!:UQ!0LrO'#K`O9qQ!0LrO,5=cO`QlO,5>sOOQ['#Jg'#JgOOQ[,5>t,5>tOOQ[-E<[-E<[O!<TQ!0MxO,5:bO!9xQpO,5:`O!>nQ!0MxO,5:jO%[QlO,5:jO!AUQ!0MxO,5:lOOQO,5@y,5@yO!AuQMhO,5=_O!BTQ!0LrO'#JhO9[Q`O'#JhO!BfQ!0LrO,59ZO!BqQpO,59ZO!ByQMhO,59ZO:`QMhO,59ZO!CUQ`O,5;ZO!C^Q`O'#HaO!CrQ`O'#KcO%[QlO,5;}O!9xQpO,5<PO!CzQ`O,5=zO!DPQ`O,5=zO!DUQ`O,5=zO9qQ!0LrO,5=zO<QQ`O,5=jOOQO'#Cy'#CyO!DdQpO,5=gO!DlQMhO,5=hO!DwQ`O,5=jO!D|Q!bO,5=mO!EUQ`O'#K_O>}Q`O'#HWO9gQ`O'#HYO!EZQ`O'#HYO:`QMhO'#H[O!E`Q`O'#H[OOQ[,5=p,5=pO!EeQ`O'#H]O!EvQ`O'#CoO!E{Q`O,59PO!FVQ`O,59PO!H[QlO,59POOQ[,59P,59PO!HlQ!0LrO,59PO%[QlO,59PO!JwQlO'#HdOOQ['#He'#HeOOQ['#Hf'#HfO`QlO,5=|O!K_Q`O,5=|O`QlO,5>SO`QlO,5>UO!KdQ`O,5>WO`QlO,5>YO!KiQ`O,5>]O!KnQlO,5>cOOQ[,5>i,5>iO%[QlO,5>iO9qQ!0LrO,5>kOOQ[,5>m,5>mO# xQ`O,5>mOOQ[,5>o,5>oO# xQ`O,5>oOOQ[,5>q,5>qO#!fQpO'#D_O%[QlO'#JuO##XQpO'#JuO##cQpO'#DmO##tQpO'#DmO#&VQlO'#DmO#&^Q`O'#JtO#&fQ`O,5:WO#&kQ`O'#EtO#&yQ`O'#KTO#'RQ`O,5;_O#'WQpO'#DmO#'eQpO'#EVOOQ!0Lf,5:o,5:oO%[QlO,5:oO#'lQ`O,5:oO>}Q`O,5;YO!BqQpO,5;YO!ByQMhO,5;YO:`QMhO,5;YO#'tQ`O,5@aO#'yQ07dO,5:sOOQO-E<e-E<eO#)PQ!0MSO,5;ROC{QpO,5:rO#)ZQpO,5:rOC{QpO,5;RO!BfQ!0LrO,5:rOOQ!0Lb'#Ej'#EjOOQO,5;R,5;RO%[QlO,5;RO#)hQ!0LrO,5;RO#)sQ!0LrO,5;RO!BqQpO,5:rOOQO,5;X,5;XO#*RQ!0LrO,5;RPOOO'#I]'#I]P#*gO&2DjO,58|POOO,58|,58|OOOO-E<]-E<]OOQ!0Lh1G.p1G.pOOOO-E<^-E<^OOOO,59},59}O#*rQ!bO,59}OOOO-E<`-E<`OOQ!0Lf1G/g1G/gO#*wQ!fO,5>}O+}QlO,5>}OOQO,5?T,5?TO#+RQlO'#IcOOQO-E<a-E<aO#+`Q`O,5@_O#+hQ!fO,5@_O#+oQ`O,5@mOOQ!0Lf1G/m1G/mO%[QlO,5@nO#+wQ`O'#IiOOQO-E<g-E<gO#+oQ`O,5@mOOQ!0Lb1G0x1G0xOOQ!0Ln1G/x1G/xOOQ!0Ln1G0Y1G0YO%[QlO,5@kO#,]Q!0LrO,5@kO#,nQ!0LrO,5@kO#,uQ`O,5@jO9aQ`O,5@jO#,}Q`O,5@jO#-]Q`O'#IlO#,uQ`O,5@jOOQ!0Lb1G0w1G0wO!(iQpO,5:uO!(tQpO,5:uOOQS,5:w,5:wO#-}QdO,5:wO#.VQMhO1G2yO9gQ`O1G2yOOQ!0Lf1G0u1G0uO#.eQ!0MxO1G0uO#/jQ!0MvO,5;VOOQ!0Lh'#GW'#GWO#0WQ!0MzO'#JkO!$lQlO1G0uO#2cQ!fO'#JvO%[QlO'#JvO#2mQ`O,5:eOOQ!0Lh'#D_'#D_OOQ!0Lf1G1O1G1OO%[QlO1G1OOOQ!0Lf1G1f1G1fO#2rQ`O1G1OO#5WQ!0MxO1G1PO#5_Q!0MxO1G1PO#7uQ!0MxO1G1PO#7|Q!0MxO1G1PO#:dQ!0MxO1G1PO#<zQ!0MxO1G1PO#=RQ!0MxO1G1PO#=YQ!0MxO1G1PO#?pQ!0MxO1G1PO#?wQ!0MxO1G1PO#BUQ?MtO'#CiO#DPQ?MtO1G1`O#DWQ?MtO'#JrO#DkQ!0MxO,5?ZOOQ!0Lb-E<m-E<mO#FxQ!0MxO1G1PO#GuQ!0MzO1G1POOQ!0Lf1G1P1G1PO#HxQMjO'#J{O#ISQ`O,5:xO#IXQ!0MxO1G1cO#I{Q,UO,5<WO#JTQ,UO,5<XO#J]Q,UO'#FoO#JtQ`O'#FnOOQO'#KX'#KXOOQO'#Im'#ImO#JyQ,UO1G1nOOQ!0Lf1G1n1G1nOOOW1G1y1G1yO#K[Q?MtO'#JqO#KfQ`O,5<bO!)PQlO,5<bOOOW-E<l-E<lOOQ!0Lf1G1l1G1lO#KkQpO'#KWOOQ!0Lf,5<d,5<dO#KsQpO,5<dO#KxQMhO'#DTOOOO'#Ia'#IaO#LPO#@ItO,59mOOQ!0Lh,59m,59mO%[QlO1G2PO!8XQ`O'#IqO#L[Q`O,5<zOOQ!0Lh,5<w,5<wO!+xQMhO'#ItO#LxQMjO,5=XO!+xQMhO'#IvO#MkQMjO,5=ZO!&oQMhO,5=]OOQO1G2S1G2SO#MuQ!dO'#CrO#NYQ(CWO'#ErO$ _QpO'#GbO$ uQ!dO,5<sO$ |Q`O'#KZO9aQ`O'#KZO$![Q`O,5<uO!+xQMhO,5<tO$!aQ`O'#GZO$!rQ`O,5<tO$!wQ!dO'#GWO$#UQ!dO'#K[O$#`Q`O'#K[O!&oQMhO'#K[O$#eQ`O,5<xO$#jQlO'#JuO$#tQpO'#GcO##tQpO'#GcO$$VQ`O'#GgO!3dQ`O'#GkO$$[Q!0LrO'#IsO$$gQpO,5<|OOQ!0Lp,5<|,5<|O$$nQpO'#GcO$${QpO'#GdO$%^QpO'#GdO$%cQMjO,5=XO$%sQMjO,5=ZOOQ!0Lh,5=^,5=^O!+xQMhO,5@UO!+xQMhO,5@UO$&TQ`O'#IxO$&iQ`O,5@TO$&qQ`O,59aOOQ!0Lh,59i,59iO$'hQ$IYO,59uOOQ!0Lh'#Jo'#JoO$(ZQMjO,5<kO$(|QMjO,5<mO@oQ`O,5<oOOQ!0Lh,5<p,5<pO$)WQ`O,5<vO$)]QMjO,5<{O$)mQ`O,5@UO$){Q`O'#KOO!$lQlO1G2RO$*QQ`O1G2RO9aQ`O'#KRO9aQ`O'#EtO%[QlO'#EtO9aQ`O'#IzO$*VQ!0LrO,5@zOOQ[1G2}1G2}OOQ[1G4_1G4_OOQ!0Lf1G/|1G/|OOQ!0Lf1G/z1G/zO$,XQ!0MxO1G0UOOQ[1G2y1G2yO!&oQMhO1G2yO%[QlO1G2yO#.YQ`O1G2yO$.]QMhO'#EkOOQ!0Lb,5@S,5@SO$.jQ!0LrO,5@SOOQ[1G.u1G.uO!BfQ!0LrO1G.uO!BqQpO1G.uO!ByQMhO1G.uO$.{Q`O1G0uO$/QQ`O'#CiO$/]Q`O'#KdO$/eQ`O,5={O$/jQ`O'#KdO$/oQ`O'#KdO$/}Q`O'#JQO$0]Q`O,5@}O$0eQ!fO1G1iOOQ!0Lf1G1k1G1kO9gQ`O1G3fO@oQ`O1G3fO$0lQ`O1G3fO$0qQ`O1G3fOOQ[1G3f1G3fO!DwQ`O1G3UO!&oQMhO1G3RO$0vQ`O1G3ROOQ[1G3S1G3SO!&oQMhO1G3SO$0{Q`O1G3SO$1TQpO'#HQOOQ[1G3U1G3UO!6SQpO'#I|O!D|Q!bO1G3XOOQ[1G3X1G3XOOQ[,5=r,5=rO$1]QMhO,5=tO9gQ`O,5=tO$$VQ`O,5=vO9[Q`O,5=vO!BqQpO,5=vO!ByQMhO,5=vO:`QMhO,5=vO$1kQ`O'#KbO$1vQ`O,5=wOOQ[1G.k1G.kO$1{Q!0LrO1G.kO@oQ`O1G.kO$2WQ`O1G.kO9qQ!0LrO1G.kO$4`Q!fO,5APO$4mQ`O,5APO9aQ`O,5APO$4xQlO,5>OO$5PQ`O,5>OOOQ[1G3h1G3hO`QlO1G3hOOQ[1G3n1G3nOOQ[1G3p1G3pO>xQ`O1G3rO$5UQlO1G3tO$9YQlO'#HsOOQ[1G3w1G3wO$9gQ`O'#HyO>}Q`O'#H{OOQ[1G3}1G3}O$9oQlO1G3}O9qQ!0LrO1G4TOOQ[1G4V1G4VOOQ!0Lb'#G_'#G_O9qQ!0LrO1G4XO9qQ!0LrO1G4ZO$=vQ`O,5@aO!)PQlO,5;`O9aQ`O,5;`O>}Q`O,5:XO!)PQlO,5:XO!BqQpO,5:XO$={Q?MtO,5:XOOQO,5;`,5;`O$>VQpO'#IdO$>mQ`O,5@`OOQ!0Lf1G/r1G/rO$>uQpO'#IjO$?PQ`O,5@oOOQ!0Lb1G0y1G0yO##tQpO,5:XOOQO'#If'#IfO$?XQpO,5:qOOQ!0Ln,5:q,5:qO#'oQ`O1G0ZOOQ!0Lf1G0Z1G0ZO%[QlO1G0ZOOQ!0Lf1G0t1G0tO>}Q`O1G0tO!BqQpO1G0tO!ByQMhO1G0tOOQ!0Lb1G5{1G5{O!BfQ!0LrO1G0^OOQO1G0m1G0mO%[QlO1G0mO$?`Q!0LrO1G0mO$?kQ!0LrO1G0mO!BqQpO1G0^OC{QpO1G0^O$?yQ!0LrO1G0mOOQO1G0^1G0^O$@_Q!0MxO1G0mPOOO-E<Z-E<ZPOOO1G.h1G.hOOOO1G/i1G/iO$@iQ!bO,5<iO$@qQ!fO1G4iOOQO1G4o1G4oO%[QlO,5>}O$@{Q`O1G5yO$ATQ`O1G6XO$A]Q!fO1G6YO9aQ`O,5?TO$AgQ!0MxO1G6VO%[QlO1G6VO$AwQ!0LrO1G6VO$BYQ`O1G6UO$BYQ`O1G6UO9aQ`O1G6UO$BbQ`O,5?WO9aQ`O,5?WOOQO,5?W,5?WO$BvQ`O,5?WO$){Q`O,5?WOOQO-E<j-E<jOOQS1G0a1G0aOOQS1G0c1G0cO#.QQ`O1G0cOOQ[7+(e7+(eO!&oQMhO7+(eO%[QlO7+(eO$CUQ`O7+(eO$CaQMhO7+(eO$CoQ!0MzO,5=XO$EzQ!0MzO,5=ZO$HVQ!0MzO,5=XO$JhQ!0MzO,5=ZO$LyQ!0MzO,59uO% OQ!0MzO,5<kO%#ZQ!0MzO,5<mO%%fQ!0MzO,5<{OOQ!0Lf7+&a7+&aO%'wQ!0MxO7+&aO%(kQlO'#IeO%(xQ`O,5@bO%)QQ!fO,5@bOOQ!0Lf1G0P1G0PO%)[Q`O7+&jOOQ!0Lf7+&j7+&jO%)aQ?MtO,5:fO%[QlO7+&zO%)kQ?MtO,5:bO%)xQ?MtO,5:jO%*SQ?MtO,5:lO%*^QMhO'#IhO%*hQ`O,5@gOOQ!0Lh1G0d1G0dOOQO1G1r1G1rOOQO1G1s1G1sO%*pQ!jO,5<ZO!)PQlO,5<YOOQO-E<k-E<kOOQ!0Lf7+'Y7+'YOOOW7+'e7+'eOOOW1G1|1G1|O%*{Q`O1G1|OOQ!0Lf1G2O1G2OOOOO,59o,59oO%+QQ!dO,59oOOOO-E<_-E<_OOQ!0Lh1G/X1G/XO%+XQ!0MxO7+'kOOQ!0Lh,5?],5?]O%+{QMhO1G2fP%,SQ`O'#IqPOQ!0Lh-E<o-E<oO%,pQMjO,5?`OOQ!0Lh-E<r-E<rO%-cQMjO,5?bOOQ!0Lh-E<t-E<tO%-mQ!dO1G2wO%-tQ!dO'#CrO%.[QMhO'#KRO$#jQlO'#JuOOQ!0Lh1G2_1G2_O%.cQ`O'#IpO%.wQ`O,5@uO%.wQ`O,5@uO%/PQ`O,5@uO%/[Q`O,5@uOOQO1G2a1G2aO%/jQMjO1G2`O!+xQMhO1G2`O%/zQ(CWO'#IrO%0XQ`O,5@vO!&oQMhO,5@vO%0aQ!dO,5@vOOQ!0Lh1G2d1G2dO%2qQ!fO'#CiO%2{Q`O,5=POOQ!0Lb,5<},5<}O%3TQpO,5<}OOQ!0Lb,5=O,5=OOClQ`O,5<}O%3`QpO,5<}OOQ!0Lb,5=R,5=RO$){Q`O,5=VOOQO,5?_,5?_OOQO-E<q-E<qOOQ!0Lp1G2h1G2hO##tQpO,5<}O$#jQlO,5=PO%3nQ`O,5=OO%3yQpO,5=OO!+xQMhO'#ItO%4sQMjO1G2sO!+xQMhO'#IvO%5fQMjO1G2uO%5pQMjO1G5pO%5zQMjO1G5pOOQO,5?d,5?dOOQO-E<v-E<vOOQO1G.{1G.{O!9xQpO,59wO%[QlO,59wOOQ!0Lh,5<j,5<jO%6XQ`O1G2ZO!+xQMhO1G2bO!+xQMhO1G5pO!+xQMhO1G5pO%6^Q!0MxO7+'mOOQ!0Lf7+'m7+'mO!$lQlO7+'mO%7QQ`O,5;`OOQ!0Lb,5?f,5?fOOQ!0Lb-E<x-E<xO%7VQ!dO'#K]O#'oQ`O7+(eO4UQ!fO7+(eO$CXQ`O7+(eO%7aQ!0MvO'#CiO%7tQ!0MvO,5=SO%8fQ`O,5=SO%8nQ`O,5=SOOQ!0Lb1G5n1G5nOOQ[7+$a7+$aO!BfQ!0LrO7+$aO!BqQpO7+$aO!$lQlO7+&aO%8sQ`O'#JPO%9[Q`O,5AOOOQO1G3g1G3gO9gQ`O,5AOO%9[Q`O,5AOO%9dQ`O,5AOOOQO,5?l,5?lOOQO-E=O-E=OOOQ!0Lf7+'T7+'TO%9iQ`O7+)QO9qQ!0LrO7+)QO9gQ`O7+)QO@oQ`O7+)QOOQ[7+(p7+(pO%9nQ!0MvO7+(mO!&oQMhO7+(mO!DrQ`O7+(nOOQ[7+(n7+(nO!&oQMhO7+(nO%9xQ`O'#KaO%:TQ`O,5=lOOQO,5?h,5?hOOQO-E<z-E<zOOQ[7+(s7+(sO%;gQpO'#HZOOQ[1G3`1G3`O!&oQMhO1G3`O%[QlO1G3`O%;nQ`O1G3`O%;yQMhO1G3`O9qQ!0LrO1G3bO$$VQ`O1G3bO9[Q`O1G3bO!BqQpO1G3bO!ByQMhO1G3bO%<XQ`O'#JOO%<mQ`O,5@|O%<uQpO,5@|OOQ!0Lb1G3c1G3cOOQ[7+$V7+$VO@oQ`O7+$VO9qQ!0LrO7+$VO%=QQ`O7+$VO%[QlO1G6kO%[QlO1G6lO%=VQ!0LrO1G6kO%=aQlO1G3jO%=hQ`O1G3jO%=mQlO1G3jOOQ[7+)S7+)SO9qQ!0LrO7+)^O`QlO7+)`OOQ['#Kg'#KgOOQ['#JR'#JRO%=tQlO,5>_OOQ[,5>_,5>_O%[QlO'#HtO%>RQ`O'#HvOOQ[,5>e,5>eO9aQ`O,5>eOOQ[,5>g,5>gOOQ[7+)i7+)iOOQ[7+)o7+)oOOQ[7+)s7+)sOOQ[7+)u7+)uO%>WQpO1G5{O%>rQ?MtO1G0zO%>|Q`O1G0zOOQO1G/s1G/sO%?XQ?MtO1G/sO>}Q`O1G/sO!)PQlO'#DmOOQO,5?O,5?OOOQO-E<b-E<bOOQO,5?U,5?UOOQO-E<h-E<hO!BqQpO1G/sOOQO-E<d-E<dOOQ!0Ln1G0]1G0]OOQ!0Lf7+%u7+%uO#'oQ`O7+%uOOQ!0Lf7+&`7+&`O>}Q`O7+&`O!BqQpO7+&`OOQO7+%x7+%xO$@_Q!0MxO7+&XOOQO7+&X7+&XO%[QlO7+&XO%?cQ!0LrO7+&XO!BfQ!0LrO7+%xO!BqQpO7+%xO%?nQ!0LrO7+&XO%?|Q!0MxO7++qO%[QlO7++qO%@^Q`O7++pO%@^Q`O7++pOOQO1G4r1G4rO9aQ`O1G4rO%@fQ`O1G4rOOQS7+%}7+%}O#'oQ`O<<LPO4UQ!fO<<LPO%@tQ`O<<LPOOQ[<<LP<<LPO!&oQMhO<<LPO%[QlO<<LPO%@|Q`O<<LPO%AXQ!0MzO,5?`O%CdQ!0MzO,5?bO%EoQ!0MzO1G2`O%HQQ!0MzO1G2sO%J]Q!0MzO1G2uO%LhQ!fO,5?PO%[QlO,5?POOQO-E<c-E<cO%LrQ`O1G5|OOQ!0Lf<<JU<<JUO%LzQ?MtO1G0uO& RQ?MtO1G1PO& YQ?MtO1G1PO&#ZQ?MtO1G1PO&#bQ?MtO1G1PO&%cQ?MtO1G1PO&'dQ?MtO1G1PO&'kQ?MtO1G1PO&'rQ?MtO1G1PO&)sQ?MtO1G1PO&)zQ?MtO1G1PO&*RQ!0MxO<<JfO&+yQ?MtO1G1PO&,vQ?MvO1G1PO&-yQ?MvO'#JkO&0PQ?MtO1G1cO&0^Q?MtO1G0UO&0hQMjO,5?SOOQO-E<f-E<fO!)PQlO'#FqOOQO'#KY'#KYOOQO1G1u1G1uO&0rQ`O1G1tO&0wQ?MtO,5?ZOOOW7+'h7+'hOOOO1G/Z1G/ZO&1RQ!dO1G4wOOQ!0Lh7+(Q7+(QP!&oQMhO,5?]O!+xQMhO7+(cO&1YQ`O,5?[O9aQ`O,5?[OOQO-E<n-E<nO&1hQ`O1G6aO&1hQ`O1G6aO&1pQ`O1G6aO&1{QMjO7+'zO&2]Q!dO,5?^O&2gQ`O,5?^O!&oQMhO,5?^OOQO-E<p-E<pO&2lQ!dO1G6bO&2vQ`O1G6bO&3OQ`O1G2kO!&oQMhO1G2kOOQ!0Lb1G2i1G2iOOQ!0Lb1G2j1G2jO%3TQpO1G2iO!BqQpO1G2iOClQ`O1G2iOOQ!0Lb1G2q1G2qO&3TQpO1G2iO&3cQ`O1G2kO$){Q`O1G2jOClQ`O1G2jO$#jQlO1G2kO&3kQ`O1G2jO&4_QMjO,5?`OOQ!0Lh-E<s-E<sO&5QQMjO,5?bOOQ!0Lh-E<u-E<uO!+xQMhO7++[OOQ!0Lh1G/c1G/cO&5[Q`O1G/cOOQ!0Lh7+'u7+'uO&5aQMjO7+'|O&5qQMjO7++[O&5{QMjO7++[O&6YQ!0MxO<<KXOOQ!0Lf<<KX<<KXO&6|Q`O1G0zO!&oQMhO'#IyO&7RQ`O,5@wO&9TQ!fO<<LPO!&oQMhO1G2nO&9[Q!0LrO1G2nOOQ[<<G{<<G{O!BfQ!0LrO<<G{O&9mQ!0MxO<<I{OOQ!0Lf<<I{<<I{OOQO,5?k,5?kO&:aQ`O,5?kO&:fQ`O,5?kOOQO-E<}-E<}O&:tQ`O1G6jO&:tQ`O1G6jO9gQ`O1G6jO@oQ`O<<LlOOQ[<<Ll<<LlO&:|Q`O<<LlO9qQ!0LrO<<LlOOQ[<<LX<<LXO%9nQ!0MvO<<LXOOQ[<<LY<<LYO!DrQ`O<<LYO&;RQpO'#I{O&;^Q`O,5@{O!)PQlO,5@{OOQ[1G3W1G3WOOQO'#I}'#I}O9qQ!0LrO'#I}O&;fQpO,5=uOOQ[,5=u,5=uO&;mQpO'#EgO&;tQpO'#GeO&;yQ`O7+(zO&<OQ`O7+(zOOQ[7+(z7+(zO!&oQMhO7+(zO%[QlO7+(zO&<WQ`O7+(zOOQ[7+(|7+(|O9qQ!0LrO7+(|O$$VQ`O7+(|O9[Q`O7+(|O!BqQpO7+(|O&<cQ`O,5?jOOQO-E<|-E<|OOQO'#H^'#H^O&<nQ`O1G6hO9qQ!0LrO<<GqOOQ[<<Gq<<GqO@oQ`O<<GqO&<vQ`O7+,VO&<{Q`O7+,WO%[QlO7+,VO%[QlO7+,WOOQ[7+)U7+)UO&=QQ`O7+)UO&=VQlO7+)UO&=^Q`O7+)UOOQ[<<Lx<<LxOOQ[<<Lz<<LzOOQ[-E=P-E=POOQ[1G3y1G3yO&=cQ`O,5>`OOQ[,5>b,5>bO&=hQ`O1G4PO9aQ`O7+&fO!)PQlO7+&fOOQO7+%_7+%_O&=mQ?MtO1G6YO>}Q`O7+%_OOQ!0Lf<<Ia<<IaOOQ!0Lf<<Iz<<IzO>}Q`O<<IzOOQO<<Is<<IsO$@_Q!0MxO<<IsO%[QlO<<IsOOQO<<Id<<IdO!BfQ!0LrO<<IdO&=wQ!0LrO<<IsO&>SQ!0MxO<= ]O&>dQ`O<= [OOQO7+*^7+*^O9aQ`O7+*^OOQ[ANAkANAkO&>lQ!fOANAkO!&oQMhOANAkO#'oQ`OANAkO4UQ!fOANAkO&>sQ`OANAkO%[QlOANAkO&>{Q!0MzO7+'zO&A^Q!0MzO,5?`O&CiQ!0MzO,5?bO&EtQ!0MzO7+'|O&HVQ!fO1G4kO&HaQ?MtO7+&aO&JeQ?MvO,5=XO&LlQ?MvO,5=ZO&L|Q?MvO,5=XO&M^Q?MvO,5=ZO&MnQ?MvO,59uO' tQ?MvO,5<kO'#wQ?MvO,5<mO'&]Q?MvO,5<{O'(RQ?MtO7+'kO'(`Q?MtO7+'mO'(mQ`O,5<]OOQO7+'`7+'`OOQ!0Lh7+*c7+*cO'(rQMjO<<K}OOQO1G4v1G4vO'(yQ`O1G4vO')UQ`O1G4vO')dQ`O7++{O')dQ`O7++{O!&oQMhO1G4xO')lQ!dO1G4xO')vQ`O7++|O'*OQ`O7+(VO'*ZQ!dO7+(VOOQ!0Lb7+(T7+(TOOQ!0Lb7+(U7+(UO!BqQpO7+(TOClQ`O7+(TO'*eQ`O7+(VO!&oQMhO7+(VO$){Q`O7+(UO'*jQ`O7+(VOClQ`O7+(UO'*rQMjO<<NvOOQ!0Lh7+$}7+$}O!+xQMhO<<NvO'*|Q!dO,5?eOOQO-E<w-E<wO'+WQ!0MvO7+(YO!&oQMhO7+(YOOQ[AN=gAN=gO9gQ`O1G5VOOQO1G5V1G5VO'+hQ`O1G5VO'+mQ`O7+,UO'+mQ`O7+,UO9qQ!0LrOANBWO@oQ`OANBWOOQ[ANBWANBWOOQ[ANAsANAsOOQ[ANAtANAtO'+uQ`O,5?gOOQO-E<y-E<yO',QQ?MtO1G6gOOQO,5?i,5?iOOQO-E<{-E<{OOQ[1G3a1G3aO',[Q`O,5=POOQ[<<Lf<<LfO!&oQMhO<<LfO&;yQ`O<<LfO',aQ`O<<LfO%[QlO<<LfOOQ[<<Lh<<LhO9qQ!0LrO<<LhO$$VQ`O<<LhO9[Q`O<<LhO',iQpO1G5UO',tQ`O7+,SOOQ[AN=]AN=]O9qQ!0LrOAN=]OOQ[<= q<= qOOQ[<= r<= rO',|Q`O<= qO'-RQ`O<= rOOQ[<<Lp<<LpO'-WQ`O<<LpO'-]QlO<<LpOOQ[1G3z1G3zO>}Q`O7+)kO'-dQ`O<<JQO'-oQ?MtO<<JQOOQO<<Hy<<HyOOQ!0LfAN?fAN?fOOQOAN?_AN?_O$@_Q!0MxOAN?_OOQOAN?OAN?OO%[QlOAN?_OOQO<<Mx<<MxOOQ[G27VG27VO!&oQMhOG27VO#'oQ`OG27VO'-yQ!fOG27VO4UQ!fOG27VO'.QQ`OG27VO'.YQ?MtO<<JfO'.gQ?MvO1G2`O'0]Q?MvO,5?`O'2`Q?MvO,5?bO'4cQ?MvO1G2sO'6fQ?MvO1G2uO'8iQ?MtO<<KXO'8vQ?MtO<<I{OOQO1G1w1G1wO!+xQMhOANAiOOQO7+*b7+*bO'9TQ`O7+*bO'9`Q`O<= gO'9hQ!dO7+*dOOQ!0Lb<<Kq<<KqO$){Q`O<<KqOClQ`O<<KqO'9rQ`O<<KqO!&oQMhO<<KqOOQ!0Lb<<Ko<<KoO!BqQpO<<KoO'9}Q!dO<<KqOOQ!0Lb<<Kp<<KpO':XQ`O<<KqO!&oQMhO<<KqO$){Q`O<<KpO':^QMjOANDbO':hQ!0MvO<<KtOOQO7+*q7+*qO9gQ`O7+*qO':xQ`O<= pOOQ[G27rG27rO9qQ!0LrOG27rO!)PQlO1G5RO';QQ`O7+,RO';YQ`O1G2kO&;yQ`OANBQOOQ[ANBQANBQO!&oQMhOANBQO';_Q`OANBQOOQ[ANBSANBSO9qQ!0LrOANBSO$$VQ`OANBSOOQO'#H_'#H_OOQO7+*p7+*pOOQ[G22wG22wOOQ[ANE]ANE]OOQ[ANE^ANE^OOQ[ANB[ANB[O';gQ`OANB[OOQ[<<MV<<MVO!)PQlOAN?lOOQOG24yG24yO$@_Q!0MxOG24yO#'oQ`OLD,qOOQ[LD,qLD,qO!&oQMhOLD,qO';lQ!fOLD,qO';sQ?MvO7+'zO'=iQ?MvO,5?`O'?lQ?MvO,5?bO'AoQ?MvO7+'|O'CeQMjOG27TOOQO<<M|<<M|OOQ!0LbANA]ANA]O$){Q`OANA]OClQ`OANA]O'CuQ!dOANA]OOQ!0LbANAZANAZO'C|Q`OANA]O!&oQMhOANA]O'DXQ!dOANA]OOQ!0LbANA[ANA[OOQO<<N]<<N]OOQ[LD-^LD-^O'DcQ?MtO7+*mOOQO'#Gf'#GfOOQ[G27lG27lO&;yQ`OG27lO!&oQMhOG27lOOQ[G27nG27nO9qQ!0LrOG27nOOQ[G27vG27vO'DmQ?MtOG25WOOQOLD*eLD*eOOQ[!$(!]!$(!]O#'oQ`O!$(!]O!&oQMhO!$(!]O'DwQ!0MzOG27TOOQ!0LbG26wG26wO$){Q`OG26wO'GYQ`OG26wOClQ`OG26wO'GeQ!dOG26wO!&oQMhOG26wOOQ[LD-WLD-WO&;yQ`OLD-WOOQ[LD-YLD-YOOQ[!)9Ew!)9EwO#'oQ`O!)9EwOOQ!0LbLD,cLD,cO$){Q`OLD,cOClQ`OLD,cO'GlQ`OLD,cO'GwQ!dOLD,cOOQ[!$(!r!$(!rOOQ[!.K;c!.K;cO'HOQ?MvOG27TOOQ!0Lb!$( }!$( }O$){Q`O!$( }OClQ`O!$( }O'ItQ`O!$( }OOQ!0Lb!)9Ei!)9EiO$){Q`O!)9EiOClQ`O!)9EiOOQ!0Lb!.K;T!.K;TO$){Q`O!.K;TOOQ!0Lb!4/0o!4/0oO!)PQlO'#DzO1PQ`O'#EXO'JPQ!fO'#JqO'JWQ!L^O'#DvO'J_QlO'#EOO'JfQ!fO'#CiO'L|Q!fO'#CiO!)PQlO'#EQO'M^QlO,5;ZO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO'#IoO( aQ`O,5<iO!)PQlO,5;eO( iQMhO,5;eO(#SQMhO,5;eO!)PQlO,5;wO!&oQMhO'#GmO( iQMhO'#GmO!&oQMhO'#GoO( iQMhO'#GoO1SQ`O'#DZO1SQ`O'#DZO!&oQMhO'#GPO( iQMhO'#GPO!&oQMhO'#GRO( iQMhO'#GRO!&oQMhO'#GaO( iQMhO'#GaO!)PQlO,5:jO(#ZQpO'#D_O(#eQpO'#JuO!)PQlO,5@nO'M^QlO1G0uO(#oQ?MtO'#CiO!)PQlO1G2PO!&oQMhO'#ItO( iQMhO'#ItO!&oQMhO'#IvO( iQMhO'#IvO(#yQ!dO'#CrO!&oQMhO,5<tO( iQMhO,5<tO'M^QlO1G2RO!)PQlO7+&zO!&oQMhO1G2`O( iQMhO1G2`O!&oQMhO'#ItO( iQMhO'#ItO!&oQMhO'#IvO( iQMhO'#IvO!&oQMhO1G2bO( iQMhO1G2bO'M^QlO7+'mO'M^QlO7+&aO!&oQMhOANAiO( iQMhOANAiO($^Q`O'#EoO($cQ`O'#EoO($kQ`O'#F]O($pQ`O'#EyO($uQ`O'#KSO(%QQ`O'#KQO(%]Q`O,5;ZO(%bQMjO,5<eO(%iQ`O'#GYO(%nQ`O'#GYO(%sQ`O,5<gO(%{Q`O,5;ZO(&TQ?MtO1G1`O(&[Q`O,5<tO(&aQ`O,5<tO(&fQ`O,5<vO(&kQ`O,5<vO(&pQ`O1G2RO(&uQ`O1G0uO(&zQMjO<<K}O('RQMjO<<K}O7eQMhO'#F|O9[Q`O'#F{OAjQ`O'#EnO!)PQlO,5;tO!3dQ`O'#GYO!3dQ`O'#GYO!3dQ`O'#G[O!3dQ`O'#G[O!+xQMhO7+(cO!+xQMhO7+(cO%-mQ!dO1G2wO%-mQ!dO1G2wO!&oQMhO,5=]O!&oQMhO,5=]\",\n  stateData: \"((X~O'{OS'|OSTOS'}RQ~OPYOQYOSfOY!VOaqOdzOeyOl!POpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_XO!iuO!lZO!oYO!pYO!qYO!svO!uwO!xxO!|]O$W|O$niO%h}O%j!QO%l!OO%m!OO%n!OO%q!RO%s!SO%v!TO%w!TO%y!UO&V!WO&]!XO&_!YO&a!ZO&c![O&f!]O&l!^O&r!_O&t!`O&v!aO&x!bO&z!cO(SSO(UTO(XUO(`VO(n[O~OWtO~P`OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(S!dO(UTO(XUO(`VO(n[O~Oa!wOs!nO!S!oO!b!yO!c!vO!d!vO!|;wO#T!pO#U!pO#V!xO#W!pO#X!pO#[!zO#]!zO(T!lO(UTO(XUO(d!mO(n!sO~O'}!{O~OP]XR]X[]Xa]Xj]Xr]X!Q]X!S]X!]]X!l]X!p]X#R]X#S]X#`]X#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X'y]X(`]X(q]X(x]X(y]X~O!g%RX~P(qO_!}O(U#PO(V!}O(W#PO~O_#QO(W#PO(X#PO(Y#QO~Ox#SO!U#TO(a#TO(b#VO~OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(S;{O(UTO(XUO(`VO(n[O~O![#ZO!]#WO!Y(gP!Y(uP~P+}O!^#cO~P`OPYOQYOSfOd!jOe!iOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(UTO(XUO(`VO(n[O~Op#mO![#iO!|]O#i#lO#j#iO(S;|O!k(rP~P.iO!l#oO(S#nO~O!x#sO!|]O%h#tO~O#k#uO~O!g#vO#k#uO~OP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!]$_O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO#z$WO#{$XO(`VO(q$YO(x#|O(y#}O~Oa(eX'y(eX'v(eX!k(eX!Y(eX!_(eX%i(eX!g(eX~P1qO#S$dO#`$eO$Q$eOP(fXR(fX[(fXj(fXr(fX!Q(fX!S(fX!](fX!l(fX!p(fX#R(fX#n(fX#o(fX#p(fX#q(fX#r(fX#s(fX#t(fX#u(fX#v(fX#x(fX#z(fX#{(fX(`(fX(q(fX(x(fX(y(fX!_(fX%i(fX~Oa(fX'y(fX'v(fX!Y(fX!k(fXv(fX!g(fX~P4UO#`$eO~O$]$hO$_$gO$f$mO~OSfO!_$nO$i$oO$k$qO~Oh%VOj%cOk%cOl%cOp%WOr%XOs$tOt$tOz%YO|%ZO!O%[O!S${O!_$|O!i%aO!l$xO#j%bO$W%_O$t%]O$v%^O$y%`O(S$sO(UTO(XUO(`$uO(x$}O(y%POg(]P~O!l%dO~O!S%gO!_%hO(S%fO~O!g%lO~Oa%mO'y%mO~O!Q%qO~P%[O(T!lO~P%[O%n%uO~P%[Oh%VO!l%dO(S%fO(T!lO~Oe%|O!l%dO(S%fO~Oj$RO~O!Q&RO!_&OO!l&QO%j&UO(S%fO(T!lO(UTO(XUO`)VP~O!x#sO~O%s&WO!S)RX!_)RX(S)RX~O(S&XO~Ol!PO!u&^O%j!QO%l!OO%m!OO%n!OO%q!RO%s!SO%v!TO%w!TO~Od&cOe&bO!x&`O%h&aO%{&_O~P<VOd&fOeyOl!PO!_&eO!u&^O!xxO!|]O%h}O%l!OO%m!OO%n!OO%q!RO%s!SO%v!TO%w!TO%y!UO~Ob&iO#`&lO%j&gO(T!lO~P=[O!l&mO!u&qO~O!l#oO~O!_XO~Oa%mO'w&yO'y%mO~Oa%mO'w&|O'y%mO~Oa%mO'w'OO'y%mO~O'v]X!Y]Xv]X!k]X&Z]X!_]X%i]X!g]X~P(qO!b']O!c'UO!d'UO(T!lO(UTO(XUO~Os'SO!S'RO!['VO(d'QO!^(hP!^(wP~P@cOn'`O!_'^O(S%fO~Oe'eO!l%dO(S%fO~O!Q&RO!l&QO~Os!nO!S!oO!|;wO#T!pO#U!pO#W!pO#X!pO(T!lO(UTO(XUO(d!mO(n!sO~O!b'kO!c'jO!d'jO#V!pO#['lO#]'lO~PA}Oa%mOh%VO!g#vO!l%dO'y%mO(q'nO~O!p'rO#`'pO~PC]Os!nO!S!oO(UTO(XUO(d!mO(n!sO~O!_XOs(lX!S(lX!b(lX!c(lX!d(lX!|(lX#T(lX#U(lX#V(lX#W(lX#X(lX#[(lX#](lX(T(lX(U(lX(X(lX(d(lX(n(lX~O!c'jO!d'jO(T!lO~PC{O(O'vO(P'vO(Q'xO~O_!}O(U'zO(V!}O(W'zO~O_#QO(W'zO(X'zO(Y#QO~Ov'|O~P%[Ox#SO!U#TO(a#TO(b(PO~O![(RO!Y'VX!Y']X!]'VX!]']X~P+}O!](TO!Y(gX~OP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!](TO!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO#z$WO#{$XO(`VO(q$YO(x#|O(y#}O~O!Y(gX~PGvO!Y(YO~O!Y(tX!](tX!g(tX!k(tX(q(tX~O#`(tX#k#dX!^(tX~PIyO#`(ZO!Y(vX!](vX~O!]([O!Y(uX~O!Y(_O~O#`$eO~PIyO!^(`O~P`OR#zO!Q#yO!S#{O!l#xO(`VOP!na[!naj!nar!na!]!na!p!na#R!na#n!na#o!na#p!na#q!na#r!na#s!na#t!na#u!na#v!na#x!na#z!na#{!na(q!na(x!na(y!na~Oa!na'y!na'v!na!Y!na!k!nav!na!_!na%i!na!g!na~PKaO!k(aO~O!g#vO#`(bO(q'nO!](sXa(sX'y(sX~O!k(sX~PM|O!S%gO!_%hO!|]O#i(gO#j(fO(S%fO~O!](hO!k(rX~O!k(jO~O!S%gO!_%hO#j(fO(S%fO~OP(fXR(fX[(fXj(fXr(fX!Q(fX!S(fX!](fX!l(fX!p(fX#R(fX#n(fX#o(fX#p(fX#q(fX#r(fX#s(fX#t(fX#u(fX#v(fX#x(fX#z(fX#{(fX(`(fX(q(fX(x(fX(y(fX~O!g#vO!k(fX~P! jOR(lO!Q(kO!l#xO#S$dO!|!{a!S!{a~O!x!{a%h!{a!_!{a#i!{a#j!{a(S!{a~P!#kO!x(pO~OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_XO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(S!dO(UTO(XUO(`VO(n[O~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<eO!S${O!_$|O!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(S(tO(UTO(XUO(`$uO(x$}O(y%PO~O#k(vO~O![(xO!k(jP~P%[O(d(zO(n[O~O!S(|O!l#xO(d(zO(n[O~OP;vOQ;vOSfOd=rOe!iOpkOr;vOskOtkOzkO|;vO!O;vO!SWO!WkO!XkO!_!eO!i;yO!lZO!o;vO!p;vO!q;vO!s;zO!u;}O!x!hO$W!kO$n=pO(S)ZO(UTO(XUO(`VO(n[O~O!]$_Oa$qa'y$qa'v$qa!k$qa!Y$qa!_$qa%i$qa!g$qa~Ol)bO~P!&oOh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O%[O!S${O!_$|O!i%aO!l$xO#j%bO$W%_O$t%]O$v%^O$y%`O(S(tO(UTO(XUO(`$uO(x$}O(y%PO~Og(oP~P!+xO!Q)gO!g)fO!_$^X$Z$^X$]$^X$_$^X$f$^X~O!g)fO!_(zX$Z(zX$](zX$_(zX$f(zX~O!Q)gO~P!.RO!Q)gO!_(zX$Z(zX$](zX$_(zX$f(zX~O!_)iO$Z)mO$])hO$_)hO$f)nO~O![)qO~P!)PO$]$hO$_$gO$f)uO~On$zX!Q$zX#S$zX'x$zX(x$zX(y$zX~OgmXg$zXnmX!]mX#`mX~P!/wOx)wO(a)xO(b)zO~On*TO!Q)|O'x)}O(x$}O(y%PO~Og){O~P!0{Og*UO~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<eO!S*WO!_*XO!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(UTO(XUO(`$uO(x$}O(y%PO~O![*[O(S*VO!k(}P~P!1jO#k*^O~O!l*_O~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<eO!S${O!_$|O!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(S*aO(UTO(XUO(`$uO(x$}O(y%PO~O![*dO!Y)OP~P!3iOr*pOs!nO!S*fO!b*nO!c*hO!d*hO!l*_O#[*oO%`*jO(T!lO(UTO(XUO(d!mO~O!^*mO~P!5^O#S$dOn(_X!Q(_X'x(_X(x(_X(y(_X!](_X#`(_X~Og(_X$O(_X~P!6`On*uO#`*tOg(^X!](^X~O!]*vOg(]X~Oj%cOk%cOl%cO(S&XOg(]P~Os*yO~O!l+OO~O(S(tO~Op+TO!S%gO![#iO!_%hO!|]O#i#lO#j#iO(S%fO!k(rP~O!g#vO#k+UO~O!S%gO![+WO!]([O!_%hO(S%fO!Y(uP~Os'YO!S+YO![+XO(UTO(XUO(d(zO~O!^(wP~P!9iO!]+ZOa)SX'y)SX~OP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO#z$WO#{$XO(`VO(q$YO(x#|O(y#}O~Oa!ja!]!ja'y!ja'v!ja!Y!ja!k!jav!ja!_!ja%i!ja!g!ja~P!:aOR#zO!Q#yO!S#{O!l#xO(`VOP!ra[!raj!rar!ra!]!ra!p!ra#R!ra#n!ra#o!ra#p!ra#q!ra#r!ra#s!ra#t!ra#u!ra#v!ra#x!ra#z!ra#{!ra(q!ra(x!ra(y!ra~Oa!ra'y!ra'v!ra!Y!ra!k!rav!ra!_!ra%i!ra!g!ra~P!<wOR#zO!Q#yO!S#{O!l#xO(`VOP!ta[!taj!tar!ta!]!ta!p!ta#R!ta#n!ta#o!ta#p!ta#q!ta#r!ta#s!ta#t!ta#u!ta#v!ta#x!ta#z!ta#{!ta(q!ta(x!ta(y!ta~Oa!ta'y!ta'v!ta!Y!ta!k!tav!ta!_!ta%i!ta!g!ta~P!?_Oh%VOn+dO!_'^O%i+cO~O!g+fOa([X!_([X'y([X!]([X~Oa%mO!_XO'y%mO~Oh%VO!l%dO~Oh%VO!l%dO(S%fO~O!g#vO#k(vO~Ob+qO%j+rO(S+nO(UTO(XUO!^)WP~O!]+sO`)VX~O[+wO~O`+xO~O!_&OO(S%fO(T!lO`)VP~Oh%VO#`+}O~Oh%VOn,QO!_$|O~O!_,SO~O!Q,UO!_XO~O%n%uO~O!x,ZO~Oe,`O~Ob,aO(S#nO(UTO(XUO!^)UP~Oe%|O~O%j!QO(S&XO~P=[O[,fO`,eO~OPYOQYOSfOdzOeyOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!iuO!lZO!oYO!pYO!qYO!svO!xxO!|]O$niO%h}O(UTO(XUO(`VO(n[O~O!_!eO!u!gO$W!kO(S!dO~P!F_O`,eOa%mO'y%mO~OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!x!hO$W!kO$niO(S!dO(UTO(XUO(`VO(n[O~Oa,kOl!OO!uwO%l!OO%m!OO%n!OO~P!HwO!l&mO~O&],qO~O!_,sO~O&n,uO&p,vOP&kaQ&kaS&kaY&kaa&kad&kae&kal&kap&kar&kas&kat&kaz&ka|&ka!O&ka!S&ka!W&ka!X&ka!_&ka!i&ka!l&ka!o&ka!p&ka!q&ka!s&ka!u&ka!x&ka!|&ka$W&ka$n&ka%h&ka%j&ka%l&ka%m&ka%n&ka%q&ka%s&ka%v&ka%w&ka%y&ka&V&ka&]&ka&_&ka&a&ka&c&ka&f&ka&l&ka&r&ka&t&ka&v&ka&x&ka&z&ka'v&ka(S&ka(U&ka(X&ka(`&ka(n&ka!^&ka&d&kab&ka&i&ka~O(S,{O~Oh!eX!]!RX!^!RX!g!RX!g!eX!l!eX#`!RX~O!]!eX!^!eX~P# }O!g-QO#`-POh(iX!]#hX!^#hX!g(iX!l(iX~O!](iX!^(iX~P#!pOh%VO!g-SO!l%dO!]!aX!^!aX~Os!nO!S!oO(UTO(XUO(d!mO~OP;vOQ;vOSfOd=rOe!iOpkOr;vOskOtkOzkO|;vO!O;vO!SWO!WkO!XkO!_!eO!i;yO!lZO!o;vO!p;vO!q;vO!s;zO!u;}O!x!hO$W!kO$n=pO(UTO(XUO(`VO(n[O~O(S<rO~P#$VO!]-WO!^(hX~O!^-YO~O!g-QO#`-PO!]#hX!^#hX~O!]-ZO!^(wX~O!^-]O~O!c-^O!d-^O(T!lO~P##tO!^-aO~P'_On-dO!_'^O~O!Y-iO~Os!{a!b!{a!c!{a!d!{a#T!{a#U!{a#V!{a#W!{a#X!{a#[!{a#]!{a(T!{a(U!{a(X!{a(d!{a(n!{a~P!#kO!p-nO#`-lO~PC]O!c-pO!d-pO(T!lO~PC{Oa%mO#`-lO'y%mO~Oa%mO!g#vO#`-lO'y%mO~Oa%mO!g#vO!p-nO#`-lO'y%mO(q'nO~O(O'vO(P'vO(Q-uO~Ov-vO~O!Y'Va!]'Va~P!:aO![-zO!Y'VX!]'VX~P%[O!](TO!Y(ga~O!Y(ga~PGvO!]([O!Y(ua~O!S%gO![.OO!_%hO(S%fO!Y']X!]']X~O#`.QO!](sa!k(saa(sa'y(sa~O!g#vO~P#,]O!](hO!k(ra~O!S%gO!_%hO#j.UO(S%fO~Op.ZO!S%gO![.WO!_%hO!|]O#i.YO#j.WO(S%fO!]'`X!k'`X~OR._O!l#xO~Oh%VOn.bO!_'^O%i.aO~Oa#ci!]#ci'y#ci'v#ci!Y#ci!k#civ#ci!_#ci%i#ci!g#ci~P!:aOn=|O!Q)|O'x)}O(x$}O(y%PO~O#k#_aa#_a#`#_a'y#_a!]#_a!k#_a!_#_a!Y#_a~P#/XO#k(_XP(_XR(_X[(_Xa(_Xj(_Xr(_X!S(_X!l(_X!p(_X#R(_X#n(_X#o(_X#p(_X#q(_X#r(_X#s(_X#t(_X#u(_X#v(_X#x(_X#z(_X#{(_X'y(_X(`(_X(q(_X!k(_X!Y(_X'v(_Xv(_X!_(_X%i(_X!g(_X~P!6`O!].oO!k(jX~P!:aO!k.rO~O!Y.tO~OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O(`VO[#mia#mij#mir#mi!]#mi#R#mi#o#mi#p#mi#q#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi'y#mi(q#mi(x#mi(y#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#n#mi~P#2wO#n$OO~P#2wOP$[OR#zOr$aO!Q#yO!S#{O!l#xO!p$[O#n$OO#o$PO#p$PO#q$PO(`VO[#mia#mij#mi!]#mi#R#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi'y#mi(q#mi(x#mi(y#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#r#mi~P#5fO#r$QO~P#5fOP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO(`VOa#mi!]#mi#x#mi#z#mi#{#mi'y#mi(q#mi(x#mi(y#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#v#mi~P#8TOP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO(`VO(y#}Oa#mi!]#mi#z#mi#{#mi'y#mi(q#mi(x#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#x$UO~P#:kO#x#mi~P#:kO#v$SO~P#8TOP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO(`VO(x#|O(y#}Oa#mi!]#mi#{#mi'y#mi(q#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#z#mi~P#=aO#z$WO~P#=aOP]XR]X[]Xj]Xr]X!Q]X!S]X!l]X!p]X#R]X#S]X#`]X#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X(`]X(q]X(x]X(y]X!]]X!^]X~O$O]X~P#@OOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O#v<TO#x<VO#z<XO#{<YO(`VO(q$YO(x#|O(y#}O~O$O.vO~P#B]O#S$dO#`<`O$Q<`O$O(fX!^(fX~P! jOa'ca!]'ca'y'ca'v'ca!k'ca!Y'cav'ca!_'ca%i'ca!g'ca~P!:aO[#mia#mij#mir#mi!]#mi#R#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi'y#mi(q#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O#n$OO#o$PO#p$PO#q$PO(`VO(x#mi(y#mi~P#E_On=|O!Q)|O'x)}O(x$}O(y%POP#miR#mi!S#mi!l#mi!p#mi#n#mi#o#mi#p#mi#q#mi(`#mi~P#E_O!].zOg(oX~P!0{Og.|O~Oa$Pi!]$Pi'y$Pi'v$Pi!Y$Pi!k$Piv$Pi!_$Pi%i$Pi!g$Pi~P!:aO$].}O$_.}O~O$]/OO$_/OO~O!g)fO#`/PO!_$cX$Z$cX$]$cX$_$cX$f$cX~O![/QO~O!_)iO$Z/SO$])hO$_)hO$f/TO~O!]<ZO!^(eX~P#B]O!^/UO~O!g)fO$f(zX~O$f/WO~Ov/XO~P!&oOx)wO(a)xO(b/[O~O!S/_O~O(x$}On%aa!Q%aa'x%aa(y%aa!]%aa#`%aa~Og%aa$O%aa~P#LaO(y%POn%ca!Q%ca'x%ca(x%ca!]%ca#`%ca~Og%ca$O%ca~P#MSO!]fX!gfX!kfX!k$zX(qfX~P!/wO![/hO!]([O(S/gO!Y(uP!Y)OP~P!1jOr*pO!b*nO!c*hO!d*hO!l*_O#[*oO%`*jO(T!lO(UTO(XUO~Os<oO!S/iO![+XO!^*mO(d<nO!^(wP~P#NmO!k/jO~P#/XO!]/kO!g#vO(q'nO!k(}X~O!k/pO~O!S%gO![*[O!_%hO(S%fO!k(}P~O#k/rO~O!Y$zX!]$zX!g%RX~P!/wO!]/sO!Y)OX~P#/XO!g/uO~O!Y/wO~OpkO(S/xO~P.iOh%VOr/}O!g#vO!l%dO(q'nO~O!g+fO~Oa%mO!]0RO'y%mO~O!^0TO~P!5^O!c0UO!d0UO(T!lO~P##tOs!nO!S0VO(UTO(XUO(d!mO~O#[0XO~Og%aa!]%aa#`%aa$O%aa~P!0{Og%ca!]%ca#`%ca$O%ca~P!0{Oj%cOk%cOl%cO(S&XOg'lX!]'lX~O!]*vOg(]a~Og0bO~OR0cO!Q0cO!S0dO#S$dOn}a'x}a(x}a(y}a!]}a#`}a~Og}a$O}a~P$&vO!Q)|O'x)}On$sa(x$sa(y$sa!]$sa#`$sa~Og$sa$O$sa~P$'rO!Q)|O'x)}On$ua(x$ua(y$ua!]$ua#`$ua~Og$ua$O$ua~P$(eO#k0gO~Og%Ta!]%Ta#`%Ta$O%Ta~P!0{On0iO#`0hOg(^a!](^a~O!g#vO~O#k0lO~O!]+ZOa)Sa'y)Sa~OR#zO!Q#yO!S#{O!l#xO(`VOP!ri[!rij!rir!ri!]!ri!p!ri#R!ri#n!ri#o!ri#p!ri#q!ri#r!ri#s!ri#t!ri#u!ri#v!ri#x!ri#z!ri#{!ri(q!ri(x!ri(y!ri~Oa!ri'y!ri'v!ri!Y!ri!k!riv!ri!_!ri%i!ri!g!ri~P$*bOh%VOr%XOs$tOt$tOz%YO|%ZO!O<eO!S${O!_$|O!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(UTO(XUO(`$uO(x$}O(y%PO~Op0uO%]0vO(S0tO~P$,xO!g+fOa([a!_([a'y([a!]([a~O#k0|O~O[]X!]fX!^fX~O!]0}O!^)WX~O!^1PO~O[1QO~Ob1SO(S+nO(UTO(XUO~O!_&OO(S%fO`'tX!]'tX~O!]+sO`)Va~O!k1VO~P!:aO[1YO~O`1ZO~O#`1^O~On1aO!_$|O~O(d(zO!^)TP~Oh%VOn1jO!_1gO%i1iO~O[1tO!]1rO!^)UX~O!^1uO~O`1wOa%mO'y%mO~O(S#nO(UTO(XUO~O#S$dO#`$eO$Q$eOP(fXR(fX[(fXr(fX!Q(fX!S(fX!](fX!l(fX!p(fX#R(fX#n(fX#o(fX#p(fX#q(fX#r(fX#s(fX#t(fX#u(fX#v(fX#x(fX#z(fX#{(fX(`(fX(q(fX(x(fX(y(fX~Oj1zO&Z1{Oa(fX~P$2cOj1zO#`$eO&Z1{O~Oa1}O~P%[Oa2PO~O&d2SOP&biQ&biS&biY&bia&bid&bie&bil&bip&bir&bis&bit&biz&bi|&bi!O&bi!S&bi!W&bi!X&bi!_&bi!i&bi!l&bi!o&bi!p&bi!q&bi!s&bi!u&bi!x&bi!|&bi$W&bi$n&bi%h&bi%j&bi%l&bi%m&bi%n&bi%q&bi%s&bi%v&bi%w&bi%y&bi&V&bi&]&bi&_&bi&a&bi&c&bi&f&bi&l&bi&r&bi&t&bi&v&bi&x&bi&z&bi'v&bi(S&bi(U&bi(X&bi(`&bi(n&bi!^&bib&bi&i&bi~Ob2YO!^2WO&i2XO~P`O!_XO!l2[O~O&p,vOP&kiQ&kiS&kiY&kia&kid&kie&kil&kip&kir&kis&kit&kiz&ki|&ki!O&ki!S&ki!W&ki!X&ki!_&ki!i&ki!l&ki!o&ki!p&ki!q&ki!s&ki!u&ki!x&ki!|&ki$W&ki$n&ki%h&ki%j&ki%l&ki%m&ki%n&ki%q&ki%s&ki%v&ki%w&ki%y&ki&V&ki&]&ki&_&ki&a&ki&c&ki&f&ki&l&ki&r&ki&t&ki&v&ki&x&ki&z&ki'v&ki(S&ki(U&ki(X&ki(`&ki(n&ki!^&ki&d&kib&ki&i&ki~O!Y2bO~O!]!aa!^!aa~P#B]Os!nO!S!oO![2hO(d!mO!]'WX!^'WX~P@cO!]-WO!^(ha~O!]'^X!^'^X~P!9iO!]-ZO!^(wa~O!^2oO~P'_Oa%mO#`2xO'y%mO~Oa%mO!g#vO#`2xO'y%mO~Oa%mO!g#vO!p2|O#`2xO'y%mO(q'nO~Oa%mO'y%mO~P!:aO!]$_Ov$qa~O!Y'Vi!]'Vi~P!:aO!](TO!Y(gi~O!]([O!Y(ui~O!Y(vi!](vi~P!:aO!](si!k(sia(si'y(si~P!:aO#`3OO!](si!k(sia(si'y(si~O!](hO!k(ri~O!S%gO!_%hO!|]O#i3TO#j3SO(S%fO~O!S%gO!_%hO#j3SO(S%fO~On3[O!_'^O%i3ZO~Oh%VOn3[O!_'^O%i3ZO~O#k%aaP%aaR%aa[%aaa%aaj%aar%aa!S%aa!l%aa!p%aa#R%aa#n%aa#o%aa#p%aa#q%aa#r%aa#s%aa#t%aa#u%aa#v%aa#x%aa#z%aa#{%aa'y%aa(`%aa(q%aa!k%aa!Y%aa'v%aav%aa!_%aa%i%aa!g%aa~P#LaO#k%caP%caR%ca[%caa%caj%car%ca!S%ca!l%ca!p%ca#R%ca#n%ca#o%ca#p%ca#q%ca#r%ca#s%ca#t%ca#u%ca#v%ca#x%ca#z%ca#{%ca'y%ca(`%ca(q%ca!k%ca!Y%ca'v%cav%ca!_%ca%i%ca!g%ca~P#MSO#k%aaP%aaR%aa[%aaa%aaj%aar%aa!S%aa!]%aa!l%aa!p%aa#R%aa#n%aa#o%aa#p%aa#q%aa#r%aa#s%aa#t%aa#u%aa#v%aa#x%aa#z%aa#{%aa'y%aa(`%aa(q%aa!k%aa!Y%aa'v%aa#`%aav%aa!_%aa%i%aa!g%aa~P#/XO#k%caP%caR%ca[%caa%caj%car%ca!S%ca!]%ca!l%ca!p%ca#R%ca#n%ca#o%ca#p%ca#q%ca#r%ca#s%ca#t%ca#u%ca#v%ca#x%ca#z%ca#{%ca'y%ca(`%ca(q%ca!k%ca!Y%ca'v%ca#`%cav%ca!_%ca%i%ca!g%ca~P#/XO#k}aP}a[}aa}aj}ar}a!l}a!p}a#R}a#n}a#o}a#p}a#q}a#r}a#s}a#t}a#u}a#v}a#x}a#z}a#{}a'y}a(`}a(q}a!k}a!Y}a'v}av}a!_}a%i}a!g}a~P$&vO#k$saP$saR$sa[$saa$saj$sar$sa!S$sa!l$sa!p$sa#R$sa#n$sa#o$sa#p$sa#q$sa#r$sa#s$sa#t$sa#u$sa#v$sa#x$sa#z$sa#{$sa'y$sa(`$sa(q$sa!k$sa!Y$sa'v$sav$sa!_$sa%i$sa!g$sa~P$'rO#k$uaP$uaR$ua[$uaa$uaj$uar$ua!S$ua!l$ua!p$ua#R$ua#n$ua#o$ua#p$ua#q$ua#r$ua#s$ua#t$ua#u$ua#v$ua#x$ua#z$ua#{$ua'y$ua(`$ua(q$ua!k$ua!Y$ua'v$uav$ua!_$ua%i$ua!g$ua~P$(eO#k%TaP%TaR%Ta[%Taa%Taj%Tar%Ta!S%Ta!]%Ta!l%Ta!p%Ta#R%Ta#n%Ta#o%Ta#p%Ta#q%Ta#r%Ta#s%Ta#t%Ta#u%Ta#v%Ta#x%Ta#z%Ta#{%Ta'y%Ta(`%Ta(q%Ta!k%Ta!Y%Ta'v%Ta#`%Tav%Ta!_%Ta%i%Ta!g%Ta~P#/XOa#cq!]#cq'y#cq'v#cq!Y#cq!k#cqv#cq!_#cq%i#cq!g#cq~P!:aO![3dO!]'XX!k'XX~P%[O!].oO!k(ja~O!].oO!k(ja~P!:aO!Y3gO~O$O!na!^!na~PKaO$O!ja!]!ja!^!ja~P#B]O$O!ra!^!ra~P!<wO$O!ta!^!ta~P!?_Og'[X!]'[X~P!+xO!].zOg(oa~OSfO!_3{O$d3|O~O!^4QO~Ov4RO~P#/XOa$mq!]$mq'y$mq'v$mq!Y$mq!k$mqv$mq!_$mq%i$mq!g$mq~P!:aO!Y4TO~P!&oO!S4UO~O!Q)|O'x)}O(y%POn'ha(x'ha!]'ha#`'ha~Og'ha$O'ha~P%,XO!Q)|O'x)}On'ja(x'ja(y'ja!]'ja#`'ja~Og'ja$O'ja~P%,zO(q$YO~P#/XO!YfX!Y$zX!]fX!]$zX!g%RX#`fX~P!/wO(S<xO~P!1jO!S%gO![4XO!_%hO(S%fO!]'dX!k'dX~O!]/kO!k(}a~O!]/kO!g#vO!k(}a~O!]/kO!g#vO(q'nO!k(}a~Og$|i!]$|i#`$|i$O$|i~P!0{O![4aO!Y'fX!]'fX~P!3iO!]/sO!Y)Oa~O!]/sO!Y)Oa~P#/XOP]XR]X[]Xj]Xr]X!Q]X!S]X!Y]X!]]X!l]X!p]X#R]X#S]X#`]X#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X(`]X(q]X(x]X(y]X~Oj%YX!g%YX~P%0kOj4fO!g#vO~Oh%VO!g#vO!l%dO~Oh%VOr4kO!l%dO(q'nO~Or4pO!g#vO(q'nO~Os!nO!S4qO(UTO(XUO(d!mO~O(x$}On%ai!Q%ai'x%ai(y%ai!]%ai#`%ai~Og%ai$O%ai~P%4[O(y%POn%ci!Q%ci'x%ci(x%ci!]%ci#`%ci~Og%ci$O%ci~P%4}Og(^i!](^i~P!0{O#`4wOg(^i!](^i~P!0{O!k4zO~Oa$oq!]$oq'y$oq'v$oq!Y$oq!k$oqv$oq!_$oq%i$oq!g$oq~P!:aO!Y5QO~O!]5RO!_)PX~P#/XOa$zX!_$zX%^]X'y$zX!]$zX~P!/wO%^5UOaoXnoX!QoX!_oX'xoX'yoX(xoX(yoX!]oX~Op5VO(S#nO~O%^5UO~Ob5]O%j5^O(S+nO(UTO(XUO!]'sX!^'sX~O!]0}O!^)Wa~O[5bO~O`5cO~Oa%mO'y%mO~P#/XO!]5kO#`5mO!^)TX~O!^5nO~Or5tOs!nO!S*fO!b!yO!c!vO!d!vO!|;wO#T!pO#U!pO#V!pO#W!pO#X!pO#[5sO#]!zO(T!lO(UTO(XUO(d!mO(n!sO~O!^5rO~P%:YOn5yO!_1gO%i5xO~Oh%VOn5yO!_1gO%i5xO~Ob6QO(S#nO(UTO(XUO!]'rX!^'rX~O!]1rO!^)Ua~O(UTO(XUO(d6SO~O`6WO~Oj6ZO&Z6[O~PM|O!k6]O~P%[Oa6_O~Oa6_O~P%[Ob2YO!^6dO&i2XO~P`O!g6fO~O!g6hOh(ii!](ii!^(ii!g(ii!l(iir(ii(q(ii~O!]#hi!^#hi~P#B]O#`6iO!]#hi!^#hi~O!]!ai!^!ai~P#B]Oa%mO#`6rO'y%mO~Oa%mO!g#vO#`6rO'y%mO~O!](sq!k(sqa(sq'y(sq~P!:aO!](hO!k(rq~O!S%gO!_%hO#j6yO(S%fO~O!_'^O%i6|O~On7QO!_'^O%i6|O~O#k'haP'haR'ha['haa'haj'har'ha!S'ha!l'ha!p'ha#R'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#t'ha#u'ha#v'ha#x'ha#z'ha#{'ha'y'ha(`'ha(q'ha!k'ha!Y'ha'v'hav'ha!_'ha%i'ha!g'ha~P%,XO#k'jaP'jaR'ja['jaa'jaj'jar'ja!S'ja!l'ja!p'ja#R'ja#n'ja#o'ja#p'ja#q'ja#r'ja#s'ja#t'ja#u'ja#v'ja#x'ja#z'ja#{'ja'y'ja(`'ja(q'ja!k'ja!Y'ja'v'jav'ja!_'ja%i'ja!g'ja~P%,zO#k$|iP$|iR$|i[$|ia$|ij$|ir$|i!S$|i!]$|i!l$|i!p$|i#R$|i#n$|i#o$|i#p$|i#q$|i#r$|i#s$|i#t$|i#u$|i#v$|i#x$|i#z$|i#{$|i'y$|i(`$|i(q$|i!k$|i!Y$|i'v$|i#`$|iv$|i!_$|i%i$|i!g$|i~P#/XO#k%aiP%aiR%ai[%aia%aij%air%ai!S%ai!l%ai!p%ai#R%ai#n%ai#o%ai#p%ai#q%ai#r%ai#s%ai#t%ai#u%ai#v%ai#x%ai#z%ai#{%ai'y%ai(`%ai(q%ai!k%ai!Y%ai'v%aiv%ai!_%ai%i%ai!g%ai~P%4[O#k%ciP%ciR%ci[%cia%cij%cir%ci!S%ci!l%ci!p%ci#R%ci#n%ci#o%ci#p%ci#q%ci#r%ci#s%ci#t%ci#u%ci#v%ci#x%ci#z%ci#{%ci'y%ci(`%ci(q%ci!k%ci!Y%ci'v%civ%ci!_%ci%i%ci!g%ci~P%4}O!]'Xa!k'Xa~P!:aO!].oO!k(ji~O$O#ci!]#ci!^#ci~P#B]OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O(`VO[#mij#mir#mi#R#mi#o#mi#p#mi#q#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi$O#mi(q#mi(x#mi(y#mi!]#mi!^#mi~O#n#mi~P%MXO#n<PO~P%MXOP$[OR#zOr<]O!Q#yO!S#{O!l#xO!p$[O#n<PO#o<QO#p<QO#q<QO(`VO[#mij#mi#R#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi$O#mi(q#mi(x#mi(y#mi!]#mi!^#mi~O#r#mi~P& aO#r<RO~P& aOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O(`VO#x#mi#z#mi#{#mi$O#mi(q#mi(x#mi(y#mi!]#mi!^#mi~O#v#mi~P&#iOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O#v<TO(`VO(y#}O#z#mi#{#mi$O#mi(q#mi(x#mi!]#mi!^#mi~O#x<VO~P&%jO#x#mi~P&%jO#v<TO~P&#iOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O#v<TO#x<VO(`VO(x#|O(y#}O#{#mi$O#mi(q#mi!]#mi!^#mi~O#z#mi~P&'yO#z<XO~P&'yOa#|y!]#|y'y#|y'v#|y!Y#|y!k#|yv#|y!_#|y%i#|y!g#|y~P!:aO[#mij#mir#mi#R#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi$O#mi(q#mi!]#mi!^#mi~OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O#n<PO#o<QO#p<QO#q<QO(`VO(x#mi(y#mi~P&*uOn=}O!Q)|O'x)}O(x$}O(y%POP#miR#mi!S#mi!l#mi!p#mi#n#mi#o#mi#p#mi#q#mi(`#mi~P&*uO#S$dOP(_XR(_X[(_Xj(_Xn(_Xr(_X!Q(_X!S(_X!l(_X!p(_X#R(_X#n(_X#o(_X#p(_X#q(_X#r(_X#s(_X#t(_X#u(_X#v(_X#x(_X#z(_X#{(_X$O(_X'x(_X(`(_X(q(_X(x(_X(y(_X!](_X!^(_X~O$O$Pi!]$Pi!^$Pi~P#B]O$O!ri!^!ri~P$*bOg'[a!]'[a~P!0{O!^7dO~O!]'ca!^'ca~P#B]O!Y7eO~P#/XO!g#vO(q'nO!]'da!k'da~O!]/kO!k(}i~O!]/kO!g#vO!k(}i~Og$|q!]$|q#`$|q$O$|q~P!0{O!Y'fa!]'fa~P#/XO!g7lO~O!]/sO!Y)Oi~P#/XO!]/sO!Y)Oi~O!Y7oO~Oh%VOr7tO!l%dO(q'nO~Oj7vO!g#vO~Or7yO!g#vO(q'nO~O!Q)|O'x)}O(y%POn'ia(x'ia!]'ia#`'ia~Og'ia$O'ia~P&3vO!Q)|O'x)}On'ka(x'ka(y'ka!]'ka#`'ka~Og'ka$O'ka~P&4iO!Y7{O~Og%Oq!]%Oq#`%Oq$O%Oq~P!0{Og(^q!](^q~P!0{O#`7|Og(^q!](^q~P!0{Oa$oy!]$oy'y$oy'v$oy!Y$oy!k$oyv$oy!_$oy%i$oy!g$oy~P!:aO!g6hO~O!]5RO!_)Pa~O!_'^OP$TaR$Ta[$Taj$Tar$Ta!Q$Ta!S$Ta!]$Ta!l$Ta!p$Ta#R$Ta#n$Ta#o$Ta#p$Ta#q$Ta#r$Ta#s$Ta#t$Ta#u$Ta#v$Ta#x$Ta#z$Ta#{$Ta(`$Ta(q$Ta(x$Ta(y$Ta~O%i6|O~P&7ZO%^8QOa%[i!_%[i'y%[i!]%[i~Oa#cy!]#cy'y#cy'v#cy!Y#cy!k#cyv#cy!_#cy%i#cy!g#cy~P!:aO[8SO~Ob8UO(S+nO(UTO(XUO~O!]0}O!^)Wi~O`8YO~O(d(zO!]'oX!^'oX~O!]5kO!^)Ta~O!^8cO~P%:YO(n!sO~P$${O#[8dO~O!_1gO~O!_1gO%i8fO~On8iO!_1gO%i8fO~O[8nO!]'ra!^'ra~O!]1rO!^)Ui~O!k8rO~O!k8sO~O!k8vO~O!k8vO~P%[Oa8xO~O!g8yO~O!k8zO~O!](vi!^(vi~P#B]Oa%mO#`9SO'y%mO~O!](sy!k(sya(sy'y(sy~P!:aO!](hO!k(ry~O%i9VO~P&7ZO!_'^O%i9VO~O#k$|qP$|qR$|q[$|qa$|qj$|qr$|q!S$|q!]$|q!l$|q!p$|q#R$|q#n$|q#o$|q#p$|q#q$|q#r$|q#s$|q#t$|q#u$|q#v$|q#x$|q#z$|q#{$|q'y$|q(`$|q(q$|q!k$|q!Y$|q'v$|q#`$|qv$|q!_$|q%i$|q!g$|q~P#/XO#k'iaP'iaR'ia['iaa'iaj'iar'ia!S'ia!l'ia!p'ia#R'ia#n'ia#o'ia#p'ia#q'ia#r'ia#s'ia#t'ia#u'ia#v'ia#x'ia#z'ia#{'ia'y'ia(`'ia(q'ia!k'ia!Y'ia'v'iav'ia!_'ia%i'ia!g'ia~P&3vO#k'kaP'kaR'ka['kaa'kaj'kar'ka!S'ka!l'ka!p'ka#R'ka#n'ka#o'ka#p'ka#q'ka#r'ka#s'ka#t'ka#u'ka#v'ka#x'ka#z'ka#{'ka'y'ka(`'ka(q'ka!k'ka!Y'ka'v'kav'ka!_'ka%i'ka!g'ka~P&4iO#k%OqP%OqR%Oq[%Oqa%Oqj%Oqr%Oq!S%Oq!]%Oq!l%Oq!p%Oq#R%Oq#n%Oq#o%Oq#p%Oq#q%Oq#r%Oq#s%Oq#t%Oq#u%Oq#v%Oq#x%Oq#z%Oq#{%Oq'y%Oq(`%Oq(q%Oq!k%Oq!Y%Oq'v%Oq#`%Oqv%Oq!_%Oq%i%Oq!g%Oq~P#/XO!]'Xi!k'Xi~P!:aO$O#cq!]#cq!^#cq~P#B]O(x$}OP%aaR%aa[%aaj%aar%aa!S%aa!l%aa!p%aa#R%aa#n%aa#o%aa#p%aa#q%aa#r%aa#s%aa#t%aa#u%aa#v%aa#x%aa#z%aa#{%aa$O%aa(`%aa(q%aa!]%aa!^%aa~On%aa!Q%aa'x%aa(y%aa~P&HnO(y%POP%caR%ca[%caj%car%ca!S%ca!l%ca!p%ca#R%ca#n%ca#o%ca#p%ca#q%ca#r%ca#s%ca#t%ca#u%ca#v%ca#x%ca#z%ca#{%ca$O%ca(`%ca(q%ca!]%ca!^%ca~On%ca!Q%ca'x%ca(x%ca~P&JuOn=}O!Q)|O'x)}O(y%PO~P&HnOn=}O!Q)|O'x)}O(x$}O~P&JuOR0cO!Q0cO!S0dO#S$dOP}a[}aj}an}ar}a!l}a!p}a#R}a#n}a#o}a#p}a#q}a#r}a#s}a#t}a#u}a#v}a#x}a#z}a#{}a$O}a'x}a(`}a(q}a(x}a(y}a!]}a!^}a~O!Q)|O'x)}OP$saR$sa[$saj$san$sar$sa!S$sa!l$sa!p$sa#R$sa#n$sa#o$sa#p$sa#q$sa#r$sa#s$sa#t$sa#u$sa#v$sa#x$sa#z$sa#{$sa$O$sa(`$sa(q$sa(x$sa(y$sa!]$sa!^$sa~O!Q)|O'x)}OP$uaR$ua[$uaj$uan$uar$ua!S$ua!l$ua!p$ua#R$ua#n$ua#o$ua#p$ua#q$ua#r$ua#s$ua#t$ua#u$ua#v$ua#x$ua#z$ua#{$ua$O$ua(`$ua(q$ua(x$ua(y$ua!]$ua!^$ua~On=}O!Q)|O'x)}O(x$}O(y%PO~OP%TaR%Ta[%Taj%Tar%Ta!S%Ta!l%Ta!p%Ta#R%Ta#n%Ta#o%Ta#p%Ta#q%Ta#r%Ta#s%Ta#t%Ta#u%Ta#v%Ta#x%Ta#z%Ta#{%Ta$O%Ta(`%Ta(q%Ta!]%Ta!^%Ta~P'%zO$O$mq!]$mq!^$mq~P#B]O$O$oq!]$oq!^$oq~P#B]O!^9dO~O$O9eO~P!0{O!g#vO!]'di!k'di~O!g#vO(q'nO!]'di!k'di~O!]/kO!k(}q~O!Y'fi!]'fi~P#/XO!]/sO!Y)Oq~Or9lO!g#vO(q'nO~O[9nO!Y9mO~P#/XO!Y9mO~Oj9tO!g#vO~Og(^y!](^y~P!0{O!]'ma!_'ma~P#/XOa%[q!_%[q'y%[q!]%[q~P#/XO[9yO~O!]0}O!^)Wq~O#`9}O!]'oa!^'oa~O!]5kO!^)Ti~P#B]O!S:PO~O!_1gO%i:SO~O(UTO(XUO(d:XO~O!]1rO!^)Uq~O!k:[O~O!k:]O~O!k:^O~O!k:^O~P%[O#`:aO!]#hy!^#hy~O!]#hy!^#hy~P#B]O%i:fO~P&7ZO!_'^O%i:fO~O$O#|y!]#|y!^#|y~P#B]OP$|iR$|i[$|ij$|ir$|i!S$|i!l$|i!p$|i#R$|i#n$|i#o$|i#p$|i#q$|i#r$|i#s$|i#t$|i#u$|i#v$|i#x$|i#z$|i#{$|i$O$|i(`$|i(q$|i!]$|i!^$|i~P'%zO!Q)|O'x)}O(y%POP'haR'ha['haj'han'har'ha!S'ha!l'ha!p'ha#R'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#t'ha#u'ha#v'ha#x'ha#z'ha#{'ha$O'ha(`'ha(q'ha(x'ha!]'ha!^'ha~O!Q)|O'x)}OP'jaR'ja['jaj'jan'jar'ja!S'ja!l'ja!p'ja#R'ja#n'ja#o'ja#p'ja#q'ja#r'ja#s'ja#t'ja#u'ja#v'ja#x'ja#z'ja#{'ja$O'ja(`'ja(q'ja(x'ja(y'ja!]'ja!^'ja~O(x$}OP%aiR%ai[%aij%ain%air%ai!Q%ai!S%ai!l%ai!p%ai#R%ai#n%ai#o%ai#p%ai#q%ai#r%ai#s%ai#t%ai#u%ai#v%ai#x%ai#z%ai#{%ai$O%ai'x%ai(`%ai(q%ai(y%ai!]%ai!^%ai~O(y%POP%ciR%ci[%cij%cin%cir%ci!Q%ci!S%ci!l%ci!p%ci#R%ci#n%ci#o%ci#p%ci#q%ci#r%ci#s%ci#t%ci#u%ci#v%ci#x%ci#z%ci#{%ci$O%ci'x%ci(`%ci(q%ci(x%ci!]%ci!^%ci~O$O$oy!]$oy!^$oy~P#B]O$O#cy!]#cy!^#cy~P#B]O!g#vO!]'dq!k'dq~O!]/kO!k(}y~O!Y'fq!]'fq~P#/XOr:pO!g#vO(q'nO~O[:tO!Y:sO~P#/XO!Y:sO~Og(^!R!](^!R~P!0{Oa%[y!_%[y'y%[y!]%[y~P#/XO!]0}O!^)Wy~O!]5kO!^)Tq~O(S:zO~O!_1gO%i:}O~O!k;QO~O%i;VO~P&7ZOP$|qR$|q[$|qj$|qr$|q!S$|q!l$|q!p$|q#R$|q#n$|q#o$|q#p$|q#q$|q#r$|q#s$|q#t$|q#u$|q#v$|q#x$|q#z$|q#{$|q$O$|q(`$|q(q$|q!]$|q!^$|q~P'%zO!Q)|O'x)}O(y%POP'iaR'ia['iaj'ian'iar'ia!S'ia!l'ia!p'ia#R'ia#n'ia#o'ia#p'ia#q'ia#r'ia#s'ia#t'ia#u'ia#v'ia#x'ia#z'ia#{'ia$O'ia(`'ia(q'ia(x'ia!]'ia!^'ia~O!Q)|O'x)}OP'kaR'ka['kaj'kan'kar'ka!S'ka!l'ka!p'ka#R'ka#n'ka#o'ka#p'ka#q'ka#r'ka#s'ka#t'ka#u'ka#v'ka#x'ka#z'ka#{'ka$O'ka(`'ka(q'ka(x'ka(y'ka!]'ka!^'ka~OP%OqR%Oq[%Oqj%Oqr%Oq!S%Oq!l%Oq!p%Oq#R%Oq#n%Oq#o%Oq#p%Oq#q%Oq#r%Oq#s%Oq#t%Oq#u%Oq#v%Oq#x%Oq#z%Oq#{%Oq$O%Oq(`%Oq(q%Oq!]%Oq!^%Oq~P'%zOg%e!Z!]%e!Z#`%e!Z$O%e!Z~P!0{O!Y;ZO~P#/XOr;[O!g#vO(q'nO~O[;^O!Y;ZO~P#/XO!]'oq!^'oq~P#B]O!]#h!Z!^#h!Z~P#B]O#k%e!ZP%e!ZR%e!Z[%e!Za%e!Zj%e!Zr%e!Z!S%e!Z!]%e!Z!l%e!Z!p%e!Z#R%e!Z#n%e!Z#o%e!Z#p%e!Z#q%e!Z#r%e!Z#s%e!Z#t%e!Z#u%e!Z#v%e!Z#x%e!Z#z%e!Z#{%e!Z'y%e!Z(`%e!Z(q%e!Z!k%e!Z!Y%e!Z'v%e!Z#`%e!Zv%e!Z!_%e!Z%i%e!Z!g%e!Z~P#/XOr;fO!g#vO(q'nO~O!Y;gO~P#/XOr;nO!g#vO(q'nO~O!Y;oO~P#/XOP%e!ZR%e!Z[%e!Zj%e!Zr%e!Z!S%e!Z!l%e!Z!p%e!Z#R%e!Z#n%e!Z#o%e!Z#p%e!Z#q%e!Z#r%e!Z#s%e!Z#t%e!Z#u%e!Z#v%e!Z#x%e!Z#z%e!Z#{%e!Z$O%e!Z(`%e!Z(q%e!Z!]%e!Z!^%e!Z~P'%zOr;rO!g#vO(q'nO~Ov(eX~P1qO!Q%qO~P!)PO(T!lO~P!)PO!YfX!]fX#`fX~P%0kOP]XR]X[]Xj]Xr]X!Q]X!S]X!]]X!]fX!l]X!p]X#R]X#S]X#`]X#`fX#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X(`]X(q]X(x]X(y]X~O!gfX!k]X!kfX(qfX~P'JsOP;vOQ;vOSfOd=rOe!iOpkOr;vOskOtkOzkO|;vO!O;vO!SWO!WkO!XkO!_XO!i;yO!lZO!o;vO!p;vO!q;vO!s;zO!u;}O!x!hO$W!kO$n=pO(S)ZO(UTO(XUO(`VO(n[O~O!]<ZO!^$qa~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<fO!S${O!_$|O!i=wO!l$xO#j<lO$W%_O$t<hO$v<jO$y%`O(S(tO(UTO(XUO(`$uO(x$}O(y%PO~Ol)bO~P( iOr!eX(q!eX~P# }Or(iX(q(iX~P#!pO!^]X!^fX~P'JsO!YfX!Y$zX!]fX!]$zX#`fX~P!/wO#k<OO~O!g#vO#k<OO~O#`<`O~Oj<SO~O#`<pO!](vX!^(vX~O#`<`O!](tX!^(tX~O#k<qO~Og<sO~P!0{O#k<yO~O#k<zO~O!g#vO#k<{O~O!g#vO#k<qO~O$O<|O~P#B]O#k<}O~O#k=OO~O#k=TO~O#k=UO~O#k=VO~O#k=WO~O$O=XO~P!0{O$O=YO~P!0{Ok#S#T#U#W#X#[#i#j#u$n$t$v$y%]%^%h%i%j%q%s%v%w%y%{~'}T#o!X'{(T#ps#n#qr!Q'|$]'|(S$_(d~\",\n  goto: \"$8g)[PPPPPP)]PP)`P)qP+R/WPPPP6bPP6xPP<pPPP@dP@zP@zPPP@zPCSP@zP@zP@zPCWPC]PCzPHtPPPHxPPPPHxK{PPPLRLsPHxPHxPP! RHxPPPHxPHxP!#YHxP!&p!'u!(OP!(r!(v!(r!,TPPPPPPP!,t!'uPP!-U!.vP!2SHxHx!2X!5e!:R!:R!>QPPP!>YHxPPPPPPPPP!AiP!BvPPHx!DXPHxPHxHxHxHxHxPHx!EkP!HuP!K{P!LP!LZ!L_!L_P!HrP!Lc!LcP# iP# mHxPHx# s#$xCW@zP@zP@z@zP#&V@z@z#(i@z#+a@z#-m@z@z#.]#0q#0q#0v#1P#0q#1[PP#0qP@z#1t@z#5s@z@z6bPPP#9xPPP#:c#:cP#:cP#:y#:cPP#;PP#:vP#:v#;d#:v#<O#<U#<X)`#<[)`P#<c#<c#<cP)`P)`P)`P)`PP)`P#<i#<lP#<l)`P#<pP#<sP)`P)`P)`P)`P)`P)`)`PP#<y#=P#=[#=b#=h#=n#=t#>S#>Y#>d#>j#>t#>z#?[#?b#@S#@f#@l#@r#AQ#Ag#C[#Cj#Cq#E]#Ek#G]#Gk#Gq#Gw#G}#HX#H_#He#Ho#IR#IXPPPPPPPPPPP#I_PPPPPPP#JS#MZ#Ns#Nz$ SPPP$&nP$&w$)p$0Z$0^$0a$1`$1c$1j$1rP$1x$1{P$2i$2m$3e$4s$4x$5`PP$5e$5k$5o$5r$5v$5z$6v$7_$7v$7z$7}$8Q$8W$8Z$8_$8cR!|RoqOXst!Z#d%l&p&r&s&u,n,s2S2VY!vQ'^-`1g5qQ%svQ%{yQ&S|Q&h!VS'U!e-WQ'd!iS'j!r!yU*h$|*X*lQ+l%|Q+y&UQ,_&bQ-^']Q-h'eQ-p'kQ0U*nQ1q,`R<m;z%SdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y,k,n,s-d-l-z.Q.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3d4q5y6Z6[6_6r8i8x9SS#q];w!r)]$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sU*{%[<e<fQ+q&OQ,a&eQ,h&mQ0r+dQ0w+fQ1S+rQ1y,fQ3W.bQ5V0vQ5]0}Q6Q1rQ7O3[Q8U5^R9Y7Q'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s!S!nQ!r!v!y!z$|'U']'^'j'k'l*h*l*n*o-W-^-`-p0U0X1g5q5s%[$ti#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}Q&V|Q'S!eS'Y%h-ZQ+q&OQ,a&eQ0f+OQ1S+rQ1X+xQ1x,eQ1y,fQ5]0}Q5f1ZQ6Q1rQ6T1tQ6U1wQ8U5^Q8X5cQ8q6WQ9|8YQ:Y8nR<o*XrnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VR,c&i&z^OPXYstuvwz!Z!`!g!j!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=r=s[#]WZ#W#Z'V(R!b%im#h#i#l$x%d%g([(f(g(h*W*[*_+W+X+Z,j-Q.O.U.V.W.Y/h/k2[3S3T4X6h6yQ%vxQ%zyS&P|&UQ&]!TQ'a!hQ'c!iQ(o#sS+k%{%|Q+o&OQ,Y&`Q,^&bS-g'd'eQ.d(pQ0{+lQ1R+rQ1T+sQ1W+wQ1l,ZS1p,_,`Q2t-hQ5[0}Q5`1QQ5e1YQ6P1qQ8T5^Q8W5bQ9x8SR:w9y!U$zi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y!^%xy!i!u%z%{%|'T'c'd'e'i's*g+k+l-T-g-h-o/{0O0{2m2t2{4i4j4m7s9pQ+e%vQ,O&YQ,R&ZQ,]&bQ.c(oQ1k,YU1o,^,_,`Q3].dQ5z1lS6O1p1qQ8m6P#f=t#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}o=u<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YW%Ti%V*v=pS&Y!Q&gQ&Z!RQ&[!SQ+S%cR+|&W%]%Si#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}T)x$u)yV*{%[<e<fW'Y!e%h*X-ZS({#y#zQ+`%qQ+v&RS.](k(lQ1b,SQ4x0cR8^5k'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s$i$^c#Y#e%p%r%t(Q(W(r(w)P)Q)R)S)T)U)V)W)X)Y)[)^)`)e)o+a+u-U-s-x-}.P.n.q.u.w.x.y/]0j2c2f2v2}3c3h3i3j3k3l3m3n3o3p3q3r3s3t3w3x4P5O5Y6k6q6v7V7W7a7b8`8|9Q9[9b9c:c:y;R;x=gT#TV#U'RkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ'W!eR2i-W!W!nQ!e!r!v!y!z$|'U']'^'j'k'l*X*h*l*n*o-W-^-`-p0U0X1g5q5sR1d,UnqOXst!Z#d%l&p&r&s&u,n,s2S2VQ&w!^Q't!xS(q#u<OQ+i%yQ,W&]Q,X&_Q-e'bQ-r'mS.m(v<qS0k+U<{Q0y+jQ1f,VQ2Z,uQ2],vQ2e-RQ2r-fQ2u-jS5P0l=VQ5W0zS5Z0|=WQ6j2gQ6n2sQ6s2zQ8R5XQ8}6lQ9O6oQ9R6tR:`8z$d$]c#Y#e%r%t(Q(W(r(w)P)Q)R)S)T)U)V)W)X)Y)[)^)`)e)o+a+u-U-s-x-}.P.n.q.u.x.y/]0j2c2f2v2}3c3h3i3j3k3l3m3n3o3p3q3r3s3t3w3x4P5O5Y6k6q6v7V7W7a7b8`8|9Q9[9b9c:c:y;R;x=gS(m#p'gQ(}#zS+_%p.wS.^(l(nR3U._'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sS#q];wQ&r!XQ&s!YQ&u![Q&v!]R2R,qQ'_!hQ+b%vQ-c'aS.`(o+eQ2p-bW3Y.c.d0q0sQ6m2qW6z3V3X3]5TU9U6{6}7PU:e9W9X9ZS;T:d:gQ;b;UR;j;cU!wQ'^-`T5o1g5q!Q_OXZ`st!V!Z#d#h%d%l&g&i&p&r&s&u(h,n,s.V2S2V]!pQ!r'^-`1g5qT#q];w%^{OPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SS({#y#zS.](k(l!s=^$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sU$fd)],hS(n#p'gU*s%R(u3vU0e*z.i7]Q5T0rQ6{3WQ9X7OR:g9Ym!tQ!r!v!y!z'^'j'k'l-`-p1g5q5sQ'r!uS(d#g1|S-n'i'uQ/n*ZQ/{*gQ2|-qQ4]/oQ4i/}Q4j0OQ4o0WQ7h4WS7s4k4mS7w4p4rQ9g7iQ9k7oQ9p7tQ9u7yS:o9l9mS;Y:p:sS;e;Z;[S;m;f;gS;q;n;oR;t;rQ#wbQ'q!uS(c#g1|S(e#m+TQ+V%eQ+g%wQ+m%}U-m'i'r'uQ.R(dQ/m*ZQ/|*gQ0P*iQ0x+hQ1m,[S2y-n-qQ3R.ZS4[/n/oQ4e/yS4h/{0WQ4l0QQ5|1nQ6u2|Q7g4WQ7k4]U7r4i4o4rQ7u4nQ8k5}S9f7h7iQ9j7oQ9r7wQ9s7xQ:V8lQ:m9gS:n9k9mQ:v9uQ;P:WS;X:o:sS;d;Y;ZS;l;e;gS;p;m;oQ;s;qQ;u;tQ=a=[Q=l=eR=m=fV!wQ'^-`%^aOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SS#wz!j!r=Z$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sR=a=r%^bOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SQ%ej!^%wy!i!u%z%{%|'T'c'd'e'i's*g+k+l-T-g-h-o/{0O0{2m2t2{4i4j4m7s9pS%}z!jQ+h%xQ,[&bW1n,],^,_,`U5}1o1p1qS8l6O6PQ:W8m!r=[$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ=e=qR=f=r%QeOPXYstuvw!Z!`!g!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SY#bWZ#W#Z(R!b%im#h#i#l$x%d%g([(f(g(h*W*[*_+W+X+Z,j-Q.O.U.V.W.Y/h/k2[3S3T4X6h6yQ,i&m!p=]$Z$n)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sR=`'VU'Z!e%h*XR2k-Z%SdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y,k,n,s-d-l-z.Q.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3d4q5y6Z6[6_6r8i8x9S!r)]$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ,h&mQ0r+dQ3W.bQ7O3[R9Y7Q!b$Tc#Y%p(Q(W(r(w)X)Y)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;x!P<U)[)o-U.w2c2f3h3q3r3w4P6k7W7a7b8`8|9[9b9c:y;R=g!f$Vc#Y%p(Q(W(r(w)U)V)X)Y)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;x!T<W)[)o-U.w2c2f3h3n3o3q3r3w4P6k7W7a7b8`8|9[9b9c:y;R=g!^$Zc#Y%p(Q(W(r(w)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;xQ4V/fz=s)[)o-U.w2c2f3h3w4P6k7W7a7b8`8|9[9b9c:y;R=gQ=x=zR=y={'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sS$oh$pR3|/P'XgOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n$p%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/P/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sT$kf$qQ$ifS)h$l)lR)t$qT$jf$qT)j$l)l'XhOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n$p%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/P/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sT$oh$pQ$rhR)s$p%^jOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9S!s=q$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s#glOPXZst!Z!`!o#S#d#o#{$n%l&i&l&m&p&r&s&u&y'R'`(|)q*f+Y+d,k,n,s-d.b/Q/i0V0d1j1z1{1}2P2S2V2X3[3{4q5y6Z6[6_7Q8i8x!U%Ri$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y#f(u#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}Q+P%`Q/^)|o3v<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!U$yi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=yQ*`$zU*i$|*X*lQ+Q%aQ0Q*j#f=c#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n=d<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YQ=h=tQ=i=uQ=j=vR=k=w!U%Ri$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y#f(u#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}o3v<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YnoOXst!Z#d%l&p&r&s&u,n,s2S2VS*c${*WQ,|&|Q,}'OR4`/s%[%Si#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}Q,P&ZQ1`,RQ5i1_R8]5jV*k$|*X*lU*k$|*X*lT5p1g5qS/y*f/iQ4n0VT7x4q:PQ+g%wQ0P*iQ0x+hQ1m,[Q5|1nQ8k5}Q:V8lR;P:W!U%Oi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=yx*P$v)c*Q*r+R/q0^0_3y4^4{4|4}7f7z9v:l=b=n=oS0Y*q0Z#f<a#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n<b<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!d<t(s)a*Y*b.e.h.l/Y/f/v0p1]3`4S4_4c5h7R7U7m7p7}8P9i9q9w:q:u;W;];h=z={`<u3u7X7[7`9]:h:k;kS=P.g3aT=Q7Z9`!U%Qi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y|*R$v)c*S*q+R/b/q0^0_3y4^4s4{4|4}7f7z9v:l=b=n=oS0[*r0]#f<c#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n<d<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!h<v(s)a*Y*b.f.g.l/Y/f/v0p1]3^3`4S4_4c5h7R7S7U7m7p7}8P9i9q9w:q:u;W;];h=z={d<w3u7Y7Z7`9]9^:h:i:k;kS=R.h3bT=S7[9arnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VQ&d!UR,k&mrnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VR&d!UQ,T&[R1[+|snOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VQ1h,YS5w1k1lU8e5u5v5zS:R8g8hS:{:Q:TQ;_:|R;i;`Q&k!VR,d&gR6T1tR:Y8nS&P|&UR1T+sQ&p!WR,n&qR,t&vT2T,s2VR,x&wQ,w&wR2^,xQ'w!{R-t'wSsOtQ#dXT%os#dQ#OTR'y#OQ#RUR'{#RQ)y$uR/Z)yQ#UVR(O#UQ#XWU(U#X(V-{Q(V#YR-{(WQ-X'WR2j-XQ.p(wS3e.p3fR3f.qQ-`'^R2n-`Y!rQ'^-`1g5qR'h!rQ.{)cR3z.{U#_W%g*WU(]#_(^-|Q(^#`R-|(XQ-['ZR2l-[t`OXst!V!Z#d%l&g&i&p&r&s&u,n,s2S2VS#hZ%dU#r`#h.VR.V(hQ(i#jQ.S(eW.[(i.S3P6wQ3P.TR6w3QQ)l$lR/R)lQ$phR)r$pQ$`cU)_$`-w<[Q-w;xR<[)oQ/l*ZW4Y/l4Z7j9hU4Z/m/n/oS7j4[4]R9h7k$e*O$v(s)a)c*Y*b*q*r*|*}+R.g.h.j.k.l/Y/b/d/f/q/v0^0_0p1]3^3_3`3u3y4S4^4_4c4s4u4{4|4}5h7R7S7T7U7Z7[7^7_7`7f7m7p7z7}8P9]9^9_9i9q9v9w:h:i:j:k:l:q:u;W;];h;k=b=n=o=z={Q/t*bU4b/t4d7nQ4d/vR7n4cS*l$|*XR0S*lx*Q$v)c*q*r+R/q0^0_3y4^4{4|4}7f7z9v:l=b=n=o!d.e(s)a*Y*b.g.h.l/Y/f/v0p1]3`4S4_4c5h7R7U7m7p7}8P9i9q9w:q:u;W;];h=z={U/c*Q.e7Xa7X3u7Z7[7`9]:h:k;kQ0Z*qQ3a.gU4t0Z3a9`R9`7Z|*S$v)c*q*r+R/b/q0^0_3y4^4s4{4|4}7f7z9v:l=b=n=o!h.f(s)a*Y*b.g.h.l/Y/f/v0p1]3^3`4S4_4c5h7R7S7U7m7p7}8P9i9q9w:q:u;W;];h=z={U/e*S.f7Ye7Y3u7Z7[7`9]9^:h:i:k;kQ0]*rQ3b.hU4v0]3b9aR9a7[Q*w%UR0a*wQ5S0pR8O5SQ+[%jR0o+[Q5l1bS8_5l:OR:O8`Q,V&]R1e,VQ5q1gR8b5qQ1s,aS6R1s8oR8o6TQ1O+oW5_1O5a8V9zQ5a1RQ8V5`R9z8WQ+t&PR1U+tQ2V,sR6c2VYrOXst#dQ&t!ZQ+^%lQ,m&pQ,o&rQ,p&sQ,r&uQ2Q,nS2T,s2VR6b2SQ%npQ&x!_Q&{!aQ&}!bQ'P!cQ'o!uQ+]%kQ+i%yQ+{&VQ,c&kQ,z&zW-k'i'q'r'uQ-r'mQ0R*kQ0y+jS1v,d,gQ2_,yQ2`,|Q2a,}Q2u-jW2w-m-n-q-sQ5W0zQ5d1XQ5g1]Q5{1mQ6V1xQ6a2RU6p2v2y2|Q6s2zQ8R5XQ8Z5fQ8[5hQ8a5pQ8j5|Q8p6US9P6q6uQ9R6tQ9{8XQ:U8kQ:Z8qQ:b9QQ:x9|Q;O:VQ;S:cR;a;PQ%yyQ'b!iQ'm!uU+j%z%{%|Q-R'TU-f'c'd'eS-j'i'sQ/z*gS0z+k+lQ2g-TS2s-g-hQ2z-oS4g/{0OQ5X0{Q6l2mQ6o2tQ6t2{U7q4i4j4mQ9o7sR:r9pS$wi=pR*x%VU%Ui%V=pR0`*vQ$viS(s#v+fS)a$b$cQ)c$dQ*Y$xS*b${*WQ*q%OQ*r%QQ*|%]Q*}%^Q+R%bQ.g<aQ.h<cQ.j<gQ.k<iQ.l<kQ/Y)wQ/b*PQ/d*RQ/f*TQ/q*^S/v*d/hQ0^*tQ0_*ul0p+c,Q.a1a1i3Z5x6|8f9V:S:f:};VQ1]+}Q3^<tQ3_<vQ3`<yS3u<^<_Q3y.zS4S/_4UQ4^/rQ4_/sQ4c/uQ4s0YQ4u0[Q4{0gQ4|0hQ4}0iQ5h1^Q7R<}Q7S=PQ7T=RQ7U=TQ7Z<bQ7[<dQ7^<hQ7_<jQ7`<lQ7f4VQ7m4aQ7p4fQ7z4wQ7}5RQ8P5UQ9]<zQ9^<uQ9_<wQ9i7lQ9q7vQ9v7|Q9w8QQ:h=OQ:i=QQ:j=SQ:k=UQ:l9eQ:q9nQ:u9tQ;W=XQ;]:tQ;h;^Q;k=YQ=b=pQ=n=xQ=o=yQ=z=|R={=}Q*z%[Q.i<eR7]<fnpOXst!Z#d%l&p&r&s&u,n,s2S2VQ!fPS#fZ#oQ&z!`W'f!o*f0V4qQ'}#SQ)O#{Q)p$nS,g&i&lQ,l&mQ,y&yS-O'R/iQ-b'`Q.s(|Q/V)qQ0m+YQ0s+dQ2O,kQ2q-dQ3X.bQ4O/QQ4y0dQ5v1jQ6X1zQ6Y1{Q6^1}Q6`2PQ6e2XQ7P3[Q7c3{Q8h5yQ8t6ZQ8u6[Q8w6_Q9Z7QQ:T8iR:_8x#[cOPXZst!Z!`!o#d#o#{%l&i&l&m&p&r&s&u&y'R'`(|*f+Y+d,k,n,s-d.b/i0V0d1j1z1{1}2P2S2V2X3[4q5y6Z6[6_7Q8i8xQ#YWQ#eYQ%puQ%rvS%tw!gS(Q#W(TQ(W#ZQ(r#uQ(w#xQ)P$OQ)Q$PQ)R$QQ)S$RQ)T$SQ)U$TQ)V$UQ)W$VQ)X$WQ)Y$XQ)[$ZQ)^$_Q)`$aQ)e$eW)o$n)q/Q3{Q+a%sQ+u&QS-U'V2hQ-s'pS-x(R-zQ-}(ZQ.P(bQ.n(vQ.q(xQ.u;vQ.w;yQ.x;zQ.y;}Q/]){Q0j+UQ2c-PQ2f-SQ2v-lQ2}.QQ3c.oQ3h<OQ3i<PQ3j<QQ3k<RQ3l<SQ3m<TQ3n<UQ3o<VQ3p<WQ3q<XQ3r<YQ3s.vQ3t<]Q3w<`Q3x<mQ4P<ZQ5O0lQ5Y0|Q6k<pQ6q2xQ6v3OQ7V3dQ7W<qQ7a<sQ7b<{Q8`5mQ8|6iQ9Q6rQ9[<|Q9b=VQ9c=WQ:c9SQ:y9}Q;R:aQ;x#SR=g=sR#[WR'X!el!tQ!r!v!y!z'^'j'k'l-`-p1g5q5sS'T!e-WU*g$|*X*lS-T'U']S0O*h*nQ0W*oQ2m-^Q4m0UR4r0XR(y#xQ!fQT-_'^-`]!qQ!r'^-`1g5qQ#p]R'g;wR)d$dY!uQ'^-`1g5qQ'i!rS's!v!yS'u!z5sS-o'j'kQ-q'lR2{-pT#kZ%dS#jZ%dS%jm,jU(e#h#i#lS.T(f(gQ.X(hQ0n+ZQ3Q.UU3R.V.W.YS6x3S3TR9T6yd#^W#W#Z%g(R([*W+W.O/hr#gZm#h#i#l%d(f(g(h+Z.U.V.W.Y3S3T6yS*Z$x*_Q/o*[Q1|,jQ2d-QQ4W/kQ6g2[Q7i4XQ8{6hT=_'V+XV#aW%g*WU#`W%g*WS(S#W([U(X#Z+W/hS-V'V+XT-y(R.OV'[!e%h*XQ$lfR)v$qT)k$l)lR3}/PT*]$x*_T*e${*WQ0q+cQ1_,QQ3V.aQ5j1aQ5u1iQ6}3ZQ8g5xQ9W6|Q:Q8fQ:d9VQ:|:SQ;U:fQ;`:}R;c;VnqOXst!Z#d%l&p&r&s&u,n,s2S2VQ&j!VR,c&gtmOXst!U!V!Z#d%l&g&p&r&s&u,n,s2S2VR,j&mT%km,jR1c,SR,b&eQ&T|R+z&UR+p&OT&n!W&qT&o!W&qT2U,s2V\",\n  nodeNames: \"⚠ ArithOp ArithOp ?. JSXStartTag LineComment BlockComment Script Hashbang ExportDeclaration export Star as VariableName String Escape from ; default FunctionDeclaration async function VariableDefinition > < TypeParamList in out const TypeDefinition extends ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType InterpolationEnd Interpolation InterpolationStart NullType null VoidType void TypeofType typeof MemberExpression . PropertyName [ TemplateString Escape Interpolation super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewTarget new NewExpression ) ( ArgList UnaryExpression delete LogicOp BitOp YieldExpression yield AwaitExpression await ParenthesizedExpression ClassExpression class ClassBody MethodDeclaration Decorator @ MemberExpression PrivatePropertyName CallExpression TypeArgList CompareOp < declare Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly accessor Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof satisfies CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression InstantiationExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXSelfClosingTag JSXIdentifier JSXBuiltin JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast < ArrowFunction TypeParamList SequenceExpression InstantiationExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature PropertyDefinition CallSignature TypePredicate asserts is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var using TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try CatchClause catch FinallyClause finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement SingleExpression SingleClassItem\",\n  maxTerm: 379,\n  context: trackNewline,\n  nodeProps: [\n    [\"isolate\", -8,5,6,14,37,39,51,53,55,\"\"],\n    [\"group\", -26,9,17,19,68,207,211,215,216,218,221,224,234,236,242,244,246,248,251,257,263,265,267,269,271,273,274,\"Statement\",-34,13,14,32,35,36,42,51,54,55,57,62,70,72,76,80,82,84,85,110,111,120,121,136,139,141,142,143,144,145,147,148,167,169,171,\"Expression\",-23,31,33,37,41,43,45,173,175,177,178,180,181,182,184,185,186,188,189,190,201,203,205,206,\"Type\",-3,88,103,109,\"ClassItem\"],\n    [\"openedBy\", 23,\"<\",38,\"InterpolationStart\",56,\"[\",60,\"{\",73,\"(\",160,\"JSXStartCloseTag\"],\n    [\"closedBy\", -2,24,168,\">\",40,\"InterpolationEnd\",50,\"]\",61,\"}\",74,\")\",165,\"JSXEndTag\"]\n  ],\n  propSources: [jsHighlight],\n  skippedNodes: [0,5,6,277],\n  repeatNodeCount: 37,\n  tokenData: \"$Fq07[R!bOX%ZXY+gYZ-yZ[+g[]%Z]^.c^p%Zpq+gqr/mrs3cst:_tuEruvJSvwLkwx! Yxy!'iyz!(sz{!)}{|!,q|}!.O}!O!,q!O!P!/Y!P!Q!9j!Q!R#:O!R![#<_![!]#I_!]!^#Jk!^!_#Ku!_!`$![!`!a$$v!a!b$*T!b!c$,r!c!}Er!}#O$-|#O#P$/W#P#Q$4o#Q#R$5y#R#SEr#S#T$7W#T#o$8b#o#p$<r#p#q$=h#q#r$>x#r#s$@U#s$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$I|Er$I|$I}$Dk$I}$JO$Dk$JO$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr(n%d_$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&j&hT$i&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c&j&zP;=`<%l&c'|'U]$i&j(Y!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!b(SU(Y!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!b(iP;=`<%l'}'|(oP;=`<%l&}'[(y]$i&j(VpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rp)wU(VpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)rp*^P;=`<%l)r'[*dP;=`<%l(r#S*nX(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g#S+^P;=`<%l*g(n+dP;=`<%l%Z07[+rq$i&j(Vp(Y!b'{0/lOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p$f%Z$f$g+g$g#BY%Z#BY#BZ+g#BZ$IS%Z$IS$I_+g$I_$JT%Z$JT$JU+g$JU$KV%Z$KV$KW+g$KW&FU%Z&FU&FV+g&FV;'S%Z;'S;=`+a<%l?HT%Z?HT?HU+g?HUO%Z07[.ST(W#S$i&j'|0/lO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c07[.n_$i&j(Vp(Y!b'|0/lOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)3p/x`$i&j!p),Q(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW1V`#v(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`2X!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW2d_#v(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At3l_(U':f$i&j(Y!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k(^4r_$i&j(Y!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k&z5vX$i&jOr5qrs6cs!^5q!^!_6y!_#o5q#o#p6y#p;'S5q;'S;=`7h<%lO5q&z6jT$d`$i&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c`6|TOr6yrs7]s;'S6y;'S;=`7b<%lO6y`7bO$d``7eP;=`<%l6y&z7kP;=`<%l5q(^7w]$d`$i&j(Y!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!r8uZ(Y!bOY8pYZ6yZr8prs9hsw8pwx6yx#O8p#O#P6y#P;'S8p;'S;=`:R<%lO8p!r9oU$d`(Y!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!r:UP;=`<%l8p(^:[P;=`<%l4k%9[:hh$i&j(Vp(Y!bOY%ZYZ&cZq%Zqr<Srs&}st%ZtuCruw%Zwx(rx!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr(r<__WS$i&j(Vp(Y!bOY<SYZ&cZr<Srs=^sw<Swx@nx!^<S!^!_Bm!_#O<S#O#P>`#P#o<S#o#pBm#p;'S<S;'S;=`Cl<%lO<S(Q=g]WS$i&j(Y!bOY=^YZ&cZw=^wx>`x!^=^!^!_?q!_#O=^#O#P>`#P#o=^#o#p?q#p;'S=^;'S;=`@h<%lO=^&n>gXWS$i&jOY>`YZ&cZ!^>`!^!_?S!_#o>`#o#p?S#p;'S>`;'S;=`?k<%lO>`S?XSWSOY?SZ;'S?S;'S;=`?e<%lO?SS?hP;=`<%l?S&n?nP;=`<%l>`!f?xWWS(Y!bOY?qZw?qwx?Sx#O?q#O#P?S#P;'S?q;'S;=`@b<%lO?q!f@eP;=`<%l?q(Q@kP;=`<%l=^'`@w]WS$i&j(VpOY@nYZ&cZr@nrs>`s!^@n!^!_Ap!_#O@n#O#P>`#P#o@n#o#pAp#p;'S@n;'S;=`Bg<%lO@ntAwWWS(VpOYApZrAprs?Ss#OAp#O#P?S#P;'SAp;'S;=`Ba<%lOAptBdP;=`<%lAp'`BjP;=`<%l@n#WBvYWS(Vp(Y!bOYBmZrBmrs?qswBmwxApx#OBm#O#P?S#P;'SBm;'S;=`Cf<%lOBm#WCiP;=`<%lBm(rCoP;=`<%l<S%9[C}i$i&j(n%1l(Vp(Y!bOY%ZYZ&cZr%Zrs&}st%ZtuCruw%Zwx(rx!Q%Z!Q![Cr![!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr%9[EoP;=`<%lCr07[FRk$i&j(Vp(Y!b$]#t(S,2j(d$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr+dHRk$i&j(Vp(Y!b$]#tOY%ZYZ&cZr%Zrs&}st%ZtuGvuw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Gv![!^%Z!^!_*g!_!c%Z!c!}Gv!}#O%Z#O#P&c#P#R%Z#R#SGv#S#T%Z#T#oGv#o#p*g#p$g%Z$g;'SGv;'S;=`Iv<%lOGv+dIyP;=`<%lGv07[JPP;=`<%lEr(KWJ_`$i&j(Vp(Y!b#p(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWKl_$i&j$Q(Ch(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,#xLva(y+JY$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sv%ZvwM{wx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWNW`$i&j#z(Ch(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At! c_(X';W$i&j(VpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b'l!!i_$i&j(VpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b&z!#mX$i&jOw!#hwx6cx!^!#h!^!_!$Y!_#o!#h#o#p!$Y#p;'S!#h;'S;=`!$r<%lO!#h`!$]TOw!$Ywx7]x;'S!$Y;'S;=`!$l<%lO!$Y`!$oP;=`<%l!$Y&z!$uP;=`<%l!#h'l!%R]$d`$i&j(VpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r!Q!&PZ(VpOY!%zYZ!$YZr!%zrs!$Ysw!%zwx!&rx#O!%z#O#P!$Y#P;'S!%z;'S;=`!']<%lO!%z!Q!&yU$d`(VpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)r!Q!'`P;=`<%l!%z'l!'fP;=`<%l!!b/5|!'t_!l/.^$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#&U!)O_!k!Lf$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z-!n!*[b$i&j(Vp(Y!b(T%&f#q(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rxz%Zz{!+d{!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW!+o`$i&j(Vp(Y!b#n(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;x!,|`$i&j(Vp(Y!br+4YOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,$U!.Z_!]+Jf$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!/ec$i&j(Vp(Y!b!Q.2^OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!0p!P!Q%Z!Q![!3Y![!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!0ya$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!2O!P!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!2Z_![!L^$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!3eg$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!3Y![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S!3Y#S#X%Z#X#Y!4|#Y#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!5Vg$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx{%Z{|!6n|}%Z}!O!6n!O!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!6wc$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!8_c$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!9uf$i&j(Vp(Y!b#o(ChOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcxz!;Zz{#-}{!P!;Z!P!Q#/d!Q!^!;Z!^!_#(i!_!`#7S!`!a#8i!a!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z?O!;fb$i&j(Vp(Y!b!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z>^!<w`$i&j(Y!b!X7`OY!<nYZ&cZw!<nwx!=yx!P!<n!P!Q!Eq!Q!^!<n!^!_!Gr!_!}!<n!}#O!KS#O#P!Dy#P#o!<n#o#p!Gr#p;'S!<n;'S;=`!L]<%lO!<n<z!>Q^$i&j!X7`OY!=yYZ&cZ!P!=y!P!Q!>|!Q!^!=y!^!_!@c!_!}!=y!}#O!CW#O#P!Dy#P#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!?Td$i&j!X7`O!^&c!_#W&c#W#X!>|#X#Z&c#Z#[!>|#[#]&c#]#^!>|#^#a&c#a#b!>|#b#g&c#g#h!>|#h#i&c#i#j!>|#j#k!>|#k#m&c#m#n!>|#n#o&c#p;'S&c;'S;=`&w<%lO&c7`!@hX!X7`OY!@cZ!P!@c!P!Q!AT!Q!}!@c!}#O!Ar#O#P!Bq#P;'S!@c;'S;=`!CQ<%lO!@c7`!AYW!X7`#W#X!AT#Z#[!AT#]#^!AT#a#b!AT#g#h!AT#i#j!AT#j#k!AT#m#n!AT7`!AuVOY!ArZ#O!Ar#O#P!B[#P#Q!@c#Q;'S!Ar;'S;=`!Bk<%lO!Ar7`!B_SOY!ArZ;'S!Ar;'S;=`!Bk<%lO!Ar7`!BnP;=`<%l!Ar7`!BtSOY!@cZ;'S!@c;'S;=`!CQ<%lO!@c7`!CTP;=`<%l!@c<z!C][$i&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#O!CW#O#P!DR#P#Q!=y#Q#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DWX$i&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DvP;=`<%l!CW<z!EOX$i&jOY!=yYZ&cZ!^!=y!^!_!@c!_#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!EnP;=`<%l!=y>^!Ezl$i&j(Y!b!X7`OY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#W&}#W#X!Eq#X#Z&}#Z#[!Eq#[#]&}#]#^!Eq#^#a&}#a#b!Eq#b#g&}#g#h!Eq#h#i&}#i#j!Eq#j#k!Eq#k#m&}#m#n!Eq#n#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}8r!GyZ(Y!b!X7`OY!GrZw!Grwx!@cx!P!Gr!P!Q!Hl!Q!}!Gr!}#O!JU#O#P!Bq#P;'S!Gr;'S;=`!J|<%lO!Gr8r!Hse(Y!b!X7`OY'}Zw'}x#O'}#P#W'}#W#X!Hl#X#Z'}#Z#[!Hl#[#]'}#]#^!Hl#^#a'}#a#b!Hl#b#g'}#g#h!Hl#h#i'}#i#j!Hl#j#k!Hl#k#m'}#m#n!Hl#n;'S'};'S;=`(f<%lO'}8r!JZX(Y!bOY!JUZw!JUwx!Arx#O!JU#O#P!B[#P#Q!Gr#Q;'S!JU;'S;=`!Jv<%lO!JU8r!JyP;=`<%l!JU8r!KPP;=`<%l!Gr>^!KZ^$i&j(Y!bOY!KSYZ&cZw!KSwx!CWx!^!KS!^!_!JU!_#O!KS#O#P!DR#P#Q!<n#Q#o!KS#o#p!JU#p;'S!KS;'S;=`!LV<%lO!KS>^!LYP;=`<%l!KS>^!L`P;=`<%l!<n=l!Ll`$i&j(Vp!X7`OY!LcYZ&cZr!Lcrs!=ys!P!Lc!P!Q!Mn!Q!^!Lc!^!_# o!_!}!Lc!}#O#%P#O#P!Dy#P#o!Lc#o#p# o#p;'S!Lc;'S;=`#&Y<%lO!Lc=l!Mwl$i&j(Vp!X7`OY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#W(r#W#X!Mn#X#Z(r#Z#[!Mn#[#](r#]#^!Mn#^#a(r#a#b!Mn#b#g(r#g#h!Mn#h#i(r#i#j!Mn#j#k!Mn#k#m(r#m#n!Mn#n#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r8Q# vZ(Vp!X7`OY# oZr# ors!@cs!P# o!P!Q#!i!Q!}# o!}#O#$R#O#P!Bq#P;'S# o;'S;=`#$y<%lO# o8Q#!pe(Vp!X7`OY)rZr)rs#O)r#P#W)r#W#X#!i#X#Z)r#Z#[#!i#[#])r#]#^#!i#^#a)r#a#b#!i#b#g)r#g#h#!i#h#i)r#i#j#!i#j#k#!i#k#m)r#m#n#!i#n;'S)r;'S;=`*Z<%lO)r8Q#$WX(VpOY#$RZr#$Rrs!Ars#O#$R#O#P!B[#P#Q# o#Q;'S#$R;'S;=`#$s<%lO#$R8Q#$vP;=`<%l#$R8Q#$|P;=`<%l# o=l#%W^$i&j(VpOY#%PYZ&cZr#%Prs!CWs!^#%P!^!_#$R!_#O#%P#O#P!DR#P#Q!Lc#Q#o#%P#o#p#$R#p;'S#%P;'S;=`#&S<%lO#%P=l#&VP;=`<%l#%P=l#&]P;=`<%l!Lc?O#&kn$i&j(Vp(Y!b!X7`OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#W%Z#W#X#&`#X#Z%Z#Z#[#&`#[#]%Z#]#^#&`#^#a%Z#a#b#&`#b#g%Z#g#h#&`#h#i%Z#i#j#&`#j#k#&`#k#m%Z#m#n#&`#n#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z9d#(r](Vp(Y!b!X7`OY#(iZr#(irs!Grsw#(iwx# ox!P#(i!P!Q#)k!Q!}#(i!}#O#+`#O#P!Bq#P;'S#(i;'S;=`#,`<%lO#(i9d#)th(Vp(Y!b!X7`OY*gZr*grs'}sw*gwx)rx#O*g#P#W*g#W#X#)k#X#Z*g#Z#[#)k#[#]*g#]#^#)k#^#a*g#a#b#)k#b#g*g#g#h#)k#h#i*g#i#j#)k#j#k#)k#k#m*g#m#n#)k#n;'S*g;'S;=`+Z<%lO*g9d#+gZ(Vp(Y!bOY#+`Zr#+`rs!JUsw#+`wx#$Rx#O#+`#O#P!B[#P#Q#(i#Q;'S#+`;'S;=`#,Y<%lO#+`9d#,]P;=`<%l#+`9d#,cP;=`<%l#(i?O#,o`$i&j(Vp(Y!bOY#,fYZ&cZr#,frs!KSsw#,fwx#%Px!^#,f!^!_#+`!_#O#,f#O#P!DR#P#Q!;Z#Q#o#,f#o#p#+`#p;'S#,f;'S;=`#-q<%lO#,f?O#-tP;=`<%l#,f?O#-zP;=`<%l!;Z07[#.[b$i&j(Vp(Y!b'}0/l!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z07[#/o_$i&j(Vp(Y!bT0/lOY#/dYZ&cZr#/drs#0nsw#/dwx#4Ox!^#/d!^!_#5}!_#O#/d#O#P#1p#P#o#/d#o#p#5}#p;'S#/d;'S;=`#6|<%lO#/d06j#0w]$i&j(Y!bT0/lOY#0nYZ&cZw#0nwx#1px!^#0n!^!_#3R!_#O#0n#O#P#1p#P#o#0n#o#p#3R#p;'S#0n;'S;=`#3x<%lO#0n05W#1wX$i&jT0/lOY#1pYZ&cZ!^#1p!^!_#2d!_#o#1p#o#p#2d#p;'S#1p;'S;=`#2{<%lO#1p0/l#2iST0/lOY#2dZ;'S#2d;'S;=`#2u<%lO#2d0/l#2xP;=`<%l#2d05W#3OP;=`<%l#1p01O#3YW(Y!bT0/lOY#3RZw#3Rwx#2dx#O#3R#O#P#2d#P;'S#3R;'S;=`#3r<%lO#3R01O#3uP;=`<%l#3R06j#3{P;=`<%l#0n05x#4X]$i&j(VpT0/lOY#4OYZ&cZr#4Ors#1ps!^#4O!^!_#5Q!_#O#4O#O#P#1p#P#o#4O#o#p#5Q#p;'S#4O;'S;=`#5w<%lO#4O00^#5XW(VpT0/lOY#5QZr#5Qrs#2ds#O#5Q#O#P#2d#P;'S#5Q;'S;=`#5q<%lO#5Q00^#5tP;=`<%l#5Q05x#5zP;=`<%l#4O01p#6WY(Vp(Y!bT0/lOY#5}Zr#5}rs#3Rsw#5}wx#5Qx#O#5}#O#P#2d#P;'S#5};'S;=`#6v<%lO#5}01p#6yP;=`<%l#5}07[#7PP;=`<%l#/d)3h#7ab$i&j$Q(Ch(Vp(Y!b!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;ZAt#8vb$Z#t$i&j(Vp(Y!b!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z'Ad#:Zp$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#U%Z#U#V#?i#V#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#d#Bq#d#l%Z#l#m#Es#m#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#<jk$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#>j_$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#?rd$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#A]f$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Bzc$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Dbe$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#E|g$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Gpi$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x#Il_!g$b$i&j$O)Lv(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)[#Jv_al$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f#LS^h#)`#R-<U(Vp(Y!b$n7`OY*gZr*grs'}sw*gwx)rx!P*g!P!Q#MO!Q!^*g!^!_#Mt!_!`$ f!`#O*g#P;'S*g;'S;=`+Z<%lO*g(n#MXX$k&j(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El#M}Z#r(Ch(Vp(Y!bOY*gZr*grs'}sw*gwx)rx!_*g!_!`#Np!`#O*g#P;'S*g;'S;=`+Z<%lO*g(El#NyX$Q(Ch(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El$ oX#s(Ch(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g*)x$!ga#`*!Y$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`!a$#l!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(K[$#w_#k(Cl$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x$%Vag!*r#s(Ch$f#|$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`$&[!`!a$'f!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$&g_#s(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$'qa#r(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`!a$(v!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$)R`#r(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(Kd$*`a(q(Ct$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!a%Z!a!b$+e!b#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$+p`$i&j#{(Ch(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#`$,}_!|$Ip$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f$.X_!S0,v$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(n$/]Z$i&jO!^$0O!^!_$0f!_#i$0O#i#j$0k#j#l$0O#l#m$2^#m#o$0O#o#p$0f#p;'S$0O;'S;=`$4i<%lO$0O(n$0VT_#S$i&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c#S$0kO_#S(n$0p[$i&jO!Q&c!Q![$1f![!^&c!_!c&c!c!i$1f!i#T&c#T#Z$1f#Z#o&c#o#p$3|#p;'S&c;'S;=`&w<%lO&c(n$1kZ$i&jO!Q&c!Q![$2^![!^&c!_!c&c!c!i$2^!i#T&c#T#Z$2^#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$2cZ$i&jO!Q&c!Q![$3U![!^&c!_!c&c!c!i$3U!i#T&c#T#Z$3U#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$3ZZ$i&jO!Q&c!Q![$0O![!^&c!_!c&c!c!i$0O!i#T&c#T#Z$0O#Z#o&c#p;'S&c;'S;=`&w<%lO&c#S$4PR!Q![$4Y!c!i$4Y#T#Z$4Y#S$4]S!Q![$4Y!c!i$4Y#T#Z$4Y#q#r$0f(n$4lP;=`<%l$0O#1[$4z_!Y#)l$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$6U`#x(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;p$7c_$i&j(Vp(Y!b(`+4QOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$8qk$i&j(Vp(Y!b(S,2j$_#t(d$I[OY%ZYZ&cZr%Zrs&}st%Ztu$8buw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$8b![!^%Z!^!_*g!_!c%Z!c!}$8b!}#O%Z#O#P&c#P#R%Z#R#S$8b#S#T%Z#T#o$8b#o#p*g#p$g%Z$g;'S$8b;'S;=`$<l<%lO$8b+d$:qk$i&j(Vp(Y!b$_#tOY%ZYZ&cZr%Zrs&}st%Ztu$:fuw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$:f![!^%Z!^!_*g!_!c%Z!c!}$:f!}#O%Z#O#P&c#P#R%Z#R#S$:f#S#T%Z#T#o$:f#o#p*g#p$g%Z$g;'S$:f;'S;=`$<f<%lO$:f+d$<iP;=`<%l$:f07[$<oP;=`<%l$8b#Jf$<{X!_#Hb(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g,#x$=sa(x+JY$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p#q$+e#q;'S%Z;'S;=`+a<%lO%Z)>v$?V_!^(CdvBr$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z?O$@a_!q7`$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$Aq|$i&j(Vp(Y!b'{0/l$]#t(S,2j(d$I[OX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr07[$D|k$i&j(Vp(Y!b'|0/l$]#t(S,2j(d$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr\",\n  tokenizers: [noSemicolon, noSemicolonType, operatorToken, jsx, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, insertSemicolon, new LocalTokenGroup(\"$S~RRtu[#O#Pg#S#T#|~_P#o#pb~gOx~~jVO#i!P#i#j!U#j#l!P#l#m!q#m;'S!P;'S;=`#v<%lO!P~!UO!U~~!XS!Q![!e!c!i!e#T#Z!e#o#p#Z~!hR!Q![!q!c!i!q#T#Z!q~!tR!Q![!}!c!i!}#T#Z!}~#QR!Q![!P!c!i!P#T#Z!P~#^R!Q![#g!c!i#g#T#Z#g~#jS!Q![#g!c!i#g#T#Z#g#q#r!P~#yP;=`<%l!P~$RO(b~~\", 141, 339), new LocalTokenGroup(\"j~RQYZXz{^~^O(P~~aP!P!Qd~iO(Q~~\", 25, 322)],\n  topRules: {\"Script\":[0,7],\"SingleExpression\":[1,275],\"SingleClassItem\":[2,276]},\n  dialects: {jsx: 0, ts: 15098},\n  dynamicPrecedences: {\"80\":1,\"82\":1,\"94\":1,\"169\":1,\"199\":1},\n  specialized: [{term: 326, get: (value) => spec_identifier[value] || -1},{term: 342, get: (value) => spec_word[value] || -1},{term: 95, get: (value) => spec_LessThan[value] || -1}],\n  tokenPrec: 15124\n});\n\nexport { parser };\n","import { parser } from '@lezer/javascript';\nimport { syntaxTree, LRLanguage, indentNodeProp, continuedIndent, flatIndent, delimitedIndent, foldNodeProp, foldInside, defineLanguageFacet, sublanguageProp, LanguageSupport } from '@codemirror/language';\nimport { EditorSelection } from '@codemirror/state';\nimport { EditorView } from '@codemirror/view';\nimport { snippetCompletion, ifNotIn, completeFromList } from '@codemirror/autocomplete';\nimport { NodeWeakMap, IterMode } from '@lezer/common';\n\n/**\nA collection of JavaScript-related\n[snippets](https://codemirror.net/6/docs/ref/#autocomplete.snippet).\n*/\nconst snippets = [\n    /*@__PURE__*/snippetCompletion(\"function ${name}(${params}) {\\n\\t${}\\n}\", {\n        label: \"function\",\n        detail: \"definition\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\\n\\t${}\\n}\", {\n        label: \"for\",\n        detail: \"loop\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"for (let ${name} of ${collection}) {\\n\\t${}\\n}\", {\n        label: \"for\",\n        detail: \"of loop\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"do {\\n\\t${}\\n} while (${})\", {\n        label: \"do\",\n        detail: \"loop\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"while (${}) {\\n\\t${}\\n}\", {\n        label: \"while\",\n        detail: \"loop\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"try {\\n\\t${}\\n} catch (${error}) {\\n\\t${}\\n}\", {\n        label: \"try\",\n        detail: \"/ catch block\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"if (${}) {\\n\\t${}\\n}\", {\n        label: \"if\",\n        detail: \"block\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"if (${}) {\\n\\t${}\\n} else {\\n\\t${}\\n}\", {\n        label: \"if\",\n        detail: \"/ else block\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"class ${name} {\\n\\tconstructor(${params}) {\\n\\t\\t${}\\n\\t}\\n}\", {\n        label: \"class\",\n        detail: \"definition\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"import {${names}} from \\\"${module}\\\"\\n${}\", {\n        label: \"import\",\n        detail: \"named\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"import ${name} from \\\"${module}\\\"\\n${}\", {\n        label: \"import\",\n        detail: \"default\",\n        type: \"keyword\"\n    })\n];\n/**\nA collection of snippet completions for TypeScript. Includes the\nJavaScript [snippets](https://codemirror.net/6/docs/ref/#lang-javascript.snippets).\n*/\nconst typescriptSnippets = /*@__PURE__*/snippets.concat([\n    /*@__PURE__*/snippetCompletion(\"interface ${name} {\\n\\t${}\\n}\", {\n        label: \"interface\",\n        detail: \"definition\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"type ${name} = ${type}\", {\n        label: \"type\",\n        detail: \"definition\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"enum ${name} {\\n\\t${}\\n}\", {\n        label: \"enum\",\n        detail: \"definition\",\n        type: \"keyword\"\n    })\n]);\n\nconst cache = /*@__PURE__*/new NodeWeakMap();\nconst ScopeNodes = /*@__PURE__*/new Set([\n    \"Script\", \"Block\",\n    \"FunctionExpression\", \"FunctionDeclaration\", \"ArrowFunction\", \"MethodDeclaration\",\n    \"ForStatement\"\n]);\nfunction defID(type) {\n    return (node, def) => {\n        let id = node.node.getChild(\"VariableDefinition\");\n        if (id)\n            def(id, type);\n        return true;\n    };\n}\nconst functionContext = [\"FunctionDeclaration\"];\nconst gatherCompletions = {\n    FunctionDeclaration: /*@__PURE__*/defID(\"function\"),\n    ClassDeclaration: /*@__PURE__*/defID(\"class\"),\n    ClassExpression: () => true,\n    EnumDeclaration: /*@__PURE__*/defID(\"constant\"),\n    TypeAliasDeclaration: /*@__PURE__*/defID(\"type\"),\n    NamespaceDeclaration: /*@__PURE__*/defID(\"namespace\"),\n    VariableDefinition(node, def) { if (!node.matchContext(functionContext))\n        def(node, \"variable\"); },\n    TypeDefinition(node, def) { def(node, \"type\"); },\n    __proto__: null\n};\nfunction getScope(doc, node) {\n    let cached = cache.get(node);\n    if (cached)\n        return cached;\n    let completions = [], top = true;\n    function def(node, type) {\n        let name = doc.sliceString(node.from, node.to);\n        completions.push({ label: name, type });\n    }\n    node.cursor(IterMode.IncludeAnonymous).iterate(node => {\n        if (top) {\n            top = false;\n        }\n        else if (node.name) {\n            let gather = gatherCompletions[node.name];\n            if (gather && gather(node, def) || ScopeNodes.has(node.name))\n                return false;\n        }\n        else if (node.to - node.from > 8192) {\n            // Allow caching for bigger internal nodes\n            for (let c of getScope(doc, node.node))\n                completions.push(c);\n            return false;\n        }\n    });\n    cache.set(node, completions);\n    return completions;\n}\nconst Identifier = /^[\\w$\\xa1-\\uffff][\\w$\\d\\xa1-\\uffff]*$/;\nconst dontComplete = [\n    \"TemplateString\", \"String\", \"RegExp\",\n    \"LineComment\", \"BlockComment\",\n    \"VariableDefinition\", \"TypeDefinition\", \"Label\",\n    \"PropertyDefinition\", \"PropertyName\",\n    \"PrivatePropertyDefinition\", \"PrivatePropertyName\",\n    \"JSXText\", \"JSXAttributeValue\", \"JSXOpenTag\", \"JSXCloseTag\", \"JSXSelfClosingTag\",\n    \".\", \"?.\"\n];\n/**\nCompletion source that looks up locally defined names in\nJavaScript code.\n*/\nfunction localCompletionSource(context) {\n    let inner = syntaxTree(context.state).resolveInner(context.pos, -1);\n    if (dontComplete.indexOf(inner.name) > -1)\n        return null;\n    let isWord = inner.name == \"VariableName\" ||\n        inner.to - inner.from < 20 && Identifier.test(context.state.sliceDoc(inner.from, inner.to));\n    if (!isWord && !context.explicit)\n        return null;\n    let options = [];\n    for (let pos = inner; pos; pos = pos.parent) {\n        if (ScopeNodes.has(pos.name))\n            options = options.concat(getScope(context.state.doc, pos));\n    }\n    return {\n        options,\n        from: isWord ? inner.from : context.pos,\n        validFor: Identifier\n    };\n}\nfunction pathFor(read, member, name) {\n    var _a;\n    let path = [];\n    for (;;) {\n        let obj = member.firstChild, prop;\n        if ((obj === null || obj === void 0 ? void 0 : obj.name) == \"VariableName\") {\n            path.push(read(obj));\n            return { path: path.reverse(), name };\n        }\n        else if ((obj === null || obj === void 0 ? void 0 : obj.name) == \"MemberExpression\" && ((_a = (prop = obj.lastChild)) === null || _a === void 0 ? void 0 : _a.name) == \"PropertyName\") {\n            path.push(read(prop));\n            member = obj;\n        }\n        else {\n            return null;\n        }\n    }\n}\n/**\nHelper function for defining JavaScript completion sources. It\nreturns the completable name and object path for a completion\ncontext, or null if no name/property completion should happen at\nthat position. For example, when completing after `a.b.c` it will\nreturn `{path: [\"a\", \"b\"], name: \"c\"}`. When completing after `x`\nit will return `{path: [], name: \"x\"}`. When not in a property or\nname, it will return null if `context.explicit` is false, and\n`{path: [], name: \"\"}` otherwise.\n*/\nfunction completionPath(context) {\n    let read = (node) => context.state.doc.sliceString(node.from, node.to);\n    let inner = syntaxTree(context.state).resolveInner(context.pos, -1);\n    if (inner.name == \"PropertyName\") {\n        return pathFor(read, inner.parent, read(inner));\n    }\n    else if ((inner.name == \".\" || inner.name == \"?.\") && inner.parent.name == \"MemberExpression\") {\n        return pathFor(read, inner.parent, \"\");\n    }\n    else if (dontComplete.indexOf(inner.name) > -1) {\n        return null;\n    }\n    else if (inner.name == \"VariableName\" || inner.to - inner.from < 20 && Identifier.test(read(inner))) {\n        return { path: [], name: read(inner) };\n    }\n    else if (inner.name == \"MemberExpression\") {\n        return pathFor(read, inner, \"\");\n    }\n    else {\n        return context.explicit ? { path: [], name: \"\" } : null;\n    }\n}\nfunction enumeratePropertyCompletions(obj, top) {\n    let options = [], seen = new Set;\n    for (let depth = 0;; depth++) {\n        for (let name of (Object.getOwnPropertyNames || Object.keys)(obj)) {\n            if (!/^[a-zA-Z_$\\xaa-\\uffdc][\\w$\\xaa-\\uffdc]*$/.test(name) || seen.has(name))\n                continue;\n            seen.add(name);\n            let value;\n            try {\n                value = obj[name];\n            }\n            catch (_) {\n                continue;\n            }\n            options.push({\n                label: name,\n                type: typeof value == \"function\" ? (/^[A-Z]/.test(name) ? \"class\" : top ? \"function\" : \"method\")\n                    : top ? \"variable\" : \"property\",\n                boost: -depth\n            });\n        }\n        let next = Object.getPrototypeOf(obj);\n        if (!next)\n            return options;\n        obj = next;\n    }\n}\n/**\nDefines a [completion source](https://codemirror.net/6/docs/ref/#autocomplete.CompletionSource) that\ncompletes from the given scope object (for example `globalThis`).\nWill enter properties of the object when completing properties on\na directly-named path.\n*/\nfunction scopeCompletionSource(scope) {\n    let cache = new Map;\n    return (context) => {\n        let path = completionPath(context);\n        if (!path)\n            return null;\n        let target = scope;\n        for (let step of path.path) {\n            target = target[step];\n            if (!target)\n                return null;\n        }\n        let options = cache.get(target);\n        if (!options)\n            cache.set(target, options = enumeratePropertyCompletions(target, !path.path.length));\n        return {\n            from: context.pos - path.name.length,\n            options,\n            validFor: Identifier\n        };\n    };\n}\n\n/**\nA language provider based on the [Lezer JavaScript\nparser](https://github.com/lezer-parser/javascript), extended with\nhighlighting and indentation information.\n*/\nconst javascriptLanguage = /*@__PURE__*/LRLanguage.define({\n    name: \"javascript\",\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/indentNodeProp.add({\n                IfStatement: /*@__PURE__*/continuedIndent({ except: /^\\s*({|else\\b)/ }),\n                TryStatement: /*@__PURE__*/continuedIndent({ except: /^\\s*({|catch\\b|finally\\b)/ }),\n                LabeledStatement: flatIndent,\n                SwitchBody: context => {\n                    let after = context.textAfter, closed = /^\\s*\\}/.test(after), isCase = /^\\s*(case|default)\\b/.test(after);\n                    return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;\n                },\n                Block: /*@__PURE__*/delimitedIndent({ closing: \"}\" }),\n                ArrowFunction: cx => cx.baseIndent + cx.unit,\n                \"TemplateString BlockComment\": () => null,\n                \"Statement Property\": /*@__PURE__*/continuedIndent({ except: /^\\s*{/ }),\n                JSXElement(context) {\n                    let closed = /^\\s*<\\//.test(context.textAfter);\n                    return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);\n                },\n                JSXEscape(context) {\n                    let closed = /\\s*\\}/.test(context.textAfter);\n                    return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);\n                },\n                \"JSXOpenTag JSXSelfClosingTag\"(context) {\n                    return context.column(context.node.from) + context.unit;\n                }\n            }),\n            /*@__PURE__*/foldNodeProp.add({\n                \"Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression ObjectType\": foldInside,\n                BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }\n            })\n        ]\n    }),\n    languageData: {\n        closeBrackets: { brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"`\"] },\n        commentTokens: { line: \"//\", block: { open: \"/*\", close: \"*/\" } },\n        indentOnInput: /^\\s*(?:case |default:|\\{|\\}|<\\/)$/,\n        wordChars: \"$\"\n    }\n});\nconst jsxSublanguage = {\n    test: node => /^JSX/.test(node.name),\n    facet: /*@__PURE__*/defineLanguageFacet({ commentTokens: { block: { open: \"{/*\", close: \"*/}\" } } })\n};\n/**\nA language provider for TypeScript.\n*/\nconst typescriptLanguage = /*@__PURE__*/javascriptLanguage.configure({ dialect: \"ts\" }, \"typescript\");\n/**\nLanguage provider for JSX.\n*/\nconst jsxLanguage = /*@__PURE__*/javascriptLanguage.configure({\n    dialect: \"jsx\",\n    props: [/*@__PURE__*/sublanguageProp.add(n => n.isTop ? [jsxSublanguage] : undefined)]\n});\n/**\nLanguage provider for JSX + TypeScript.\n*/\nconst tsxLanguage = /*@__PURE__*/javascriptLanguage.configure({\n    dialect: \"jsx ts\",\n    props: [/*@__PURE__*/sublanguageProp.add(n => n.isTop ? [jsxSublanguage] : undefined)]\n}, \"typescript\");\nlet kwCompletion = (name) => ({ label: name, type: \"keyword\" });\nconst keywords = /*@__PURE__*/\"break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield\".split(\" \").map(kwCompletion);\nconst typescriptKeywords = /*@__PURE__*/keywords.concat(/*@__PURE__*/[\"declare\", \"implements\", \"private\", \"protected\", \"public\"].map(kwCompletion));\n/**\nJavaScript support. Includes [snippet](https://codemirror.net/6/docs/ref/#lang-javascript.snippets)\nand local variable completion.\n*/\nfunction javascript(config = {}) {\n    let lang = config.jsx ? (config.typescript ? tsxLanguage : jsxLanguage)\n        : config.typescript ? typescriptLanguage : javascriptLanguage;\n    let completions = config.typescript ? typescriptSnippets.concat(typescriptKeywords) : snippets.concat(keywords);\n    return new LanguageSupport(lang, [\n        javascriptLanguage.data.of({\n            autocomplete: ifNotIn(dontComplete, completeFromList(completions))\n        }),\n        javascriptLanguage.data.of({\n            autocomplete: localCompletionSource\n        }),\n        config.jsx ? autoCloseTags : [],\n    ]);\n}\nfunction findOpenTag(node) {\n    for (;;) {\n        if (node.name == \"JSXOpenTag\" || node.name == \"JSXSelfClosingTag\" || node.name == \"JSXFragmentTag\")\n            return node;\n        if (node.name == \"JSXEscape\" || !node.parent)\n            return null;\n        node = node.parent;\n    }\n}\nfunction elementName(doc, tree, max = doc.length) {\n    for (let ch = tree === null || tree === void 0 ? void 0 : tree.firstChild; ch; ch = ch.nextSibling) {\n        if (ch.name == \"JSXIdentifier\" || ch.name == \"JSXBuiltin\" || ch.name == \"JSXNamespacedName\" ||\n            ch.name == \"JSXMemberExpression\")\n            return doc.sliceString(ch.from, Math.min(ch.to, max));\n    }\n    return \"\";\n}\nconst android = typeof navigator == \"object\" && /*@__PURE__*//Android\\b/.test(navigator.userAgent);\n/**\nExtension that will automatically insert JSX close tags when a `>` or\n`/` is typed.\n*/\nconst autoCloseTags = /*@__PURE__*/EditorView.inputHandler.of((view, from, to, text, defaultInsert) => {\n    if ((android ? view.composing : view.compositionStarted) || view.state.readOnly ||\n        from != to || (text != \">\" && text != \"/\") ||\n        !javascriptLanguage.isActiveAt(view.state, from, -1))\n        return false;\n    let base = defaultInsert(), { state } = base;\n    let closeTags = state.changeByRange(range => {\n        var _a;\n        let { head } = range, around = syntaxTree(state).resolveInner(head - 1, -1), name;\n        if (around.name == \"JSXStartTag\")\n            around = around.parent;\n        if (state.doc.sliceString(head - 1, head) != text || around.name == \"JSXAttributeValue\" && around.to > head) ;\n        else if (text == \">\" && around.name == \"JSXFragmentTag\") {\n            return { range, changes: { from: head, insert: `</>` } };\n        }\n        else if (text == \"/\" && around.name == \"JSXStartCloseTag\") {\n            let empty = around.parent, base = empty.parent;\n            if (base && empty.from == head - 2 &&\n                ((name = elementName(state.doc, base.firstChild, head)) || ((_a = base.firstChild) === null || _a === void 0 ? void 0 : _a.name) == \"JSXFragmentTag\")) {\n                let insert = `${name}>`;\n                return { range: EditorSelection.cursor(head + insert.length, -1), changes: { from: head, insert } };\n            }\n        }\n        else if (text == \">\") {\n            let openTag = findOpenTag(around);\n            if (openTag && openTag.name == \"JSXOpenTag\" &&\n                !/^\\/?>|^<\\//.test(state.doc.sliceString(head, head + 2)) &&\n                (name = elementName(state.doc, openTag, head)))\n                return { range, changes: { from: head, insert: `</${name}>` } };\n        }\n        return { range };\n    });\n    if (closeTags.changes.empty)\n        return false;\n    view.dispatch([\n        base,\n        state.update(closeTags, { userEvent: \"input.complete\", scrollIntoView: true })\n    ]);\n    return true;\n});\n\n/**\nConnects an [ESLint](https://eslint.org/) linter to CodeMirror's\n[lint](https://codemirror.net/6/docs/ref/#lint) integration. `eslint` should be an instance of the\n[`Linter`](https://eslint.org/docs/developer-guide/nodejs-api#linter)\nclass, and `config` an optional ESLint configuration. The return\nvalue of this function can be passed to [`linter`](https://codemirror.net/6/docs/ref/#lint.linter)\nto create a JavaScript linting extension.\n\nNote that ESLint targets node, and is tricky to run in the\nbrowser. The\n[eslint-linter-browserify](https://github.com/UziTech/eslint-linter-browserify)\npackage may help with that (see\n[example](https://github.com/UziTech/eslint-linter-browserify/blob/master/example/script.js)).\n*/\nfunction esLint(eslint, config) {\n    if (!config) {\n        config = {\n            parserOptions: { ecmaVersion: 2019, sourceType: \"module\" },\n            env: { browser: true, node: true, es6: true, es2015: true, es2017: true, es2020: true },\n            rules: {}\n        };\n        eslint.getRules().forEach((desc, name) => {\n            var _a;\n            if ((_a = desc.meta.docs) === null || _a === void 0 ? void 0 : _a.recommended)\n                config.rules[name] = 2;\n        });\n    }\n    return (view) => {\n        let { state } = view, found = [];\n        for (let { from, to } of javascriptLanguage.findRegions(state)) {\n            let fromLine = state.doc.lineAt(from), offset = { line: fromLine.number - 1, col: from - fromLine.from, pos: from };\n            for (let d of eslint.verify(state.sliceDoc(from, to), config))\n                found.push(translateDiagnostic(d, state.doc, offset));\n        }\n        return found;\n    };\n}\nfunction mapPos(line, col, doc, offset) {\n    return doc.line(line + offset.line).from + col + (line == 1 ? offset.col - 1 : -1);\n}\nfunction translateDiagnostic(input, doc, offset) {\n    let start = mapPos(input.line, input.column, doc, offset);\n    let result = {\n        from: start,\n        to: input.endLine != null && input.endColumn != 1 ? mapPos(input.endLine, input.endColumn, doc, offset) : start,\n        message: input.message,\n        source: input.ruleId ? \"eslint:\" + input.ruleId : \"eslint\",\n        severity: input.severity == 1 ? \"warning\" : \"error\",\n    };\n    if (input.fix) {\n        let { range, text } = input.fix, from = range[0] + offset.pos - start, to = range[1] + offset.pos - start;\n        result.actions = [{\n                name: \"fix\",\n                apply(view, start) {\n                    view.dispatch({ changes: { from: start + from, to: start + to, insert: text }, scrollIntoView: true });\n                }\n            }];\n    }\n    return result;\n}\n\nexport { autoCloseTags, completionPath, esLint, javascript, javascriptLanguage, jsxLanguage, localCompletionSource, scopeCompletionSource, snippets, tsxLanguage, typescriptLanguage, typescriptSnippets };\n","import { parser, configureNesting } from '@lezer/html';\nimport { cssLanguage, css } from '@codemirror/lang-css';\nimport { javascriptLanguage, typescriptLanguage, jsxLanguage, tsxLanguage, javascript } from '@codemirror/lang-javascript';\nimport { EditorView } from '@codemirror/view';\nimport { EditorSelection } from '@codemirror/state';\nimport { syntaxTree, LRLanguage, indentNodeProp, foldNodeProp, bracketMatchingHandle, LanguageSupport } from '@codemirror/language';\n\nconst Targets = [\"_blank\", \"_self\", \"_top\", \"_parent\"];\nconst Charsets = [\"ascii\", \"utf-8\", \"utf-16\", \"latin1\", \"latin1\"];\nconst Methods = [\"get\", \"post\", \"put\", \"delete\"];\nconst Encs = [\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"];\nconst Bool = [\"true\", \"false\"];\nconst S = {}; // Empty tag spec\nconst Tags = {\n    a: {\n        attrs: {\n            href: null, ping: null, type: null,\n            media: null,\n            target: Targets,\n            hreflang: null\n        }\n    },\n    abbr: S,\n    address: S,\n    area: {\n        attrs: {\n            alt: null, coords: null, href: null, target: null, ping: null,\n            media: null, hreflang: null, type: null,\n            shape: [\"default\", \"rect\", \"circle\", \"poly\"]\n        }\n    },\n    article: S,\n    aside: S,\n    audio: {\n        attrs: {\n            src: null, mediagroup: null,\n            crossorigin: [\"anonymous\", \"use-credentials\"],\n            preload: [\"none\", \"metadata\", \"auto\"],\n            autoplay: [\"autoplay\"],\n            loop: [\"loop\"],\n            controls: [\"controls\"]\n        }\n    },\n    b: S,\n    base: { attrs: { href: null, target: Targets } },\n    bdi: S,\n    bdo: S,\n    blockquote: { attrs: { cite: null } },\n    body: S,\n    br: S,\n    button: {\n        attrs: {\n            form: null, formaction: null, name: null, value: null,\n            autofocus: [\"autofocus\"],\n            disabled: [\"autofocus\"],\n            formenctype: Encs,\n            formmethod: Methods,\n            formnovalidate: [\"novalidate\"],\n            formtarget: Targets,\n            type: [\"submit\", \"reset\", \"button\"]\n        }\n    },\n    canvas: { attrs: { width: null, height: null } },\n    caption: S,\n    center: S,\n    cite: S,\n    code: S,\n    col: { attrs: { span: null } },\n    colgroup: { attrs: { span: null } },\n    command: {\n        attrs: {\n            type: [\"command\", \"checkbox\", \"radio\"],\n            label: null, icon: null, radiogroup: null, command: null, title: null,\n            disabled: [\"disabled\"],\n            checked: [\"checked\"]\n        }\n    },\n    data: { attrs: { value: null } },\n    datagrid: { attrs: { disabled: [\"disabled\"], multiple: [\"multiple\"] } },\n    datalist: { attrs: { data: null } },\n    dd: S,\n    del: { attrs: { cite: null, datetime: null } },\n    details: { attrs: { open: [\"open\"] } },\n    dfn: S,\n    div: S,\n    dl: S,\n    dt: S,\n    em: S,\n    embed: { attrs: { src: null, type: null, width: null, height: null } },\n    eventsource: { attrs: { src: null } },\n    fieldset: { attrs: { disabled: [\"disabled\"], form: null, name: null } },\n    figcaption: S,\n    figure: S,\n    footer: S,\n    form: {\n        attrs: {\n            action: null, name: null,\n            \"accept-charset\": Charsets,\n            autocomplete: [\"on\", \"off\"],\n            enctype: Encs,\n            method: Methods,\n            novalidate: [\"novalidate\"],\n            target: Targets\n        }\n    },\n    h1: S, h2: S, h3: S, h4: S, h5: S, h6: S,\n    head: {\n        children: [\"title\", \"base\", \"link\", \"style\", \"meta\", \"script\", \"noscript\", \"command\"]\n    },\n    header: S,\n    hgroup: S,\n    hr: S,\n    html: {\n        attrs: { manifest: null }\n    },\n    i: S,\n    iframe: {\n        attrs: {\n            src: null, srcdoc: null, name: null, width: null, height: null,\n            sandbox: [\"allow-top-navigation\", \"allow-same-origin\", \"allow-forms\", \"allow-scripts\"],\n            seamless: [\"seamless\"]\n        }\n    },\n    img: {\n        attrs: {\n            alt: null, src: null, ismap: null, usemap: null, width: null, height: null,\n            crossorigin: [\"anonymous\", \"use-credentials\"]\n        }\n    },\n    input: {\n        attrs: {\n            alt: null, dirname: null, form: null, formaction: null,\n            height: null, list: null, max: null, maxlength: null, min: null,\n            name: null, pattern: null, placeholder: null, size: null, src: null,\n            step: null, value: null, width: null,\n            accept: [\"audio/*\", \"video/*\", \"image/*\"],\n            autocomplete: [\"on\", \"off\"],\n            autofocus: [\"autofocus\"],\n            checked: [\"checked\"],\n            disabled: [\"disabled\"],\n            formenctype: Encs,\n            formmethod: Methods,\n            formnovalidate: [\"novalidate\"],\n            formtarget: Targets,\n            multiple: [\"multiple\"],\n            readonly: [\"readonly\"],\n            required: [\"required\"],\n            type: [\"hidden\", \"text\", \"search\", \"tel\", \"url\", \"email\", \"password\", \"datetime\", \"date\", \"month\",\n                \"week\", \"time\", \"datetime-local\", \"number\", \"range\", \"color\", \"checkbox\", \"radio\",\n                \"file\", \"submit\", \"image\", \"reset\", \"button\"]\n        }\n    },\n    ins: { attrs: { cite: null, datetime: null } },\n    kbd: S,\n    keygen: {\n        attrs: {\n            challenge: null, form: null, name: null,\n            autofocus: [\"autofocus\"],\n            disabled: [\"disabled\"],\n            keytype: [\"RSA\"]\n        }\n    },\n    label: { attrs: { for: null, form: null } },\n    legend: S,\n    li: { attrs: { value: null } },\n    link: {\n        attrs: {\n            href: null, type: null,\n            hreflang: null,\n            media: null,\n            sizes: [\"all\", \"16x16\", \"16x16 32x32\", \"16x16 32x32 64x64\"]\n        }\n    },\n    map: { attrs: { name: null } },\n    mark: S,\n    menu: { attrs: { label: null, type: [\"list\", \"context\", \"toolbar\"] } },\n    meta: {\n        attrs: {\n            content: null,\n            charset: Charsets,\n            name: [\"viewport\", \"application-name\", \"author\", \"description\", \"generator\", \"keywords\"],\n            \"http-equiv\": [\"content-language\", \"content-type\", \"default-style\", \"refresh\"]\n        }\n    },\n    meter: { attrs: { value: null, min: null, low: null, high: null, max: null, optimum: null } },\n    nav: S,\n    noscript: S,\n    object: {\n        attrs: {\n            data: null, type: null, name: null, usemap: null, form: null, width: null, height: null,\n            typemustmatch: [\"typemustmatch\"]\n        }\n    },\n    ol: { attrs: { reversed: [\"reversed\"], start: null, type: [\"1\", \"a\", \"A\", \"i\", \"I\"] },\n        children: [\"li\", \"script\", \"template\", \"ul\", \"ol\"] },\n    optgroup: { attrs: { disabled: [\"disabled\"], label: null } },\n    option: { attrs: { disabled: [\"disabled\"], label: null, selected: [\"selected\"], value: null } },\n    output: { attrs: { for: null, form: null, name: null } },\n    p: S,\n    param: { attrs: { name: null, value: null } },\n    pre: S,\n    progress: { attrs: { value: null, max: null } },\n    q: { attrs: { cite: null } },\n    rp: S,\n    rt: S,\n    ruby: S,\n    samp: S,\n    script: {\n        attrs: {\n            type: [\"text/javascript\"],\n            src: null,\n            async: [\"async\"],\n            defer: [\"defer\"],\n            charset: Charsets\n        }\n    },\n    section: S,\n    select: {\n        attrs: {\n            form: null, name: null, size: null,\n            autofocus: [\"autofocus\"],\n            disabled: [\"disabled\"],\n            multiple: [\"multiple\"]\n        }\n    },\n    slot: { attrs: { name: null } },\n    small: S,\n    source: { attrs: { src: null, type: null, media: null } },\n    span: S,\n    strong: S,\n    style: {\n        attrs: {\n            type: [\"text/css\"],\n            media: null,\n            scoped: null\n        }\n    },\n    sub: S,\n    summary: S,\n    sup: S,\n    table: S,\n    tbody: S,\n    td: { attrs: { colspan: null, rowspan: null, headers: null } },\n    template: S,\n    textarea: {\n        attrs: {\n            dirname: null, form: null, maxlength: null, name: null, placeholder: null,\n            rows: null, cols: null,\n            autofocus: [\"autofocus\"],\n            disabled: [\"disabled\"],\n            readonly: [\"readonly\"],\n            required: [\"required\"],\n            wrap: [\"soft\", \"hard\"]\n        }\n    },\n    tfoot: S,\n    th: { attrs: { colspan: null, rowspan: null, headers: null, scope: [\"row\", \"col\", \"rowgroup\", \"colgroup\"] } },\n    thead: S,\n    time: { attrs: { datetime: null } },\n    title: S,\n    tr: S,\n    track: {\n        attrs: {\n            src: null, label: null, default: null,\n            kind: [\"subtitles\", \"captions\", \"descriptions\", \"chapters\", \"metadata\"],\n            srclang: null\n        }\n    },\n    ul: { children: [\"li\", \"script\", \"template\", \"ul\", \"ol\"] },\n    var: S,\n    video: {\n        attrs: {\n            src: null, poster: null, width: null, height: null,\n            crossorigin: [\"anonymous\", \"use-credentials\"],\n            preload: [\"auto\", \"metadata\", \"none\"],\n            autoplay: [\"autoplay\"],\n            mediagroup: [\"movie\"],\n            muted: [\"muted\"],\n            controls: [\"controls\"]\n        }\n    },\n    wbr: S\n};\nconst GlobalAttrs = {\n    accesskey: null,\n    class: null,\n    contenteditable: Bool,\n    contextmenu: null,\n    dir: [\"ltr\", \"rtl\", \"auto\"],\n    draggable: [\"true\", \"false\", \"auto\"],\n    dropzone: [\"copy\", \"move\", \"link\", \"string:\", \"file:\"],\n    hidden: [\"hidden\"],\n    id: null,\n    inert: [\"inert\"],\n    itemid: null,\n    itemprop: null,\n    itemref: null,\n    itemscope: [\"itemscope\"],\n    itemtype: null,\n    lang: [\"ar\", \"bn\", \"de\", \"en-GB\", \"en-US\", \"es\", \"fr\", \"hi\", \"id\", \"ja\", \"pa\", \"pt\", \"ru\", \"tr\", \"zh\"],\n    spellcheck: Bool,\n    autocorrect: Bool,\n    autocapitalize: Bool,\n    style: null,\n    tabindex: null,\n    title: null,\n    translate: [\"yes\", \"no\"],\n    rel: [\"stylesheet\", \"alternate\", \"author\", \"bookmark\", \"help\", \"license\", \"next\", \"nofollow\", \"noreferrer\", \"prefetch\", \"prev\", \"search\", \"tag\"],\n    role: /*@__PURE__*/\"alert application article banner button cell checkbox complementary contentinfo dialog document feed figure form grid gridcell heading img list listbox listitem main navigation region row rowgroup search switch tab table tabpanel textbox timer\".split(\" \"),\n    \"aria-activedescendant\": null,\n    \"aria-atomic\": Bool,\n    \"aria-autocomplete\": [\"inline\", \"list\", \"both\", \"none\"],\n    \"aria-busy\": Bool,\n    \"aria-checked\": [\"true\", \"false\", \"mixed\", \"undefined\"],\n    \"aria-controls\": null,\n    \"aria-describedby\": null,\n    \"aria-disabled\": Bool,\n    \"aria-dropeffect\": null,\n    \"aria-expanded\": [\"true\", \"false\", \"undefined\"],\n    \"aria-flowto\": null,\n    \"aria-grabbed\": [\"true\", \"false\", \"undefined\"],\n    \"aria-haspopup\": Bool,\n    \"aria-hidden\": Bool,\n    \"aria-invalid\": [\"true\", \"false\", \"grammar\", \"spelling\"],\n    \"aria-label\": null,\n    \"aria-labelledby\": null,\n    \"aria-level\": null,\n    \"aria-live\": [\"off\", \"polite\", \"assertive\"],\n    \"aria-multiline\": Bool,\n    \"aria-multiselectable\": Bool,\n    \"aria-owns\": null,\n    \"aria-posinset\": null,\n    \"aria-pressed\": [\"true\", \"false\", \"mixed\", \"undefined\"],\n    \"aria-readonly\": Bool,\n    \"aria-relevant\": null,\n    \"aria-required\": Bool,\n    \"aria-selected\": [\"true\", \"false\", \"undefined\"],\n    \"aria-setsize\": null,\n    \"aria-sort\": [\"ascending\", \"descending\", \"none\", \"other\"],\n    \"aria-valuemax\": null,\n    \"aria-valuemin\": null,\n    \"aria-valuenow\": null,\n    \"aria-valuetext\": null\n};\nconst eventAttributes = /*@__PURE__*/(\"beforeunload copy cut dragstart dragover dragleave dragenter dragend \" +\n    \"drag paste focus blur change click load mousedown mouseenter mouseleave \" +\n    \"mouseup keydown keyup resize scroll unload\").split(\" \").map(n => \"on\" + n);\nfor (let a of eventAttributes)\n    GlobalAttrs[a] = null;\nclass Schema {\n    constructor(extraTags, extraAttrs) {\n        this.tags = Object.assign(Object.assign({}, Tags), extraTags);\n        this.globalAttrs = Object.assign(Object.assign({}, GlobalAttrs), extraAttrs);\n        this.allTags = Object.keys(this.tags);\n        this.globalAttrNames = Object.keys(this.globalAttrs);\n    }\n}\nSchema.default = /*@__PURE__*/new Schema;\nfunction elementName(doc, tree, max = doc.length) {\n    if (!tree)\n        return \"\";\n    let tag = tree.firstChild;\n    let name = tag && tag.getChild(\"TagName\");\n    return name ? doc.sliceString(name.from, Math.min(name.to, max)) : \"\";\n}\nfunction findParentElement(tree, skip = false) {\n    for (; tree; tree = tree.parent)\n        if (tree.name == \"Element\") {\n            if (skip)\n                skip = false;\n            else\n                return tree;\n        }\n    return null;\n}\nfunction allowedChildren(doc, tree, schema) {\n    let parentInfo = schema.tags[elementName(doc, findParentElement(tree))];\n    return (parentInfo === null || parentInfo === void 0 ? void 0 : parentInfo.children) || schema.allTags;\n}\nfunction openTags(doc, tree) {\n    let open = [];\n    for (let parent = findParentElement(tree); parent && !parent.type.isTop; parent = findParentElement(parent.parent)) {\n        let tagName = elementName(doc, parent);\n        if (tagName && parent.lastChild.name == \"CloseTag\")\n            break;\n        if (tagName && open.indexOf(tagName) < 0 && (tree.name == \"EndTag\" || tree.from >= parent.firstChild.to))\n            open.push(tagName);\n    }\n    return open;\n}\nconst identifier = /^[:\\-\\.\\w\\u00b7-\\uffff]*$/;\nfunction completeTag(state, schema, tree, from, to) {\n    let end = /\\s*>/.test(state.sliceDoc(to, to + 5)) ? \"\" : \">\";\n    let parent = findParentElement(tree, true);\n    return { from, to,\n        options: allowedChildren(state.doc, parent, schema).map(tagName => ({ label: tagName, type: \"type\" })).concat(openTags(state.doc, tree).map((tag, i) => ({ label: \"/\" + tag, apply: \"/\" + tag + end,\n            type: \"type\", boost: 99 - i }))),\n        validFor: /^\\/?[:\\-\\.\\w\\u00b7-\\uffff]*$/ };\n}\nfunction completeCloseTag(state, tree, from, to) {\n    let end = /\\s*>/.test(state.sliceDoc(to, to + 5)) ? \"\" : \">\";\n    return { from, to,\n        options: openTags(state.doc, tree).map((tag, i) => ({ label: tag, apply: tag + end, type: \"type\", boost: 99 - i })),\n        validFor: identifier };\n}\nfunction completeStartTag(state, schema, tree, pos) {\n    let options = [], level = 0;\n    for (let tagName of allowedChildren(state.doc, tree, schema))\n        options.push({ label: \"<\" + tagName, type: \"type\" });\n    for (let open of openTags(state.doc, tree))\n        options.push({ label: \"</\" + open + \">\", type: \"type\", boost: 99 - level++ });\n    return { from: pos, to: pos, options, validFor: /^<\\/?[:\\-\\.\\w\\u00b7-\\uffff]*$/ };\n}\nfunction completeAttrName(state, schema, tree, from, to) {\n    let elt = findParentElement(tree), info = elt ? schema.tags[elementName(state.doc, elt)] : null;\n    let localAttrs = info && info.attrs ? Object.keys(info.attrs) : [];\n    let names = info && info.globalAttrs === false ? localAttrs\n        : localAttrs.length ? localAttrs.concat(schema.globalAttrNames) : schema.globalAttrNames;\n    return { from, to,\n        options: names.map(attrName => ({ label: attrName, type: \"property\" })),\n        validFor: identifier };\n}\nfunction completeAttrValue(state, schema, tree, from, to) {\n    var _a;\n    let nameNode = (_a = tree.parent) === null || _a === void 0 ? void 0 : _a.getChild(\"AttributeName\");\n    let options = [], token = undefined;\n    if (nameNode) {\n        let attrName = state.sliceDoc(nameNode.from, nameNode.to);\n        let attrs = schema.globalAttrs[attrName];\n        if (!attrs) {\n            let elt = findParentElement(tree), info = elt ? schema.tags[elementName(state.doc, elt)] : null;\n            attrs = (info === null || info === void 0 ? void 0 : info.attrs) && info.attrs[attrName];\n        }\n        if (attrs) {\n            let base = state.sliceDoc(from, to).toLowerCase(), quoteStart = '\"', quoteEnd = '\"';\n            if (/^['\"]/.test(base)) {\n                token = base[0] == '\"' ? /^[^\"]*$/ : /^[^']*$/;\n                quoteStart = \"\";\n                quoteEnd = state.sliceDoc(to, to + 1) == base[0] ? \"\" : base[0];\n                base = base.slice(1);\n                from++;\n            }\n            else {\n                token = /^[^\\s<>='\"]*$/;\n            }\n            for (let value of attrs)\n                options.push({ label: value, apply: quoteStart + value + quoteEnd, type: \"constant\" });\n        }\n    }\n    return { from, to, options, validFor: token };\n}\nfunction htmlCompletionFor(schema, context) {\n    let { state, pos } = context, tree = syntaxTree(state).resolveInner(pos, -1), around = tree.resolve(pos);\n    for (let scan = pos, before; around == tree && (before = tree.childBefore(scan));) {\n        let last = before.lastChild;\n        if (!last || !last.type.isError || last.from < last.to)\n            break;\n        around = tree = before;\n        scan = last.from;\n    }\n    if (tree.name == \"TagName\") {\n        return tree.parent && /CloseTag$/.test(tree.parent.name) ? completeCloseTag(state, tree, tree.from, pos)\n            : completeTag(state, schema, tree, tree.from, pos);\n    }\n    else if (tree.name == \"StartTag\") {\n        return completeTag(state, schema, tree, pos, pos);\n    }\n    else if (tree.name == \"StartCloseTag\" || tree.name == \"IncompleteCloseTag\") {\n        return completeCloseTag(state, tree, pos, pos);\n    }\n    else if (tree.name == \"OpenTag\" || tree.name == \"SelfClosingTag\" || tree.name == \"AttributeName\") {\n        return completeAttrName(state, schema, tree, tree.name == \"AttributeName\" ? tree.from : pos, pos);\n    }\n    else if (tree.name == \"Is\" || tree.name == \"AttributeValue\" || tree.name == \"UnquotedAttributeValue\") {\n        return completeAttrValue(state, schema, tree, tree.name == \"Is\" ? pos : tree.from, pos);\n    }\n    else if (context.explicit && (around.name == \"Element\" || around.name == \"Text\" || around.name == \"Document\")) {\n        return completeStartTag(state, schema, tree, pos);\n    }\n    else {\n        return null;\n    }\n}\n/**\nHTML tag completion. Opens and closes tags and attributes in a\ncontext-aware way.\n*/\nfunction htmlCompletionSource(context) {\n    return htmlCompletionFor(Schema.default, context);\n}\n/**\nCreate a completion source for HTML extended with additional tags\nor attributes.\n*/\nfunction htmlCompletionSourceWith(config) {\n    let { extraTags, extraGlobalAttributes: extraAttrs } = config;\n    let schema = extraAttrs || extraTags ? new Schema(extraTags, extraAttrs) : Schema.default;\n    return (context) => htmlCompletionFor(schema, context);\n}\n\nconst jsonParser = /*@__PURE__*/javascriptLanguage.parser.configure({ top: \"SingleExpression\" });\nconst defaultNesting = [\n    { tag: \"script\",\n        attrs: attrs => attrs.type == \"text/typescript\" || attrs.lang == \"ts\",\n        parser: typescriptLanguage.parser },\n    { tag: \"script\",\n        attrs: attrs => attrs.type == \"text/babel\" || attrs.type == \"text/jsx\",\n        parser: jsxLanguage.parser },\n    { tag: \"script\",\n        attrs: attrs => attrs.type == \"text/typescript-jsx\",\n        parser: tsxLanguage.parser },\n    { tag: \"script\",\n        attrs(attrs) {\n            return /^(importmap|speculationrules|application\\/(.+\\+)?json)$/i.test(attrs.type);\n        },\n        parser: jsonParser },\n    { tag: \"script\",\n        attrs(attrs) {\n            return !attrs.type || /^(?:text|application)\\/(?:x-)?(?:java|ecma)script$|^module$|^$/i.test(attrs.type);\n        },\n        parser: javascriptLanguage.parser },\n    { tag: \"style\",\n        attrs(attrs) {\n            return (!attrs.lang || attrs.lang == \"css\") && (!attrs.type || /^(text\\/)?(x-)?(stylesheet|css)$/i.test(attrs.type));\n        },\n        parser: cssLanguage.parser }\n];\nconst defaultAttrs = /*@__PURE__*/[\n    { name: \"style\",\n        parser: /*@__PURE__*/cssLanguage.parser.configure({ top: \"Styles\" }) }\n].concat(/*@__PURE__*/eventAttributes.map(name => ({ name, parser: javascriptLanguage.parser })));\n/**\nA language provider based on the [Lezer HTML\nparser](https://github.com/lezer-parser/html), extended with the\nJavaScript and CSS parsers to parse the content of `<script>` and\n`<style>` tags.\n*/\nconst htmlPlain = /*@__PURE__*/LRLanguage.define({\n    name: \"html\",\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/indentNodeProp.add({\n                Element(context) {\n                    let after = /^(\\s*)(<\\/)?/.exec(context.textAfter);\n                    if (context.node.to <= context.pos + after[0].length)\n                        return context.continue();\n                    return context.lineIndent(context.node.from) + (after[2] ? 0 : context.unit);\n                },\n                \"OpenTag CloseTag SelfClosingTag\"(context) {\n                    return context.column(context.node.from) + context.unit;\n                },\n                Document(context) {\n                    if (context.pos + /\\s*/.exec(context.textAfter)[0].length < context.node.to)\n                        return context.continue();\n                    let endElt = null, close;\n                    for (let cur = context.node;;) {\n                        let last = cur.lastChild;\n                        if (!last || last.name != \"Element\" || last.to != cur.to)\n                            break;\n                        endElt = cur = last;\n                    }\n                    if (endElt && !((close = endElt.lastChild) && (close.name == \"CloseTag\" || close.name == \"SelfClosingTag\")))\n                        return context.lineIndent(endElt.from) + context.unit;\n                    return null;\n                }\n            }),\n            /*@__PURE__*/foldNodeProp.add({\n                Element(node) {\n                    let first = node.firstChild, last = node.lastChild;\n                    if (!first || first.name != \"OpenTag\")\n                        return null;\n                    return { from: first.to, to: last.name == \"CloseTag\" ? last.from : node.to };\n                }\n            }),\n            /*@__PURE__*/bracketMatchingHandle.add({\n                \"OpenTag CloseTag\": node => node.getChild(\"TagName\")\n            })\n        ]\n    }),\n    languageData: {\n        commentTokens: { block: { open: \"<!--\", close: \"-->\" } },\n        indentOnInput: /^\\s*<\\/\\w+\\W$/,\n        wordChars: \"-._\"\n    }\n});\n/**\nA language provider based on the [Lezer HTML\nparser](https://github.com/lezer-parser/html), extended with the\nJavaScript and CSS parsers to parse the content of `<script>` and\n`<style>` tags.\n*/\nconst htmlLanguage = /*@__PURE__*/htmlPlain.configure({\n    wrap: /*@__PURE__*/configureNesting(defaultNesting, defaultAttrs)\n});\n/**\nLanguage support for HTML, including\n[`htmlCompletion`](https://codemirror.net/6/docs/ref/#lang-html.htmlCompletion) and JavaScript and\nCSS support extensions.\n*/\nfunction html(config = {}) {\n    let dialect = \"\", wrap;\n    if (config.matchClosingTags === false)\n        dialect = \"noMatch\";\n    if (config.selfClosingTags === true)\n        dialect = (dialect ? dialect + \" \" : \"\") + \"selfClosing\";\n    if (config.nestedLanguages && config.nestedLanguages.length ||\n        config.nestedAttributes && config.nestedAttributes.length)\n        wrap = configureNesting((config.nestedLanguages || []).concat(defaultNesting), (config.nestedAttributes || []).concat(defaultAttrs));\n    let lang = wrap ? htmlPlain.configure({ wrap, dialect }) : dialect ? htmlLanguage.configure({ dialect }) : htmlLanguage;\n    return new LanguageSupport(lang, [\n        htmlLanguage.data.of({ autocomplete: htmlCompletionSourceWith(config) }),\n        config.autoCloseTags !== false ? autoCloseTags : [],\n        javascript().support,\n        css().support\n    ]);\n}\nconst selfClosers = /*@__PURE__*/new Set(/*@__PURE__*/\"area base br col command embed frame hr img input keygen link meta param source track wbr menuitem\".split(\" \"));\n/**\nExtension that will automatically insert close tags when a `>` or\n`/` is typed.\n*/\nconst autoCloseTags = /*@__PURE__*/EditorView.inputHandler.of((view, from, to, text, insertTransaction) => {\n    if (view.composing || view.state.readOnly || from != to || (text != \">\" && text != \"/\") ||\n        !htmlLanguage.isActiveAt(view.state, from, -1))\n        return false;\n    let base = insertTransaction(), { state } = base;\n    let closeTags = state.changeByRange(range => {\n        var _a, _b, _c;\n        let didType = state.doc.sliceString(range.from - 1, range.to) == text;\n        let { head } = range, after = syntaxTree(state).resolveInner(head, -1), name;\n        if (didType && text == \">\" && after.name == \"EndTag\") {\n            let tag = after.parent;\n            if (((_b = (_a = tag.parent) === null || _a === void 0 ? void 0 : _a.lastChild) === null || _b === void 0 ? void 0 : _b.name) != \"CloseTag\" &&\n                (name = elementName(state.doc, tag.parent, head)) &&\n                !selfClosers.has(name)) {\n                let to = head + (state.doc.sliceString(head, head + 1) === \">\" ? 1 : 0);\n                let insert = `</${name}>`;\n                return { range, changes: { from: head, to, insert } };\n            }\n        }\n        else if (didType && text == \"/\" && after.name == \"IncompleteCloseTag\") {\n            let tag = after.parent;\n            if (after.from == head - 2 && ((_c = tag.lastChild) === null || _c === void 0 ? void 0 : _c.name) != \"CloseTag\" &&\n                (name = elementName(state.doc, tag, head)) && !selfClosers.has(name)) {\n                let to = head + (state.doc.sliceString(head, head + 1) === \">\" ? 1 : 0);\n                let insert = `${name}>`;\n                return {\n                    range: EditorSelection.cursor(head + insert.length, -1),\n                    changes: { from: head, to, insert }\n                };\n            }\n        }\n        return { range };\n    });\n    if (closeTags.changes.empty)\n        return false;\n    view.dispatch([\n        base,\n        state.update(closeTags, {\n            userEvent: \"input.complete\",\n            scrollIntoView: true\n        })\n    ]);\n    return true;\n});\n\nexport { autoCloseTags, html, htmlCompletionSource, htmlCompletionSourceWith, htmlLanguage, htmlPlain };\n","import { EditorSelection, countColumn, Prec, EditorState } from '@codemirror/state';\nimport { keymap } from '@codemirror/view';\nimport { defineLanguageFacet, foldNodeProp, indentNodeProp, languageDataProp, foldService, syntaxTree, Language, LanguageDescription, ParseContext, indentUnit, LanguageSupport } from '@codemirror/language';\nimport { CompletionContext } from '@codemirror/autocomplete';\nimport { parser, GFM, Subscript, Superscript, Emoji, MarkdownParser, parseCode } from '@lezer/markdown';\nimport { html, htmlCompletionSource } from '@codemirror/lang-html';\nimport { NodeProp } from '@lezer/common';\n\nconst data = /*@__PURE__*/defineLanguageFacet({ commentTokens: { block: { open: \"<!--\", close: \"-->\" } } });\nconst headingProp = /*@__PURE__*/new NodeProp();\nconst commonmark = /*@__PURE__*/parser.configure({\n    props: [\n        /*@__PURE__*/foldNodeProp.add(type => {\n            return !type.is(\"Block\") || type.is(\"Document\") || isHeading(type) != null || isList(type) ? undefined\n                : (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to });\n        }),\n        /*@__PURE__*/headingProp.add(isHeading),\n        /*@__PURE__*/indentNodeProp.add({\n            Document: () => null\n        }),\n        /*@__PURE__*/languageDataProp.add({\n            Document: data\n        })\n    ]\n});\nfunction isHeading(type) {\n    let match = /^(?:ATX|Setext)Heading(\\d)$/.exec(type.name);\n    return match ? +match[1] : undefined;\n}\nfunction isList(type) {\n    return type.name == \"OrderedList\" || type.name == \"BulletList\";\n}\nfunction findSectionEnd(headerNode, level) {\n    let last = headerNode;\n    for (;;) {\n        let next = last.nextSibling, heading;\n        if (!next || (heading = isHeading(next.type)) != null && heading <= level)\n            break;\n        last = next;\n    }\n    return last.to;\n}\nconst headerIndent = /*@__PURE__*/foldService.of((state, start, end) => {\n    for (let node = syntaxTree(state).resolveInner(end, -1); node; node = node.parent) {\n        if (node.from < start)\n            break;\n        let heading = node.type.prop(headingProp);\n        if (heading == null)\n            continue;\n        let upto = findSectionEnd(node, heading);\n        if (upto > end)\n            return { from: end, to: upto };\n    }\n    return null;\n});\nfunction mkLang(parser) {\n    return new Language(data, parser, [headerIndent], \"markdown\");\n}\n/**\nLanguage support for strict CommonMark.\n*/\nconst commonmarkLanguage = /*@__PURE__*/mkLang(commonmark);\nconst extended = /*@__PURE__*/commonmark.configure([GFM, Subscript, Superscript, Emoji, {\n        props: [\n            /*@__PURE__*/foldNodeProp.add({\n                Table: (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to })\n            })\n        ]\n    }]);\n/**\nLanguage support for [GFM](https://github.github.com/gfm/) plus\nsubscript, superscript, and emoji syntax.\n*/\nconst markdownLanguage = /*@__PURE__*/mkLang(extended);\nfunction getCodeParser(languages, defaultLanguage) {\n    return (info) => {\n        if (info && languages) {\n            let found = null;\n            // Strip anything after whitespace\n            info = /\\S*/.exec(info)[0];\n            if (typeof languages == \"function\")\n                found = languages(info);\n            else\n                found = LanguageDescription.matchLanguageName(languages, info, true);\n            if (found instanceof LanguageDescription)\n                return found.support ? found.support.language.parser : ParseContext.getSkippingParser(found.load());\n            else if (found)\n                return found.parser;\n        }\n        return defaultLanguage ? defaultLanguage.parser : null;\n    };\n}\n\nclass Context {\n    constructor(node, from, to, spaceBefore, spaceAfter, type, item) {\n        this.node = node;\n        this.from = from;\n        this.to = to;\n        this.spaceBefore = spaceBefore;\n        this.spaceAfter = spaceAfter;\n        this.type = type;\n        this.item = item;\n    }\n    blank(maxWidth, trailing = true) {\n        let result = this.spaceBefore + (this.node.name == \"Blockquote\" ? \">\" : \"\");\n        if (maxWidth != null) {\n            while (result.length < maxWidth)\n                result += \" \";\n            return result;\n        }\n        else {\n            for (let i = this.to - this.from - result.length - this.spaceAfter.length; i > 0; i--)\n                result += \" \";\n            return result + (trailing ? this.spaceAfter : \"\");\n        }\n    }\n    marker(doc, add) {\n        let number = this.node.name == \"OrderedList\" ? String((+itemNumber(this.item, doc)[2] + add)) : \"\";\n        return this.spaceBefore + number + this.type + this.spaceAfter;\n    }\n}\nfunction getContext(node, doc) {\n    let nodes = [], context = [];\n    for (let cur = node; cur; cur = cur.parent) {\n        if (cur.name == \"FencedCode\")\n            return context;\n        if (cur.name == \"ListItem\" || cur.name == \"Blockquote\")\n            nodes.push(cur);\n    }\n    for (let i = nodes.length - 1; i >= 0; i--) {\n        let node = nodes[i], match;\n        let line = doc.lineAt(node.from), startPos = node.from - line.from;\n        if (node.name == \"Blockquote\" && (match = /^ *>( ?)/.exec(line.text.slice(startPos)))) {\n            context.push(new Context(node, startPos, startPos + match[0].length, \"\", match[1], \">\", null));\n        }\n        else if (node.name == \"ListItem\" && node.parent.name == \"OrderedList\" &&\n            (match = /^( *)\\d+([.)])( *)/.exec(line.text.slice(startPos)))) {\n            let after = match[3], len = match[0].length;\n            if (after.length >= 4) {\n                after = after.slice(0, after.length - 4);\n                len -= 4;\n            }\n            context.push(new Context(node.parent, startPos, startPos + len, match[1], after, match[2], node));\n        }\n        else if (node.name == \"ListItem\" && node.parent.name == \"BulletList\" &&\n            (match = /^( *)([-+*])( {1,4}\\[[ xX]\\])?( +)/.exec(line.text.slice(startPos)))) {\n            let after = match[4], len = match[0].length;\n            if (after.length > 4) {\n                after = after.slice(0, after.length - 4);\n                len -= 4;\n            }\n            let type = match[2];\n            if (match[3])\n                type += match[3].replace(/[xX]/, ' ');\n            context.push(new Context(node.parent, startPos, startPos + len, match[1], after, type, node));\n        }\n    }\n    return context;\n}\nfunction itemNumber(item, doc) {\n    return /^(\\s*)(\\d+)(?=[.)])/.exec(doc.sliceString(item.from, item.from + 10));\n}\nfunction renumberList(after, doc, changes, offset = 0) {\n    for (let prev = -1, node = after;;) {\n        if (node.name == \"ListItem\") {\n            let m = itemNumber(node, doc);\n            let number = +m[2];\n            if (prev >= 0) {\n                if (number != prev + 1)\n                    return;\n                changes.push({ from: node.from + m[1].length, to: node.from + m[0].length, insert: String(prev + 2 + offset) });\n            }\n            prev = number;\n        }\n        let next = node.nextSibling;\n        if (!next)\n            break;\n        node = next;\n    }\n}\nfunction normalizeIndent(content, state) {\n    let blank = /^[ \\t]*/.exec(content)[0].length;\n    if (!blank || state.facet(indentUnit) != \"\\t\")\n        return content;\n    let col = countColumn(content, 4, blank);\n    let space = \"\";\n    for (let i = col; i > 0;) {\n        if (i >= 4) {\n            space += \"\\t\";\n            i -= 4;\n        }\n        else {\n            space += \" \";\n            i--;\n        }\n    }\n    return space + content.slice(blank);\n}\n/**\nThis command, when invoked in Markdown context with cursor\nselection(s), will create a new line with the markup for\nblockquotes and lists that were active on the old line. If the\ncursor was directly after the end of the markup for the old line,\ntrailing whitespace and list markers are removed from that line.\n\nThe command does nothing in non-Markdown context, so it should\nnot be used as the only binding for Enter (even in a Markdown\ndocument, HTML and code regions might use a different language).\n*/\nconst insertNewlineContinueMarkup = ({ state, dispatch }) => {\n    let tree = syntaxTree(state), { doc } = state;\n    let dont = null, changes = state.changeByRange(range => {\n        if (!range.empty || !markdownLanguage.isActiveAt(state, range.from, 0))\n            return dont = { range };\n        let pos = range.from, line = doc.lineAt(pos);\n        let context = getContext(tree.resolveInner(pos, -1), doc);\n        while (context.length && context[context.length - 1].from > pos - line.from)\n            context.pop();\n        if (!context.length)\n            return dont = { range };\n        let inner = context[context.length - 1];\n        if (inner.to - inner.spaceAfter.length > pos - line.from)\n            return dont = { range };\n        let emptyLine = pos >= (inner.to - inner.spaceAfter.length) && !/\\S/.test(line.text.slice(inner.to));\n        // Empty line in list\n        if (inner.item && emptyLine) {\n            let first = inner.node.firstChild, second = inner.node.getChild(\"ListItem\", \"ListItem\");\n            // Not second item or blank line before: delete a level of markup\n            if (first.to >= pos || second && second.to < pos ||\n                line.from > 0 && !/[^\\s>]/.test(doc.lineAt(line.from - 1).text)) {\n                let next = context.length > 1 ? context[context.length - 2] : null;\n                let delTo, insert = \"\";\n                if (next && next.item) { // Re-add marker for the list at the next level\n                    delTo = line.from + next.from;\n                    insert = next.marker(doc, 1);\n                }\n                else {\n                    delTo = line.from + (next ? next.to : 0);\n                }\n                let changes = [{ from: delTo, to: pos, insert }];\n                if (inner.node.name == \"OrderedList\")\n                    renumberList(inner.item, doc, changes, -2);\n                if (next && next.node.name == \"OrderedList\")\n                    renumberList(next.item, doc, changes);\n                return { range: EditorSelection.cursor(delTo + insert.length), changes };\n            }\n            else { // Move second item down, making tight two-item list non-tight\n                let insert = blankLine(context, state, line);\n                return { range: EditorSelection.cursor(pos + insert.length + 1),\n                    changes: { from: line.from, insert: insert + state.lineBreak } };\n            }\n        }\n        if (inner.node.name == \"Blockquote\" && emptyLine && line.from) {\n            let prevLine = doc.lineAt(line.from - 1), quoted = />\\s*$/.exec(prevLine.text);\n            // Two aligned empty quoted lines in a row\n            if (quoted && quoted.index == inner.from) {\n                let changes = state.changes([{ from: prevLine.from + quoted.index, to: prevLine.to },\n                    { from: line.from + inner.from, to: line.to }]);\n                return { range: range.map(changes), changes };\n            }\n        }\n        let changes = [];\n        if (inner.node.name == \"OrderedList\")\n            renumberList(inner.item, doc, changes);\n        let continued = inner.item && inner.item.from < line.from;\n        let insert = \"\";\n        // If not dedented\n        if (!continued || /^[\\s\\d.)\\-+*>]*/.exec(line.text)[0].length >= inner.to) {\n            for (let i = 0, e = context.length - 1; i <= e; i++) {\n                insert += i == e && !continued ? context[i].marker(doc, 1)\n                    : context[i].blank(i < e ? countColumn(line.text, 4, context[i + 1].from) - insert.length : null);\n            }\n        }\n        let from = pos;\n        while (from > line.from && /\\s/.test(line.text.charAt(from - line.from - 1)))\n            from--;\n        insert = normalizeIndent(insert, state);\n        if (nonTightList(inner.node, state.doc))\n            insert = blankLine(context, state, line) + state.lineBreak + insert;\n        changes.push({ from, to: pos, insert: state.lineBreak + insert });\n        return { range: EditorSelection.cursor(from + insert.length + 1), changes };\n    });\n    if (dont)\n        return false;\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"input\" }));\n    return true;\n};\nfunction isMark(node) {\n    return node.name == \"QuoteMark\" || node.name == \"ListMark\";\n}\nfunction nonTightList(node, doc) {\n    if (node.name != \"OrderedList\" && node.name != \"BulletList\")\n        return false;\n    let first = node.firstChild, second = node.getChild(\"ListItem\", \"ListItem\");\n    if (!second)\n        return false;\n    let line1 = doc.lineAt(first.to), line2 = doc.lineAt(second.from);\n    let empty = /^[\\s>]*$/.test(line1.text);\n    return line1.number + (empty ? 0 : 1) < line2.number;\n}\nfunction blankLine(context, state, line) {\n    let insert = \"\";\n    for (let i = 0, e = context.length - 2; i <= e; i++) {\n        insert += context[i].blank(i < e\n            ? countColumn(line.text, 4, Math.min(line.text.length, context[i + 1].from)) - insert.length\n            : null, i < e);\n    }\n    return normalizeIndent(insert, state);\n}\nfunction contextNodeForDelete(tree, pos) {\n    let node = tree.resolveInner(pos, -1), scan = pos;\n    if (isMark(node)) {\n        scan = node.from;\n        node = node.parent;\n    }\n    for (let prev; prev = node.childBefore(scan);) {\n        if (isMark(prev)) {\n            scan = prev.from;\n        }\n        else if (prev.name == \"OrderedList\" || prev.name == \"BulletList\") {\n            node = prev.lastChild;\n            scan = node.to;\n        }\n        else {\n            break;\n        }\n    }\n    return node;\n}\n/**\nThis command will, when invoked in a Markdown context with the\ncursor directly after list or blockquote markup, delete one level\nof markup. When the markup is for a list, it will be replaced by\nspaces on the first invocation (a further invocation will delete\nthe spaces), to make it easy to continue a list.\n\nWhen not after Markdown block markup, this command will return\nfalse, so it is intended to be bound alongside other deletion\ncommands, with a higher precedence than the more generic commands.\n*/\nconst deleteMarkupBackward = ({ state, dispatch }) => {\n    let tree = syntaxTree(state);\n    let dont = null, changes = state.changeByRange(range => {\n        let pos = range.from, { doc } = state;\n        if (range.empty && markdownLanguage.isActiveAt(state, range.from)) {\n            let line = doc.lineAt(pos);\n            let context = getContext(contextNodeForDelete(tree, pos), doc);\n            if (context.length) {\n                let inner = context[context.length - 1];\n                let spaceEnd = inner.to - inner.spaceAfter.length + (inner.spaceAfter ? 1 : 0);\n                // Delete extra trailing space after markup\n                if (pos - line.from > spaceEnd && !/\\S/.test(line.text.slice(spaceEnd, pos - line.from)))\n                    return { range: EditorSelection.cursor(line.from + spaceEnd),\n                        changes: { from: line.from + spaceEnd, to: pos } };\n                if (pos - line.from == spaceEnd &&\n                    // Only apply this if we're on the line that has the\n                    // construct's syntax, or there's only indentation in the\n                    // target range\n                    (!inner.item || line.from <= inner.item.from || !/\\S/.test(line.text.slice(0, inner.to)))) {\n                    let start = line.from + inner.from;\n                    // Replace a list item marker with blank space\n                    if (inner.item && inner.node.from < inner.item.from && /\\S/.test(line.text.slice(inner.from, inner.to))) {\n                        let insert = inner.blank(countColumn(line.text, 4, inner.to) - countColumn(line.text, 4, inner.from));\n                        if (start == line.from)\n                            insert = normalizeIndent(insert, state);\n                        return { range: EditorSelection.cursor(start + insert.length),\n                            changes: { from: start, to: line.from + inner.to, insert } };\n                    }\n                    // Delete one level of indentation\n                    if (start < pos)\n                        return { range: EditorSelection.cursor(start), changes: { from: start, to: pos } };\n                }\n            }\n        }\n        return dont = { range };\n    });\n    if (dont)\n        return false;\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"delete\" }));\n    return true;\n};\n\n/**\nA small keymap with Markdown-specific bindings. Binds Enter to\n[`insertNewlineContinueMarkup`](https://codemirror.net/6/docs/ref/#lang-markdown.insertNewlineContinueMarkup)\nand Backspace to\n[`deleteMarkupBackward`](https://codemirror.net/6/docs/ref/#lang-markdown.deleteMarkupBackward).\n*/\nconst markdownKeymap = [\n    { key: \"Enter\", run: insertNewlineContinueMarkup },\n    { key: \"Backspace\", run: deleteMarkupBackward }\n];\nconst htmlNoMatch = /*@__PURE__*/html({ matchClosingTags: false });\n/**\nMarkdown language support.\n*/\nfunction markdown(config = {}) {\n    let { codeLanguages, defaultCodeLanguage, addKeymap = true, base: { parser } = commonmarkLanguage, completeHTMLTags = true, htmlTagLanguage = htmlNoMatch } = config;\n    if (!(parser instanceof MarkdownParser))\n        throw new RangeError(\"Base parser provided to `markdown` should be a Markdown parser\");\n    let extensions = config.extensions ? [config.extensions] : [];\n    let support = [htmlTagLanguage.support], defaultCode;\n    if (defaultCodeLanguage instanceof LanguageSupport) {\n        support.push(defaultCodeLanguage.support);\n        defaultCode = defaultCodeLanguage.language;\n    }\n    else if (defaultCodeLanguage) {\n        defaultCode = defaultCodeLanguage;\n    }\n    let codeParser = codeLanguages || defaultCode ? getCodeParser(codeLanguages, defaultCode) : undefined;\n    extensions.push(parseCode({ codeParser, htmlParser: htmlTagLanguage.language.parser }));\n    if (addKeymap)\n        support.push(Prec.high(keymap.of(markdownKeymap)));\n    let lang = mkLang(parser.configure(extensions));\n    if (completeHTMLTags)\n        support.push(lang.data.of({ autocomplete: htmlTagCompletion }));\n    return new LanguageSupport(lang, support);\n}\nfunction htmlTagCompletion(context) {\n    let { state, pos } = context, m = /<[:\\-\\.\\w\\u00b7-\\uffff]*$/.exec(state.sliceDoc(pos - 25, pos));\n    if (!m)\n        return null;\n    let tree = syntaxTree(state).resolveInner(pos, -1);\n    while (tree && !tree.type.isTop) {\n        if (tree.name == \"CodeBlock\" || tree.name == \"FencedCode\" || tree.name == \"ProcessingInstructionBlock\" ||\n            tree.name == \"CommentBlock\" || tree.name == \"Link\" || tree.name == \"Image\")\n            return null;\n        tree = tree.parent;\n    }\n    return {\n        from: pos - m[0].length, to: pos,\n        options: htmlTagCompletions(),\n        validFor: /^<[:\\-\\.\\w\\u00b7-\\uffff]*$/\n    };\n}\nlet _tagCompletions = null;\nfunction htmlTagCompletions() {\n    if (_tagCompletions)\n        return _tagCompletions;\n    let result = htmlCompletionSource(new CompletionContext(EditorState.create({ extensions: htmlNoMatch }), 0, true));\n    return _tagCompletions = result ? result.options : [];\n}\n\nexport { commonmarkLanguage, deleteMarkupBackward, insertNewlineContinueMarkup, markdown, markdownKeymap, markdownLanguage };\n","/**\r\n * @fileoverview Markdown support extensions for CodeMirror\r\n * @module obsidian-editor/extensions/markdown-support\r\n */\r\n\r\nimport { EditorView } from '@codemirror/view';\r\nimport { Extension, StateEffect, StateField } from '@codemirror/state';\r\nimport { markdown } from '@codemirror/lang-markdown';\r\nimport { languages } from '@codemirror/language-data';\r\n\r\n/**\r\n * State effect for changing the markdown syntax mode\r\n */\r\nexport const setMarkdownSyntaxMode = StateEffect.define<'live' | 'preview'>();\r\n\r\n/**\r\n * Create a markdown syntax plugin for the editor\r\n * @returns Extension for markdown syntax support\r\n */\r\nexport function createMarkdownSyntaxPlugin(): Extension {\r\n  return [\r\n    // Core markdown language support\r\n    markdown({\r\n      codeLanguages: languages,\r\n      addKeymap: true\r\n    }),\r\n    // Optional: Add custom state field to track rendering mode\r\n    markdownRenderModeField\r\n  ];\r\n}\r\n\r\n/**\r\n * State field for tracking the markdown rendering mode\r\n */\r\nconst markdownRenderModeField = StateField.define<'live' | 'preview'>({\r\n  create() {\r\n    return 'live';\r\n  },\r\n  update(value, tr) {\r\n    for (const effect of tr.effects) {\r\n      if (effect.is(setMarkdownSyntaxMode)) {\r\n        return effect.value;\r\n      }\r\n    }\r\n    return value;\r\n  },\r\n  provide(field) {\r\n    return EditorView.contentAttributes.from(field, mode => ({\r\n      'data-markdown-mode': mode\r\n    }));\r\n  }\r\n});\r\n\r\n/**\r\n * State effect that signals a markdown syntax mode change\r\n */\r\nexport const markdownSyntaxModeEffect = setMarkdownSyntaxMode; ","import { Extension } from '@codemirror/state';\r\nimport { EditorView, ViewPlugin } from '@codemirror/view';\r\n\r\n/**\r\n * Creates a plugin that patches Lezer functions to prevent errors\r\n * related to \"Cannot read properties of undefined (reading 'some')\"\r\n */\r\nexport function createLezerSafetyPlugin(): Extension {\r\n  // Use ViewPlugin to hook into the editor lifecycle\r\n  return ViewPlugin.define(() => {\r\n    console.log(\"Initializing Lezer safety plugin\");\r\n    \r\n    return {\r\n      update(update) {\r\n        try {\r\n          // Access the view's internal structure to apply our patches\r\n          const view = update.view as any;\r\n          \r\n          // Find the parser instance\r\n          if (view && view.plugin && view.dispatch) {\r\n            // Try to access internal plugins - note this is accessing private properties\r\n            const viewPlugins = view._plugins || view.state.facet({name: \"plugins\"});\r\n            \r\n            // Iterate through plugins to find language-related ones\r\n            if (viewPlugins && Array.isArray(viewPlugins)) {\r\n              viewPlugins.forEach(plugin => {\r\n                // Try to patch Lezer-related components\r\n                if (plugin && plugin.extension && plugin.extension.parser) {\r\n                  const parser = plugin.extension.parser;\r\n                  \r\n                  // Create backup of original methods\r\n                  const originalHasChild = parser.hasChild;\r\n                  \r\n                  if (typeof originalHasChild === 'function') {\r\n                    // Replace with safer version\r\n                    parser.hasChild = function safeHasChild(type: any, node: any, predicate: any) {\r\n                      if (!node || !node.children) {\r\n                        console.warn(\"SafeHasChild: node or node.children is undefined\");\r\n                        return false;\r\n                      }\r\n                      \r\n                      try {\r\n                        return originalHasChild(type, node, predicate);\r\n                      } catch (e) {\r\n                        console.warn(\"SafeHasChild: caught error\", e);\r\n                        return false;\r\n                      }\r\n                    };\r\n                    \r\n                    console.log(\"Successfully patched parser.hasChild\");\r\n                  }\r\n                }\r\n              });\r\n            }\r\n          }\r\n        } catch (error) {\r\n          // Log but don't crash\r\n          console.warn(\"Error applying Lezer safety patches:\", error);\r\n        }\r\n      }\r\n    };\r\n  });\r\n} ","/**\r\n * Checks if any of the cursor positions fall within or immediately adjacent to the given range.\r\n * @param cursorPositions - An array of cursor positions.\r\n * @param rangeFrom - The start of the range to check.\r\n * @param rangeTo - The end of the range to check.\r\n * @param proximity - How close the cursor needs to be to be considered \"near\". Defaults to 1 (adjacent).\r\n * @returns True if any cursor is near the range, false otherwise.\r\n */\r\nexport function isCursorNearRange(cursorPositions: number[], rangeFrom: number, rangeTo: number, proximity: number = 0): boolean {\r\n  \r\n\r\n  for (const cursor of cursorPositions) {\r\n    if (cursor >= rangeFrom - (proximity) && cursor <= rangeTo + (proximity)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Escapes special characters in a string for use in a regular expression.\r\n * @param str - The string to escape.\r\n * @returns The escaped string.\r\n */\r\nexport function escapeRegExp(str: string): string {\r\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\r\n}\r\n","import { Decoration } from '@codemirror/view';\r\nimport { SyntaxRule, SyntaxRuleContext, DecorationItem } from '../types';\r\nimport { isCursorNearRange } from './utils';\r\n\r\nexport class HeadingDecorator implements SyntaxRule {\r\n  private headingRegex = /^(#{1,6})\\s(.*)$/gm;\r\n\r\n  process(context: SyntaxRuleContext): void {\r\n    const { builder, docText, textSliceFrom, cursorPositions, decorations } = context;\r\n    let match;\r\n\r\n    // Iterate over matches in the relevant text slice\r\n    // We use docText here which might be the full document text or a visible part.\r\n    // The `textSliceFrom` tells us the offset of this slice from the document start.\r\n    const localRegex = new RegExp(this.headingRegex.source, 'gm'); // Reset lastIndex for local use\r\n\r\n    while ((match = localRegex.exec(docText)) !== null) {\r\n      const matchStartIndexInSlice = match.index;\r\n      const lineStartInDoc = textSliceFrom + matchStartIndexInSlice;\r\n\r\n      // Skip escaped heading markers (e.g., \\\\# heading)\r\n      if (matchStartIndexInSlice > 0 && docText.charAt(matchStartIndexInSlice - 1) === '\\\\') {\r\n        continue;\r\n      }\r\n\r\n      const hashMarks = match[1]; // e.g., \"###\"\r\n      const headingTextContent = match[2]; // e.g., \"Heading Title\"\r\n      const hashCount = hashMarks.length;\r\n\r\n      const hashStartInDoc = lineStartInDoc;\r\n      const hashEndInDoc = hashStartInDoc + hashCount;\r\n      const spaceAfterHashInDoc = hashEndInDoc + 1; // Assumes one space after hashes\r\n      const lineEndInDoc = lineStartInDoc + match[0].length;\r\n      const headingTextStartInDoc = spaceAfterHashInDoc;\r\n      const headingTextEndInDoc = lineEndInDoc;\r\n\r\n      // Determine if cursor is near the markdown syntax (hashes and the following space)\r\n      const isNearSyntax = isCursorNearRange(cursorPositions, hashStartInDoc, spaceAfterHashInDoc);\r\n\r\n      // Style for the hash marks and the space\r\n      const syntaxClass = isNearSyntax ? 'markdown-syntax-active' : 'markdown-syntax-dim';\r\n      \r\n      // If we have a decorations collector, use it\r\n      if (decorations) {\r\n        // Add hash marks and space decoration\r\n        decorations.push({\r\n          from: hashStartInDoc,\r\n          to: spaceAfterHashInDoc,\r\n          decoration: Decoration.mark({ class: syntaxClass })\r\n        });\r\n        \r\n        // Add heading text content decoration\r\n        if (headingTextContent.trim().length > 0) {\r\n          decorations.push({\r\n            from: headingTextStartInDoc,\r\n            to: headingTextEndInDoc,\r\n            decoration: Decoration.mark({ class: `markdown-heading-${hashCount}` })\r\n          });\r\n        }\r\n      } else {\r\n        // Fallback to direct builder usage\r\n        builder.add(hashStartInDoc, spaceAfterHashInDoc, Decoration.mark({ class: syntaxClass }));\r\n        \r\n        // Style for the heading text content\r\n        if (headingTextContent.trim().length > 0) {\r\n          builder.add(\r\n            headingTextStartInDoc,\r\n            headingTextEndInDoc,\r\n            Decoration.mark({ class: `markdown-heading-${hashCount}` })\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { SyntaxRule, SyntaxRuleContext, DecorationItem } from '../types';\r\n\r\n/**\r\n * Base class for all markdown syntax rules\r\n * Provides common functionality and interfaces\r\n */\r\nexport abstract class BaseDecorator implements SyntaxRule {\r\n  /**\r\n   * Check if a position is within any HTML edit region\r\n   * @param pos - The position to check\r\n   * @param htmlEditRegions - Array of HTML edit regions\r\n   * @returns True if the position is within any HTML edit region\r\n   */\r\n  protected isWithinHtmlEditRegion(pos: number, htmlEditRegions?: {from: number, to: number}[]): boolean {\r\n    if (!htmlEditRegions || !htmlEditRegions.length) return false;\r\n    \r\n    for (const region of htmlEditRegions) {\r\n      if (pos >= region.from && pos < region.to) {\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    return false;\r\n  }\r\n  \r\n  /**\r\n   * Check if a range overlaps with any HTML edit region\r\n   * @param from - Start position\r\n   * @param to - End position\r\n   * @param htmlEditRegions - Array of HTML edit regions\r\n   * @returns True if the range overlaps with any HTML edit region\r\n   */\r\n  protected rangeOverlapsHtmlEditRegion(from: number, to: number, htmlEditRegions?: {from: number, to: number}[]): boolean {\r\n    if (!htmlEditRegions || !htmlEditRegions.length) return false;\r\n    \r\n    for (const region of htmlEditRegions) {\r\n      // Check if the ranges overlap\r\n      if (from < region.to && to > region.from) {\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    return false;\r\n  }\r\n  \r\n  /**\r\n   * Process the document and add decorations\r\n   * Abstract method to be implemented by subclasses\r\n   * \r\n   * @param context - Context containing document state and decoration builder\r\n   */\r\n  abstract process(context: SyntaxRuleContext): void;\r\n} ","import { Decoration } from '@codemirror/view';\r\nimport { SyntaxRuleContext } from '../types';\r\nimport { BaseDecorator } from './baseDecorator';\r\n\r\n/**\r\n * Decorator for bold text in markdown (**bold** or __bold__)\r\n */\r\nexport class BoldDecorator extends BaseDecorator {\r\n  /**\r\n   * Regular expression to match bold text\r\n   * Matches **bold text** or __bold text__\r\n   */\r\n  private readonly regex = /(\\*\\*|__)([^\\s*_]|[^\\s*_].*?[^\\s*_])\\1/g;\r\n\r\n  /**\r\n   * Process the document and add decorations for bold text\r\n   * @param context - Context containing document state and decoration builder\r\n   */\r\n  process(context: SyntaxRuleContext): void {\r\n    // Extract data from context\r\n    const { docText, textSliceFrom, decorations, htmlEditRegions } = context;\r\n    \r\n    // Find all bold text matches\r\n    let match;\r\n    while ((match = this.regex.exec(docText)) !== null) {\r\n      // Calculate positions in the document\r\n      const matchFrom = textSliceFrom + match.index;\r\n      const matchTo = textSliceFrom + match.index + match[0].length;\r\n      \r\n      // Skip if this range overlaps with an HTML edit region\r\n      if (this.rangeOverlapsHtmlEditRegion(matchFrom, matchTo, htmlEditRegions)) {\r\n        continue;\r\n      }\r\n      \r\n      // The format markers (** or __) at beginning\r\n      const startMarkerFrom = matchFrom;\r\n      const startMarkerTo = startMarkerFrom + match[1].length;\r\n      \r\n      // The content between the markers\r\n      const contentFrom = startMarkerTo;\r\n      const contentTo = matchTo - match[1].length;\r\n      \r\n      // The format markers (** or __) at the end\r\n      const endMarkerFrom = contentTo;\r\n      const endMarkerTo = matchTo;\r\n      \r\n      // Add decorations for the markers\r\n      decorations.push({\r\n        from: startMarkerFrom, \r\n        to: startMarkerTo,\r\n        decoration: Decoration.mark({ class: 'cm-formatting-strong' })\r\n      });\r\n      \r\n      decorations.push({\r\n        from: endMarkerFrom, \r\n        to: endMarkerTo,\r\n        decoration: Decoration.mark({ class: 'cm-formatting-strong' })\r\n      });\r\n      \r\n      // Add decoration for the content\r\n      decorations.push({\r\n        from: contentFrom, \r\n        to: contentTo,\r\n        decoration: Decoration.mark({ class: 'cm-strong' })\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { Decoration } from '@codemirror/view';\r\nimport { SyntaxRule, SyntaxRuleContext, DecorationItem } from '../types';\r\nimport { isCursorNearRange } from './utils';\r\n\r\nexport class ItalicDecorator implements SyntaxRule {\r\n  // Regex for *italic* and _italic_\r\n  // It avoids matching parts of **bold** or __bold__ by ensuring the characters immediately\r\n  // outside the single markers are not the same marker character.\r\n  // It also ensures the content is not empty, e.g. ** or __\r\n  private italicPatterns = [\r\n    // Matches *italic* but not **bold** or ***italicbold*** components directly\r\n    { marker: '*', regex: /(?<!\\*\\*|\\*)(?:^|[^\\*])\\*(?!\\s|\\*\\*)([^\\*\\n]+?)(?<!\\s)\\*(?!\\*)/g }, \r\n    // Matches _italic_ but not __bold__ or ___italicbold___ components directly\r\n    { marker: '_', regex: /(?<!__|_)(?:^|[^_])_(?!\\s|__)([^_\\n]+?)(?<!\\s)_(?!_)/g }\r\n  ];\r\n\r\n  process(context: SyntaxRuleContext): void {\r\n    const { builder, docText, textSliceFrom, cursorPositions, decorations } = context;\r\n\r\n    this.italicPatterns.forEach(patternInfo => {\r\n      const marker = patternInfo.marker;\r\n      const markerLen = marker.length; // Should be 1 for italics\r\n      const localRegex = new RegExp(patternInfo.regex.source, 'g');\r\n      let match;\r\n\r\n      while ((match = localRegex.exec(docText)) !== null) {\r\n        let fullMatchText = match[0];\r\n        let contentText = match[1];\r\n        let matchStartIndexInSlice = match.index;\r\n\r\n        // Adjust for lookbehind/lookahead consuming characters not part of the actual markers\r\n        // This is a common issue when regex includes context characters (like [^\\*] or [^_])\r\n        // We need to ensure 'openMarkerStartInDoc' points to the actual '*' or '_'\r\n        if (fullMatchText.startsWith(marker) === false && fullMatchText.length > contentText.length + 2) {\r\n            // This implies the regex included a leading context character (e.g. space or non-marker char)\r\n            matchStartIndexInSlice += (fullMatchText.indexOf(marker + contentText + marker));\r\n            fullMatchText = marker + contentText + marker;\r\n        }\r\n\r\n        // Skip escaped markers (e.g., \\*text\\*)\r\n        if (matchStartIndexInSlice > 0 && docText.charAt(matchStartIndexInSlice - 1) === '\\\\') {\r\n          continue;\r\n        }\r\n        \r\n        // Additional check to prevent matching inside words like test_ing_example\r\n        // This is complex with regex alone, so a post-match check can help.\r\n        const charBeforeOpenMarker = matchStartIndexInSlice > 0 ? docText.charAt(matchStartIndexInSlice -1) : ' ';\r\n        const charAfterCloseMarker = (matchStartIndexInSlice + fullMatchText.length) < docText.length ? docText.charAt(matchStartIndexInSlice + fullMatchText.length) : ' ';\r\n        const wordCharRegex = /[a-zA-Z0-9]/;\r\n        if (wordCharRegex.test(charBeforeOpenMarker) && wordCharRegex.test(charAfterCloseMarker)) {\r\n            if(docText.charAt(matchStartIndexInSlice + markerLen) !== ' ' && docText.charAt(matchStartIndexInSlice + fullMatchText.length - markerLen -1) !== ' '){\r\n                 //This is likely an intra-word underscore/asterisk, skip unless it's a common case like C*++\r\n                 //This rule is a bit simplistic and might need refinement for specific edge cases desired.\r\n                 //For now, we assume typical markdown usage where italics are space-bound or punctuation-bound.\r\n                 // continue; // Commented out as it might be too restrictive. The regex tries to handle this.\r\n            }\r\n        }\r\n\r\n        const fullMatchStartInDoc = textSliceFrom + matchStartIndexInSlice;\r\n        const fullMatchEndInDoc = fullMatchStartInDoc + fullMatchText.length;\r\n\r\n        const openMarkerStartInDoc = fullMatchStartInDoc;\r\n        const openMarkerEndInDoc = openMarkerStartInDoc + markerLen;\r\n\r\n        const contentStartInDoc = openMarkerEndInDoc;\r\n        const contentEndInDoc = fullMatchEndInDoc - markerLen;\r\n\r\n        const closeMarkerStartInDoc = contentEndInDoc;\r\n        const closeMarkerEndInDoc = fullMatchEndInDoc;\r\n\r\n        // Ensure the match is valid (e.g., not just empty markers)\r\n        if (contentStartInDoc >= contentEndInDoc) {\r\n            continue;\r\n        }\r\n\r\n        const isNearSyntax = isCursorNearRange(cursorPositions, openMarkerStartInDoc, closeMarkerEndInDoc);\r\n        const syntaxClass = isNearSyntax ? 'markdown-syntax-active' : 'markdown-syntax-dim';\r\n\r\n        // If we have a decorations collector, use it\r\n        if (decorations) {\r\n          // Add opening marker decoration\r\n          decorations.push({\r\n            from: openMarkerStartInDoc,\r\n            to: openMarkerEndInDoc,\r\n            decoration: Decoration.mark({ class: syntaxClass })\r\n          });\r\n          \r\n          // Add content decoration\r\n          decorations.push({\r\n            from: contentStartInDoc,\r\n            to: contentEndInDoc,\r\n            decoration: Decoration.mark({ class: 'markdown-italic-active' })\r\n          });\r\n          \r\n          // Add closing marker decoration\r\n          decorations.push({\r\n            from: closeMarkerStartInDoc,\r\n            to: closeMarkerEndInDoc,\r\n            decoration: Decoration.mark({ class: syntaxClass })\r\n          });\r\n        } else {\r\n          // Fallback to direct builder usage\r\n          builder.add(openMarkerStartInDoc, openMarkerEndInDoc, Decoration.mark({ class: syntaxClass }));\r\n          builder.add(contentStartInDoc, contentEndInDoc, Decoration.mark({ class: 'markdown-italic-active' }));\r\n          builder.add(closeMarkerStartInDoc, closeMarkerEndInDoc, Decoration.mark({ class: syntaxClass }));\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Decoration } from '@codemirror/view';\r\nimport { SyntaxRule, SyntaxRuleContext, DecorationItem } from '../types';\r\nimport { isCursorNearRange } from './utils';\r\n\r\nexport class StrikethroughDecorator implements SyntaxRule {\r\n  // Improved regex for ~~strikethrough~~ with proper boundary conditions\r\n  private strikethroughRegex = /(?<!\\\\|~)(~~)(?!\\s|~)([^~\\n]+?)(?<!\\s)(~~)(?!~)/g;\r\n\r\n  process(context: SyntaxRuleContext): void {\r\n    const { builder, docText, textSliceFrom, cursorPositions, decorations } = context;\r\n    const localRegex = new RegExp(this.strikethroughRegex.source, 'g'); // Reset lastIndex\r\n    let match;\r\n    const markerLen = 2; // Length of \"~~\"\r\n\r\n    while ((match = localRegex.exec(docText)) !== null) {\r\n      const matchStartIndexInSlice = match.index;\r\n      const fullMatchText = match[0];\r\n\r\n      // Skip escaped markers\r\n      if (matchStartIndexInSlice > 0 && docText.charAt(matchStartIndexInSlice - 1) === '\\\\') {\r\n        continue;\r\n      }\r\n\r\n      const fullMatchStartInDoc = textSliceFrom + matchStartIndexInSlice;\r\n      const fullMatchEndInDoc = fullMatchStartInDoc + fullMatchText.length;\r\n\r\n      const openMarkerStartInDoc = fullMatchStartInDoc;\r\n      const openMarkerEndInDoc = openMarkerStartInDoc + markerLen;\r\n\r\n      const contentStartInDoc = openMarkerEndInDoc;\r\n      const contentEndInDoc = fullMatchEndInDoc - markerLen;\r\n\r\n      const closeMarkerStartInDoc = contentEndInDoc;\r\n      const closeMarkerEndInDoc = fullMatchEndInDoc;\r\n\r\n      // Ensure the match is valid (e.g., not just empty markers)\r\n      if (contentStartInDoc >= contentEndInDoc) {\r\n        continue;\r\n      }\r\n\r\n      const isNearSyntax = isCursorNearRange(cursorPositions, openMarkerStartInDoc, closeMarkerEndInDoc);\r\n      const syntaxClass = isNearSyntax ? 'markdown-syntax-active' : 'markdown-syntax-dim';\r\n      const contentClass = 'markdown-strikethrough-active'; // Always visible for strikethrough\r\n\r\n      // If we have a decorations collector, use it\r\n      if (decorations) {\r\n        // Add opening marker decoration\r\n        decorations.push({\r\n          from: openMarkerStartInDoc,\r\n          to: openMarkerEndInDoc,\r\n          decoration: Decoration.mark({ class: syntaxClass })\r\n        });\r\n        \r\n        // Add content decoration\r\n        decorations.push({\r\n          from: contentStartInDoc,\r\n          to: contentEndInDoc,\r\n          decoration: Decoration.mark({ class: contentClass })\r\n        });\r\n        \r\n        // Add closing marker decoration\r\n        decorations.push({\r\n          from: closeMarkerStartInDoc,\r\n          to: closeMarkerEndInDoc,\r\n          decoration: Decoration.mark({ class: syntaxClass })\r\n        });\r\n      } else {\r\n        // Fallback to direct builder usage\r\n        builder.add(openMarkerStartInDoc, openMarkerEndInDoc, Decoration.mark({ class: syntaxClass }));\r\n        builder.add(contentStartInDoc, contentEndInDoc, Decoration.mark({ class: contentClass }));\r\n        builder.add(closeMarkerStartInDoc, closeMarkerEndInDoc, Decoration.mark({ class: syntaxClass }));\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Decoration } from '@codemirror/view';\r\nimport { SyntaxRule, SyntaxRuleContext, DecorationItem } from '../types';\r\nimport { isCursorNearRange } from './utils';\r\n\r\nexport class CodeDecorator implements SyntaxRule {\r\n  // Regex for `code`\r\n  // It looks for non-greedy content between single backticks.\r\n  // It also tries to avoid matching parts of code blocks (```) by not allowing backticks right next to the content ones,\r\n  // though full code block handling is typically a separate, more complex parser.\r\n  private codeRegex = /(?<!\\\\)(?<!`)`(?=\\S)([^`\\n]+?)(?<=\\S)`(?!`)/g;\r\n\r\n  process(context: SyntaxRuleContext): void {\r\n    const { builder, docText, textSliceFrom, cursorPositions, decorations } = context;\r\n    const localRegex = new RegExp(this.codeRegex.source, 'g'); // Reset lastIndex\r\n    let match;\r\n    const markerLen = 1; // Length of \"`\"\r\n\r\n    try {\r\n      while ((match = localRegex.exec(docText)) !== null) {\r\n        const matchStartIndexInSlice = match.index;\r\n        const fullMatchText = match[0];\r\n\r\n        // Skip escaped markers (e.g., \\`text\\`)\r\n        if (matchStartIndexInSlice > 0 && docText.charAt(matchStartIndexInSlice - 1) === '\\\\') {\r\n          continue;\r\n        }\r\n\r\n        const fullMatchStartInDoc = textSliceFrom + matchStartIndexInSlice;\r\n        const fullMatchEndInDoc = fullMatchStartInDoc + fullMatchText.length;\r\n\r\n        const openMarkerStartInDoc = fullMatchStartInDoc;\r\n        const openMarkerEndInDoc = openMarkerStartInDoc + markerLen;\r\n\r\n        const contentStartInDoc = openMarkerEndInDoc;\r\n        const contentEndInDoc = fullMatchEndInDoc - markerLen;\r\n\r\n        const closeMarkerStartInDoc = contentEndInDoc;\r\n        const closeMarkerEndInDoc = fullMatchEndInDoc;\r\n\r\n        // Ensure the match is valid (e.g., not just empty markers)\r\n        if (contentStartInDoc >= contentEndInDoc) {\r\n          continue;\r\n        }\r\n\r\n        const isNearSyntax = isCursorNearRange(cursorPositions, openMarkerStartInDoc, closeMarkerEndInDoc);\r\n        const syntaxClass = isNearSyntax ? 'markdown-syntax-active' : 'markdown-syntax-dim';\r\n\r\n        // If we have a decorations collector, use it\r\n        if (decorations) {\r\n          // Add opening marker decoration\r\n          decorations.push({\r\n            from: openMarkerStartInDoc,\r\n            to: openMarkerEndInDoc,\r\n            decoration: Decoration.mark({ class: syntaxClass })\r\n          });\r\n          \r\n          // Add content decoration\r\n          decorations.push({\r\n            from: contentStartInDoc,\r\n            to: contentEndInDoc,\r\n            decoration: Decoration.mark({ class: 'markdown-code-active' })\r\n          });\r\n          \r\n          // Add closing marker decoration\r\n          decorations.push({\r\n            from: closeMarkerStartInDoc,\r\n            to: closeMarkerEndInDoc,\r\n            decoration: Decoration.mark({ class: syntaxClass })\r\n          });\r\n        } else {\r\n          // Fallback to direct builder usage\r\n          builder.add(openMarkerStartInDoc, openMarkerEndInDoc, Decoration.mark({ class: syntaxClass }));\r\n          builder.add(contentStartInDoc, contentEndInDoc, Decoration.mark({ class: 'markdown-code-active' }));\r\n          builder.add(closeMarkerStartInDoc, closeMarkerEndInDoc, Decoration.mark({ class: syntaxClass }));\r\n        }\r\n      } // End of while loop\r\n    } catch (error) {\r\n      console.error('Error processing code syntax:', error);\r\n    }\r\n  } // End of process method\r\n} // End of class\r\n","import { Decoration } from '@codemirror/view';\r\nimport { SyntaxRule, SyntaxRuleContext, DecorationItem } from '../types';\r\nimport { isCursorNearRange } from './utils';\r\n\r\nexport class HighlightDecorator implements SyntaxRule {\r\n  // Regex for ==highlight== with proper boundary conditions\r\n  private highlightRegex = /(?<![\\\\=])(==)(?!\\s|=)([^=\\n]+?)(?<!\\s)(==)(?!=)/g;\r\n\r\n  process(context: SyntaxRuleContext): void {\r\n    const { builder, docText, textSliceFrom, cursorPositions, decorations } = context;\r\n    const localRegex = new RegExp(this.highlightRegex.source, 'g'); // Reset lastIndex\r\n    let match;\r\n    const markerLen = 2; // Length of \"==\"\r\n\r\n    while ((match = localRegex.exec(docText)) !== null) {\r\n      const matchStartIndexInSlice = match.index;\r\n      const fullMatchText = match[0];\r\n\r\n      // Skip escaped markers (e.g., \\==text==)\r\n      if (matchStartIndexInSlice > 0 && docText.charAt(matchStartIndexInSlice - 1) === '\\\\') {\r\n        continue;\r\n      }\r\n\r\n      const fullMatchStartInDoc = textSliceFrom + matchStartIndexInSlice;\r\n      const fullMatchEndInDoc = fullMatchStartInDoc + fullMatchText.length;\r\n\r\n      const openMarkerStartInDoc = fullMatchStartInDoc;\r\n      const openMarkerEndInDoc = openMarkerStartInDoc + markerLen;\r\n\r\n      const contentStartInDoc = openMarkerEndInDoc;\r\n      const contentEndInDoc = fullMatchEndInDoc - markerLen;\r\n\r\n      const closeMarkerStartInDoc = contentEndInDoc;\r\n      const closeMarkerEndInDoc = fullMatchEndInDoc;\r\n\r\n      // Ensure the match is valid (e.g., not just empty markers)\r\n      if (contentStartInDoc >= contentEndInDoc) {\r\n        continue;\r\n      }\r\n\r\n      const isNearSyntax = isCursorNearRange(cursorPositions, openMarkerStartInDoc, closeMarkerEndInDoc);\r\n      const syntaxClass = isNearSyntax ? 'markdown-syntax-active' : 'markdown-syntax-dim';\r\n      const contentClass = 'markdown-highlight-active'; // Always keep highlight visible\r\n\r\n      // If we have a decorations collector, use it\r\n      if (decorations) {\r\n        // Add opening marker decoration\r\n        decorations.push({\r\n          from: openMarkerStartInDoc,\r\n          to: openMarkerEndInDoc,\r\n          decoration: Decoration.mark({ class: syntaxClass })\r\n        });\r\n        \r\n        // Add content decoration\r\n        decorations.push({\r\n          from: contentStartInDoc,\r\n          to: contentEndInDoc,\r\n          decoration: Decoration.mark({ class: contentClass })\r\n        });\r\n        \r\n        // Add closing marker decoration\r\n        decorations.push({\r\n          from: closeMarkerStartInDoc,\r\n          to: closeMarkerEndInDoc,\r\n          decoration: Decoration.mark({ class: syntaxClass })\r\n        });\r\n      } else {\r\n        // Fallback to direct builder usage\r\n        builder.add(openMarkerStartInDoc, openMarkerEndInDoc, Decoration.mark({ class: syntaxClass }));\r\n        builder.add(contentStartInDoc, contentEndInDoc, Decoration.mark({ class: contentClass }));\r\n        builder.add(closeMarkerStartInDoc, closeMarkerEndInDoc, Decoration.mark({ class: syntaxClass }));\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Decoration } from '@codemirror/view';\r\nimport { SyntaxRule, SyntaxRuleContext, DecorationItem } from '../types';\r\nimport { isCursorNearRange } from './utils';\r\n\r\nexport class OldBoldDecorator implements SyntaxRule {\r\n  // Regex for __bold__ (old style markdown)\r\n  private oldBoldRegex = /(?<!_)_{2}(?!\\s)([^_]+?)(?<!\\s)_{2}(?!_)/g;\r\n\r\n  process(context: SyntaxRuleContext): void {\r\n    const { builder, docText, textSliceFrom, cursorPositions, decorations } = context;\r\n    const markerLen = 2; // Length of \"__\"\r\n    // Create a new RegExp instance to reset lastIndex\r\n    const localRegex = new RegExp(this.oldBoldRegex.source, 'g');\r\n    let match;\r\n\r\n    while ((match = localRegex.exec(docText)) !== null) {\r\n      const matchStartIndexInSlice = match.index;\r\n      const fullMatchText = match[0];\r\n\r\n      // Skip escaped markers (e.g., \\__text__)\r\n      if (matchStartIndexInSlice > 0 && docText.charAt(matchStartIndexInSlice - 1) === '\\\\') {\r\n        continue;\r\n      }\r\n\r\n      const fullMatchStartInDoc = textSliceFrom + matchStartIndexInSlice;\r\n      const fullMatchEndInDoc = fullMatchStartInDoc + fullMatchText.length;\r\n\r\n      const openMarkerStartInDoc = fullMatchStartInDoc;\r\n      const openMarkerEndInDoc = openMarkerStartInDoc + markerLen;\r\n\r\n      const contentStartInDoc = openMarkerEndInDoc;\r\n      const contentEndInDoc = fullMatchEndInDoc - markerLen;\r\n\r\n      const closeMarkerStartInDoc = contentEndInDoc;\r\n      const closeMarkerEndInDoc = fullMatchEndInDoc;\r\n\r\n      // Check if cursor is near the entire bold span or its markers\r\n      const isNearSyntax = isCursorNearRange(cursorPositions, openMarkerStartInDoc, closeMarkerEndInDoc);\r\n\r\n      const syntaxClass = isNearSyntax ? 'markdown-syntax-active' : 'markdown-syntax-dim';\r\n\r\n      // If we have a decorations collector, use it instead of the builder directly\r\n      if (decorations) {\r\n        // Collect opening marker decoration\r\n        decorations.push({\r\n          from: openMarkerStartInDoc,\r\n          to: openMarkerEndInDoc,\r\n          decoration: Decoration.mark({ class: syntaxClass })\r\n        });\r\n        \r\n        // Collect content decoration with red styling for old markers\r\n        if (contentStartInDoc < contentEndInDoc) { // Ensure there's content\r\n          decorations.push({\r\n            from: contentStartInDoc,\r\n            to: contentEndInDoc,\r\n            decoration: Decoration.mark({ \r\n              class: isNearSyntax ? 'markdown-bold-active' : 'markdown-old-syntax-red' \r\n            })\r\n          });\r\n        }\r\n\r\n        // Collect closing marker decoration\r\n        decorations.push({\r\n          from: closeMarkerStartInDoc,\r\n          to: closeMarkerEndInDoc,\r\n          decoration: Decoration.mark({ class: syntaxClass })\r\n        });\r\n      } else {\r\n        // Fallback to using the builder directly\r\n        builder.add(openMarkerStartInDoc, openMarkerEndInDoc, Decoration.mark({ class: syntaxClass }));\r\n        \r\n        if (contentStartInDoc < contentEndInDoc) {\r\n          builder.add(\r\n            contentStartInDoc, \r\n            contentEndInDoc, \r\n            Decoration.mark({ \r\n              class: isNearSyntax ? 'markdown-bold-active' : 'markdown-old-syntax-red' \r\n            })\r\n          );\r\n        }\r\n        \r\n        builder.add(closeMarkerStartInDoc, closeMarkerEndInDoc, Decoration.mark({ class: syntaxClass }));\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Decoration } from '@codemirror/view';\r\nimport { SyntaxRule, SyntaxRuleContext, DecorationItem } from '../types';\r\nimport { isCursorNearRange } from './utils';\r\n\r\nexport class OldItalicDecorator implements SyntaxRule {\r\n  // Regex for *italic* (old style markdown)\r\n  private oldItalicRegex = /(?<!\\*\\*|\\*)(?:^|[^\\*])\\*(?!\\s|\\*\\*)([^\\*\\n]+?)(?<!\\s)\\*(?!\\*)/g;\r\n\r\n  process(context: SyntaxRuleContext): void {\r\n    const { builder, docText, textSliceFrom, cursorPositions, decorations } = context;\r\n    const markerLen = 1; // Length of \"*\"\r\n    const localRegex = new RegExp(this.oldItalicRegex.source, 'g');\r\n    let match;\r\n\r\n    while ((match = localRegex.exec(docText)) !== null) {\r\n      let fullMatchText = match[0];\r\n      let contentText = match[1];\r\n      let matchStartIndexInSlice = match.index;\r\n\r\n      // Adjust for lookbehind/lookahead consuming characters not part of the actual markers\r\n      if (fullMatchText.startsWith('*') === false && fullMatchText.length > contentText.length + 2) {\r\n        matchStartIndexInSlice += (fullMatchText.indexOf('*' + contentText + '*'));\r\n        fullMatchText = '*' + contentText + '*';\r\n      }\r\n\r\n      // Skip escaped markers (e.g., \\*text\\*)\r\n      if (matchStartIndexInSlice > 0 && docText.charAt(matchStartIndexInSlice - 1) === '\\\\') {\r\n        continue;\r\n      }\r\n      \r\n      // Additional check to prevent matching inside words like test*ing*example\r\n      const charBeforeOpenMarker = matchStartIndexInSlice > 0 ? docText.charAt(matchStartIndexInSlice - 1) : ' ';\r\n      const charAfterCloseMarker = (matchStartIndexInSlice + fullMatchText.length) < docText.length ? \r\n                                   docText.charAt(matchStartIndexInSlice + fullMatchText.length) : ' ';\r\n      const wordCharRegex = /[a-zA-Z0-9]/;\r\n      if (wordCharRegex.test(charBeforeOpenMarker) && wordCharRegex.test(charAfterCloseMarker)) {\r\n        if(docText.charAt(matchStartIndexInSlice + markerLen) !== ' ' && \r\n           docText.charAt(matchStartIndexInSlice + fullMatchText.length - markerLen - 1) !== ' ') {\r\n          // This is likely an intra-word asterisk, skip it\r\n          continue;\r\n        }\r\n      }\r\n\r\n      const fullMatchStartInDoc = textSliceFrom + matchStartIndexInSlice;\r\n      const fullMatchEndInDoc = fullMatchStartInDoc + fullMatchText.length;\r\n\r\n      const openMarkerStartInDoc = fullMatchStartInDoc;\r\n      const openMarkerEndInDoc = openMarkerStartInDoc + markerLen;\r\n\r\n      const contentStartInDoc = openMarkerEndInDoc;\r\n      const contentEndInDoc = fullMatchEndInDoc - markerLen;\r\n\r\n      const closeMarkerStartInDoc = contentEndInDoc;\r\n      const closeMarkerEndInDoc = fullMatchEndInDoc;\r\n\r\n      // Ensure the match is valid (e.g., not just empty markers)\r\n      if (contentStartInDoc >= contentEndInDoc) {\r\n        continue;\r\n      }\r\n\r\n      const isNearSyntax = isCursorNearRange(cursorPositions, openMarkerStartInDoc, closeMarkerEndInDoc);\r\n      const syntaxClass = isNearSyntax ? 'markdown-syntax-active' : 'markdown-syntax-dim';\r\n\r\n      // If we have a decorations collector, use it\r\n      if (decorations) {\r\n        // Add opening marker decoration\r\n        decorations.push({\r\n          from: openMarkerStartInDoc,\r\n          to: openMarkerEndInDoc,\r\n          decoration: Decoration.mark({ class: syntaxClass })\r\n        });\r\n        \r\n        // Add content decoration with red styling for old markers\r\n        decorations.push({\r\n          from: contentStartInDoc,\r\n          to: contentEndInDoc,\r\n          decoration: Decoration.mark({ \r\n            class: isNearSyntax ? 'markdown-italic-active' : 'markdown-old-syntax-red' \r\n          })\r\n        });\r\n        \r\n        // Add closing marker decoration\r\n        decorations.push({\r\n          from: closeMarkerStartInDoc,\r\n          to: closeMarkerEndInDoc,\r\n          decoration: Decoration.mark({ class: syntaxClass })\r\n        });\r\n      } else {\r\n        // Fallback to direct builder usage\r\n        builder.add(openMarkerStartInDoc, openMarkerEndInDoc, Decoration.mark({ class: syntaxClass }));\r\n        builder.add(\r\n          contentStartInDoc, \r\n          contentEndInDoc, \r\n          Decoration.mark({ \r\n            class: isNearSyntax ? 'markdown-italic-active' : 'markdown-old-syntax-red' \r\n          })\r\n        );\r\n        builder.add(closeMarkerStartInDoc, closeMarkerEndInDoc, Decoration.mark({ class: syntaxClass }));\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Decoration, WidgetType } from '@codemirror/view';\r\nimport { SyntaxRule, SyntaxRuleContext } from '../types';\r\nimport { isCursorNearRange } from './utils';\r\n\r\n// Get the extended context type that includes the decorations array\r\ninterface DecorationItem {\r\n  from: number;\r\n  to: number;\r\n  decoration: Decoration;\r\n}\r\n\r\ntype ExtendedContext = SyntaxRuleContext & {\r\n  decorations?: DecorationItem[];\r\n  htmlEditRegions?: {from: number, to: number}[];\r\n};\r\n\r\nexport class ListDecorator implements SyntaxRule {\r\n  // Regex to match list items at the beginning of a line\r\n  // Captures the specific marker used (-, +, *) or (1., 2., etc.)\r\n  private listItemRegex = /^(\\s*)([-+*]|\\d+\\.)(\\s+)(.*)$/gm;\r\n\r\n  process(context: SyntaxRuleContext): void {\r\n    const { builder, docText, textSliceFrom, cursorPositions } = context;\r\n    // Cast to get access to the decorations array\r\n    const extContext = context as ExtendedContext;\r\n    const decorations = extContext.decorations || [];\r\n\r\n    // Process all list items with a single regex\r\n    this.processListItems(context, this.listItemRegex);\r\n  }\r\n\r\n  private processListItems(context: SyntaxRuleContext, regex: RegExp): void {\r\n    const { builder, docText, textSliceFrom, cursorPositions } = context;\r\n    // Cast to get access to the decorations array\r\n    const extContext = context as ExtendedContext;\r\n    const decorations = extContext.decorations || [];\r\n    const htmlRegions = extContext.htmlEditRegions || [];\r\n\r\n    // Create a new RegExp instance to reset lastIndex\r\n    const localRegex = new RegExp(regex.source, 'gm');\r\n    let match;\r\n\r\n    while ((match = localRegex.exec(docText)) !== null) {\r\n      const [fullMatch, leadingWhitespace, marker, spacesAfterMarker, content] = match;\r\n      const isNumberedList = /^\\d+\\.$/.test(marker);\r\n      const matchStartIndexInSlice = match.index;\r\n\r\n      // Calculate positions in the document\r\n      const fullMatchStartInDoc = textSliceFrom + matchStartIndexInSlice;\r\n      \r\n      const markerStartInDoc = fullMatchStartInDoc + leadingWhitespace.length;\r\n      const markerEndInDoc = markerStartInDoc + marker.length;\r\n      \r\n      // Check if this list item is inside an HTML region\r\n      const isInsideHtml = htmlRegions.some(region => \r\n        markerStartInDoc >= region.from && markerEndInDoc <= region.to\r\n      );\r\n      \r\n      // Skip decoration if inside HTML\r\n      if (isInsideHtml) {\r\n        continue;\r\n      }\r\n\r\n      // Check if cursor is exactly adjacent to the list marker\r\n      const isAdjacentToMarker = cursorPositions.some(cursor => \r\n        cursor === markerStartInDoc || cursor === markerEndInDoc\r\n      );\r\n\r\n      // For numbered lists, always show the original number\r\n      if (isNumberedList) {\r\n        // Apply the list styling to the number\r\n        const decoration = Decoration.mark({ class: isAdjacentToMarker ? 'markdown-syntax-active' : 'markdown-list-dim' });\r\n        if (decorations) {\r\n          decorations.push({\r\n            from: markerStartInDoc,\r\n            to: markerEndInDoc,\r\n            decoration\r\n          });\r\n        } else {\r\n          builder.add(markerStartInDoc, markerEndInDoc, decoration);\r\n        }\r\n      } \r\n      // For unordered lists, show bullet when not adjacent\r\n      else if (isAdjacentToMarker) {\r\n        // Show original marker (-, +, *) with active style\r\n        const decoration = Decoration.mark({ class: 'markdown-syntax-active' });\r\n        if (decorations) {\r\n          decorations.push({\r\n            from: markerStartInDoc,\r\n            to: markerEndInDoc,\r\n            decoration\r\n          });\r\n        } else {\r\n          builder.add(markerStartInDoc, markerEndInDoc, decoration);\r\n        }\r\n      } else {\r\n        // Show bullet for unordered lists when cursor is not adjacent\r\n        if (decorations) {\r\n          decorations.push({\r\n            from: markerStartInDoc,\r\n            to: markerEndInDoc,\r\n            decoration: Decoration.replace({\r\n              widget: new ListBulletWidget(marker),\r\n              class: 'markdown-list-dim'\r\n            })\r\n          });\r\n        } else {\r\n          builder.add(markerStartInDoc, markerEndInDoc, Decoration.replace({\r\n            widget: new ListBulletWidget(marker),\r\n            class: 'markdown-list-dim'\r\n          }));\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Widget to display a round bullet\r\nclass ListBulletWidget extends WidgetType {\r\n  constructor(private readonly originalMarker: string = '•', private readonly isOrdered: boolean = false) {\r\n    super();\r\n  }\r\n\r\n  eq(other: ListBulletWidget): boolean {\r\n    return other.originalMarker === this.originalMarker && other.isOrdered === this.isOrdered;\r\n  }\r\n\r\n  toDOM(): HTMLElement {\r\n    const span = document.createElement('span');\r\n    span.textContent = '•'; // Unicode bullet character\r\n    span.className = 'markdown-list-dim';\r\n    return span;\r\n  }\r\n\r\n  ignoreEvent(): boolean {\r\n    return false;\r\n  }\r\n}\r\n","import { Decoration, EditorView, WidgetType } from '@codemirror/view';\r\nimport { SyntaxRule, SyntaxRuleContext } from '../types';\r\n\r\n// Helper to create the copy button and its functionality\r\nfunction createCopyButton(textToCopy: string): HTMLElement {\r\n  const button = document.createElement('button');\r\n  button.className = 'cm-indent-copy-button';\r\n  button.innerHTML = '<span>Copy</span>'; // Replace with an icon if you have one\r\n  button.title = 'Copy code block';\r\n  button.addEventListener('click', (event) => {\r\n    event.stopPropagation(); // Prevent editor focus or other side effects\r\n    navigator.clipboard.writeText(textToCopy).then(() => {\r\n      // Optional: Show a temporary 'Copied!' message or change button appearance\r\n      const originalText = button.innerHTML;\r\n      button.innerHTML = '<span>Copied!</span>';\r\n      setTimeout(() => {\r\n        button.innerHTML = originalText;\r\n      }, 1500);\r\n    }).catch(err => {\r\n      console.error('Failed to copy text: ', err);\r\n      // Optional: Show an error message\r\n    });\r\n  });\r\n  return button;\r\n}\r\n\r\nclass CodeBlockWidget extends WidgetType {\r\n  constructor(readonly codeLines: string[], readonly language: string | null, readonly fullBlockRawText: string) {\r\n    super();\r\n  }\r\n\r\n  toDOM(view: EditorView): HTMLElement {\r\n    const container = document.createElement('div');\r\n    container.className = 'cm-preview-indent-block cm-fenced-code-block-preview'; // Added specific class\r\n\r\n    const preElement = document.createElement('pre');\r\n    preElement.className = 'cm-preview-indent-text'; // Keep for consistency, or use a new one\r\n    \r\n    const codeElement = document.createElement('code');\r\n    if (this.language) {\r\n      codeElement.className = `language-${this.language.toLowerCase()}`;\r\n    }\r\n    codeElement.textContent = this.codeLines.join('\\n');\r\n    \r\n    preElement.appendChild(codeElement);\r\n    container.appendChild(preElement);\r\n    container.appendChild(createCopyButton(this.fullBlockRawText));\r\n\r\n    return container;\r\n  }\r\n\r\n  ignoreEvent(event: Event): boolean {\r\n    // Allow clicks on the copy button\r\n    if (event.type === 'click' && (event.target as HTMLElement).closest('.cm-indent-copy-button')) {\r\n      return false;\r\n    }\r\n    // Ignore other events to make it non-editable\r\n    return true;\r\n  }\r\n}\r\n\r\nexport class FencedCodeBlockDecorator implements SyntaxRule {\r\n  process(context: SyntaxRuleContext): void {\r\n    const { state, docText, textSliceFrom, decorations, currentMode } = context;\r\n\r\n    if (!decorations) {\r\n      return;\r\n    }\r\n\r\n    const lines = docText.split('\\n');\r\n    \r\n    if (currentMode === 'preview') {\r\n      // --- PREVIEW MODE LOGIC (existing) ---\r\n      let i = 0; \r\n      while (i < lines.length) {\r\n        const lineText = lines[i];\r\n        const fenceMatch = lineText.match(/^(\\s*)(`{3,}|~{3,})(.*)$/);\r\n\r\n        if (fenceMatch) {\r\n          const leadingWhitespace = fenceMatch[1];\r\n          const fenceType = fenceMatch[2];\r\n          const langSpecifierRaw = fenceMatch[3].trim();\r\n          const language = langSpecifierRaw.split(/\\s+/)[0] || null;\r\n          const blockStartLineIndex = i;\r\n\r\n          let currentPosInSliceOffset = 0;\r\n          for (let k = 0; k < blockStartLineIndex; k++) {\r\n            currentPosInSliceOffset += lines[k].length + 1;\r\n          }\r\n          const blockStartPosInDoc = textSliceFrom + currentPosInSliceOffset;\r\n          \r\n          let currentBlockRawLines: string[] = [lineText];\r\n          let codeContentLines: string[] = [];\r\n          \r\n          i++; \r\n          let blockEndLineIndex = -1;\r\n\r\n          while (i < lines.length) {\r\n            const currentLineText = lines[i];\r\n            currentBlockRawLines.push(currentLineText);\r\n            const closingFenceMatch = currentLineText.match(/^(\\s*)(`{3,}|~{3,})\\s*$/);\r\n\r\n            if (closingFenceMatch && closingFenceMatch[1] === leadingWhitespace && closingFenceMatch[2] === fenceType) {\r\n              blockEndLineIndex = i;\r\n              currentPosInSliceOffset = 0;\r\n              for (let k = 0; k <= blockEndLineIndex; k++) {\r\n                currentPosInSliceOffset += lines[k].length + 1;\r\n              }\r\n              let blockEndPosInDoc = textSliceFrom + currentPosInSliceOffset;\r\n              if (blockEndLineIndex === lines.length - 1 && !docText.endsWith('\\n')) {\r\n                   blockEndPosInDoc = textSliceFrom + currentPosInSliceOffset - 1;\r\n              }\r\n              const fullBlockRawText = currentBlockRawLines.join('\\n');\r\n              const widget = new CodeBlockWidget(codeContentLines, language, fullBlockRawText);\r\n              decorations.push({\r\n                from: blockStartPosInDoc, to: blockEndPosInDoc,\r\n                decoration: Decoration.replace({ widget: widget, block: true })\r\n              });\r\n              break; \r\n            } else {\r\n              if (leadingWhitespace.length > 0 && currentLineText.startsWith(leadingWhitespace)) {\r\n                codeContentLines.push(currentLineText.substring(leadingWhitespace.length));\r\n              } else if (leadingWhitespace.length === 0) {\r\n                codeContentLines.push(currentLineText);\r\n              } else {\r\n                codeContentLines.push(currentLineText);\r\n              }\r\n            }\r\n            i++; \r\n          }\r\n          if (blockEndLineIndex === -1) { /* unclosed block */ }\r\n        }\r\n        i++; \r\n      }\r\n    } else if (currentMode === 'live') {\r\n      // --- LIVE MODE LOGIC (new) ---\r\n      let lineStartIndexInSlice = 0; // Start char offset of the current line within docText slice\r\n\r\n      for (let i = 0; i < lines.length; /* i incremented inside or at end */) {\r\n        const lineText = lines[i];\r\n        const currentLineActualStartInDoc = textSliceFrom + lineStartIndexInSlice;\r\n        const currentLineActualEndInDoc = currentLineActualStartInDoc + lineText.length;\r\n\r\n        const fenceMatch = lineText.match(/^(\\s*)(`{3,}|~{3,})(.*)$/);\r\n\r\n        if (fenceMatch) {\r\n          const leadingWhitespace = fenceMatch[1];\r\n          const fenceType = fenceMatch[2];\r\n          const langSpecifierRaw = fenceMatch[3].trim();\r\n\r\n          // Decorate opening fence line (current line `i`)\r\n          // Apply line decoration for full-width background\r\n          decorations.push({\r\n            from: currentLineActualStartInDoc,\r\n            to: currentLineActualStartInDoc, // For Decoration.line\r\n            decoration: Decoration.line({ attributes: { class: 'cm-live-fenced-code-fence-line' } })\r\n          });\r\n          // Decorate language specifier\r\n          if (langSpecifierRaw) {\r\n              const langSpecOffsetInLine = leadingWhitespace.length + fenceType.length;\r\n              decorations.push({\r\n                  from: currentLineActualStartInDoc + langSpecOffsetInLine,\r\n                  to: currentLineActualStartInDoc + langSpecOffsetInLine + langSpecifierRaw.length,\r\n                  decoration: Decoration.mark({ class: 'cm-live-fenced-code-lang' })\r\n              });\r\n          }\r\n\r\n          let nextLineStartInSliceForInnerLoop = lineStartIndexInSlice + lineText.length + 1; \r\n\r\n          // Inner loop for content and closing fence\r\n          let foundClosingFence = false;\r\n          for (let j = i + 1; j < lines.length; j++) {\r\n            const innerLineText = lines[j];\r\n            const innerLineActualStartInDoc = textSliceFrom + nextLineStartInSliceForInnerLoop;\r\n            const innerLineActualEndInDoc = innerLineActualStartInDoc + innerLineText.length;\r\n\r\n            const closingFenceMatch = innerLineText.match(/^(\\s*)(`{3,}|~{3,})\\s*$/);\r\n            if (closingFenceMatch && closingFenceMatch[1] === leadingWhitespace && closingFenceMatch[2] === fenceType) {\r\n              // Decorate closing fence line\r\n              // Apply line decoration for full-width background\r\n              decorations.push({\r\n                from: innerLineActualStartInDoc,\r\n                to: innerLineActualStartInDoc, // For Decoration.line\r\n                decoration: Decoration.line({ attributes: { class: 'cm-live-fenced-code-fence-line' } })\r\n              });\r\n              lineStartIndexInSlice = nextLineStartInSliceForInnerLoop + innerLineText.length + 1; \r\n              i = j + 1; \r\n              foundClosingFence = true;\r\n              break; \r\n            } else {\r\n              // This is a content line\r\n              decorations.push({\r\n                from: innerLineActualStartInDoc, \r\n                to: innerLineActualStartInDoc, // For Decoration.line, 'to' is same as 'from'\r\n                decoration: Decoration.line({ \r\n                  attributes: { class: 'cm-live-fenced-code-content-line' },\r\n                  atomic: true // Prevent other Markdown rules from processing inside\r\n                })\r\n              });\r\n              nextLineStartInSliceForInnerLoop += innerLineText.length + 1;\r\n            }\r\n          }\r\n          \r\n          if (!foundClosingFence) {\r\n            // Block is unclosed, extends to the end of the slice\r\n            // All subsequent lines until end of slice were processed as content by the inner loop.\r\n            lineStartIndexInSlice = nextLineStartInSliceForInnerLoop; // Should be end of slice\r\n            i = lines.length; // Terminate outer loop\r\n          }\r\n          continue; // Processed a block (or unclosed block), restart outer loop\r\n        }\r\n\r\n        // No fence match on current line `i`, advance for outer loop\r\n        lineStartIndexInSlice += lineText.length + 1;\r\n        i++;\r\n      }\r\n    }\r\n  }\r\n}\r\n","// src/components/obsidian-editor/extensions/markdown-syntax/rules/horizontalRuleDecorator.ts\r\nimport { EditorView, Decoration, DecorationSet, WidgetType, ViewPlugin, ViewUpdate } from '@codemirror/view';\r\nimport { EditorState, RangeSetBuilder } from '@codemirror/state';\r\nimport { markdownSyntaxStateField } from '../index'; // Ensure this path is correct\r\n\r\nconst HR_REGEX = /^(?:---|___|\\*\\*\\*)\\s*$/;\r\n\r\nclass HorizontalRuleWidget extends WidgetType {\r\n  get estimatedHeight(): number {\r\n    return 26; // Target line height of 25.6px, rounded up\r\n  }\r\n\r\n  toDOM() {\r\n    const hr = document.createElement('hr');\r\n    hr.className = 'cm-rendered-hr'; // Used by CSS to style the <hr>\r\n    return hr;\r\n  }\r\n  ignoreEvent() {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport const HorizontalRuleDecorator = ViewPlugin.fromClass(\r\n  class {\r\n    decorations: DecorationSet;\r\n\r\n    constructor(view: EditorView) {\r\n      this.decorations = this.buildDecorations(view);\r\n    }\r\n\r\n    update(update: ViewUpdate) {\r\n      if (\r\n        update.docChanged ||\r\n        update.viewportChanged ||\r\n        update.selectionSet || // Rebuild if selection changes (cursor moves)\r\n        update.state.field(markdownSyntaxStateField, false) !== update.startState.field(markdownSyntaxStateField, false)\r\n      ) {\r\n        this.decorations = this.buildDecorations(update.view);\r\n      }\r\n    }\r\n\r\n    buildDecorations(view: EditorView): DecorationSet {\r\n      const builder = new RangeSetBuilder<Decoration>();\r\n      const { state } = view;\r\n      const currentMode = state.field(markdownSyntaxStateField).currentMode;\r\n      const cursorPos = state.selection.main.head;\r\n\r\n      if (currentMode === 'live') {\r\n        for (const { from, to } of view.visibleRanges) {\r\n          for (let pos = from; pos <= to; ) {\r\n            const line = state.doc.lineAt(pos);\r\n            // Handle case where loop might go past last line if last line is empty\r\n            if (line.length === 0 && pos === to && line.from !== line.to) { \r\n                 pos = line.to + 1;\r\n                 continue;\r\n            }\r\n            const match = HR_REGEX.exec(line.text);\r\n            if (match) {\r\n              const lineStart = line.from;\r\n              const lineEnd = line.to;\r\n              let showSyntaxAsText = false;\r\n              // 1. Check if cursor is on the line\r\n              if (cursorPos >= lineStart && cursorPos <= lineEnd) {\r\n                showSyntaxAsText = true;\r\n              } else {\r\n                // 2. Check if the HR line is part of any selection\r\n                for (const selectionRange of state.selection.ranges) {\r\n                  // Check for overlap: selection starts before/at HR line end AND selection ends after/at HR line start\r\n                  if (selectionRange.from <= lineEnd && selectionRange.to >= lineStart) {\r\n                    showSyntaxAsText = true;\r\n                    break; // Found an overlap, no need to check other selection ranges\r\n                  }\r\n                }\r\n              }\r\n\r\n              if (showSyntaxAsText) {\r\n                // Cursor is on the HR line: show the syntax, style it as active\r\n                builder.add(lineStart, lineEnd, Decoration.mark({ class: 'cm-hr-syntax-active' }));\r\n              } else {\r\n                // Cursor is NOT on the HR line: hide syntax, show widget (visual line)\r\n                builder.add(lineStart, lineEnd, Decoration.replace({ widget: new HorizontalRuleWidget() }));\r\n              }\r\n            }\r\n            pos = line.to + 1; // Move to the start of the next line\r\n          }\r\n        }\r\n      } else if (currentMode === 'preview') {\r\n        // Preview mode: always replace with <hr> widget if syntax matches\r\n        for (const { from, to } of view.visibleRanges) {\r\n          for (let pos = from; pos <= to; ) {\r\n            const line = state.doc.lineAt(pos);\r\n            if (line.length === 0 && pos === to && line.from !== line.to) { \r\n                 pos = line.to + 1;\r\n                 continue;\r\n            }\r\n            const match = HR_REGEX.exec(line.text);\r\n            if (match) {\r\n              builder.add(line.from, line.to, Decoration.replace({ widget: new HorizontalRuleWidget() }));\r\n            }\r\n            pos = line.to + 1;\r\n          }\r\n        }\r\n      }\r\n      return builder.finish();\r\n    }\r\n  },\r\n  {\r\n    decorations: v => v.decorations,\r\n  }\r\n);\r\n","import { Decoration, WidgetType, EditorView, ViewPlugin, DecorationSet, ViewUpdate } from '@codemirror/view';\r\nimport { RangeSetBuilder } from '@codemirror/state';\r\nimport { markdownSyntaxStateField } from '../index'; // Assuming index.ts is one level up\r\nimport { syntaxTree } from '@codemirror/language';\r\n\r\n/**\r\n * Regular expression to match two or more spaces at the end of a line (markdown line break)\r\n * This pattern is more specific to find exactly two spaces followed by nothing or a newline\r\n */\r\nconst LINE_BREAK_REGEX = /\\s{2,}(?=$|\\n)/gm;\r\n\r\n/**\r\n * Widget for preview mode that renders a visual indicator for line breaks\r\n */\r\nclass LineBreakVisualIndicator extends WidgetType {\r\n  toDOM() {\r\n    const span = document.createElement('span');\r\n    span.className = 'cm-line-break-indicator';\r\n    span.innerHTML = '↵'; // Visual indicator for line break\r\n    span.style.color = '#888';\r\n    span.style.fontSize = '0.85em';\r\n    span.style.verticalAlign = 'text-top';\r\n    return span;\r\n  }\r\n\r\n  ignoreEvent() {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Decoration for live mode (subtly indicates the two spaces)\r\n */\r\nconst liveLineBreakMark = Decoration.mark({\r\n  class: 'cm-line-break-syntax'\r\n});\r\n\r\n/**\r\n * Builds decorations for line breaks in the document\r\n * @param view - The editor view\r\n * @returns A set of decorations\r\n */\r\nfunction buildLineBreakDecorations(view: EditorView): DecorationSet {\r\n  const builder = new RangeSetBuilder<Decoration>();\r\n  const modeState = view.state.field(markdownSyntaxStateField, false);\r\n  const currentMode = modeState ? modeState.currentMode : 'live';\r\n\r\n  // Process each visible line in the document\r\n  for (const { from, to } of view.visibleRanges) {\r\n    // Go through line by line for more precise control\r\n    let pos = from;\r\n    while (pos <= to) {\r\n      const line = view.state.doc.lineAt(pos);\r\n      \r\n      // Check for trailing spaces at the end of the line\r\n      let lineText = line.text;\r\n      let trailingSpacesMatch = lineText.match(/(\\s{2,})$/);\r\n      \r\n      if (trailingSpacesMatch && trailingSpacesMatch[1]) {\r\n        const trailingSpaces = trailingSpacesMatch[1];\r\n        const spacesStartPos = line.to - trailingSpaces.length;\r\n        \r\n        // In preview mode, we want to show a visual line break indicator\r\n        if (currentMode === 'preview') {\r\n          // Style the trailing spaces\r\n          builder.add(\r\n            spacesStartPos,\r\n            line.to,\r\n            liveLineBreakMark\r\n          );\r\n          \r\n          // Add a visual indicator (↵) right after the spaces\r\n          builder.add(\r\n            line.to,\r\n            line.to,\r\n            Decoration.widget({\r\n              widget: new LineBreakVisualIndicator(),\r\n              side: -1 // Position before the newline\r\n            })\r\n          );\r\n          \r\n          // Also ensure the next line gets proper paragraph styling in preview mode\r\n          // by adding extra space after\r\n          if (pos < view.state.doc.length) {\r\n            builder.add(\r\n              line.to,\r\n              line.to,\r\n              Decoration.mark({\r\n                class: 'cm-line-break-after',\r\n                attributes: { 'data-line-break': 'true' }\r\n              })\r\n            );\r\n          }\r\n        } else {\r\n          // In live mode, just subtly highlight the spaces\r\n          builder.add(\r\n            spacesStartPos,\r\n            line.to,\r\n            Decoration.mark({\r\n              class: 'cm-line-break-syntax',\r\n              attributes: { 'data-line-break': 'true' }\r\n            })\r\n          );\r\n        }\r\n      }\r\n      \r\n      // Move to the next line\r\n      pos = line.to + 1;\r\n    }\r\n  }\r\n  \r\n  return builder.finish();\r\n}\r\n\r\n/**\r\n * ViewPlugin that handles decorating line breaks in markdown\r\n */\r\nexport const LineBreakDecorator = ViewPlugin.fromClass(\r\n  class {\r\n    decorations: DecorationSet;\r\n\r\n    constructor(view: EditorView) {\r\n      this.decorations = buildLineBreakDecorations(view);\r\n    }\r\n\r\n    update(update: ViewUpdate) {\r\n      // Check if mode has changed or document/viewport has changed\r\n      const modeStateChanged = update.startState.field(markdownSyntaxStateField, false)?.currentMode !== \r\n                              update.state.field(markdownSyntaxStateField, false)?.currentMode;\r\n                              \r\n      if (update.docChanged || update.viewportChanged || update.selectionSet || modeStateChanged) {\r\n        this.decorations = buildLineBreakDecorations(update.view);\r\n      }\r\n    }\r\n  },\r\n  {\r\n    decorations: (v) => v.decorations,\r\n  }\r\n);\r\n","/**\r\n * Core types and constants for HTML tag handling\r\n */\r\n\r\n/**\r\n * Type definitions for HTML decorator extension\r\n */\r\n\r\n/**\r\n * Represents an HTML region in the document with positions and metadata\r\n */\r\nexport interface HtmlRegion {\r\n  /**\r\n   * Start position (inclusive)\r\n   */\r\n  from: number;\r\n\r\n  /**\r\n   * End position (inclusive)\r\n   */\r\n  to: number;\r\n\r\n  /**\r\n   * Tag name, like 'div', 'span', etc.\r\n   */\r\n  tagName: string;\r\n\r\n  /**\r\n   * Whether this HTML spans multiple lines\r\n   */\r\n  isMultiline: boolean;\r\n\r\n  /**\r\n   * The entire HTML content as a string\r\n   */\r\n  content: string;\r\n\r\n  /**\r\n   * Position where the opening tag ends (where content starts)\r\n   */\r\n  openTagEnd: number;\r\n\r\n  /**\r\n   * Position where the closing tag starts\r\n   */\r\n  closeTagStart: number;\r\n\r\n  /**\r\n   * Whether this is a self-closing tag like <br/> or <img/>\r\n   */\r\n  isSelfClosing: boolean;\r\n}\r\n\r\n/**\r\n * HTML rendering modes\r\n */\r\nexport enum HtmlRenderMode {\r\n  /** Show raw HTML code */\r\n  CODE,\r\n  \r\n  /** Show rendered HTML content */\r\n  RENDER\r\n}\r\n\r\n/**\r\n * Set of HTML void elements (self-closing tags)\r\n * These tags do not have closing tags in HTML\r\n */\r\nexport const VOID_TAGS = new Set([\r\n  'area',\r\n  'base',\r\n  'br',\r\n  'col',\r\n  'embed',\r\n  'hr',\r\n  'img',\r\n  'input',\r\n  'link',\r\n  'meta',\r\n  'param',\r\n  'source',\r\n  'track',\r\n  'wbr',\r\n]);\r\n\r\n/**\r\n * Set of potentially dangerous HTML tags that might execute scripts\r\n * These will be sanitized when rendering HTML\r\n */\r\nexport const DANGEROUS_TAGS = new Set([\r\n  'script',\r\n  'iframe',\r\n  'object',\r\n  'embed',\r\n  'applet',\r\n  'base',\r\n  'form',\r\n  'frame',\r\n  'frameset'\r\n]); ","import { WidgetType, EditorView } from '@codemirror/view';\r\nimport { DANGEROUS_TAGS } from './types';\r\n\r\n// Debug helper\r\nconst DEBUG = false;\r\n\r\n/**\r\n * Widget for rendering HTML content in preview mode\r\n */\r\nexport class HtmlPreviewWidget extends WidgetType {\r\n  private content: string;\r\n  private isMultiline: boolean;\r\n\r\n  constructor(content: string, isMultiline = false) {\r\n    super();\r\n    this.content = content;\r\n    this.isMultiline = isMultiline;\r\n    \r\n    if (DEBUG) {\r\n      console.log(\"Creating HTML widget:\", { \r\n        content: content.substring(0, 100) + (content.length > 100 ? '...' : ''),\r\n        isMultiline \r\n      });\r\n    }\r\n  }\r\n\r\n  eq(other: HtmlPreviewWidget): boolean {\r\n    return this.content === other.content && \r\n           this.isMultiline === other.isMultiline;\r\n  }\r\n\r\n  /**\r\n   * Renders the HTML content as a DOM element\r\n   */\r\n  toDOM(): HTMLElement {\r\n    try {\r\n      if (DEBUG) console.log(\"Rendering HTML widget\", this.isMultiline ? \"multiline\" : \"inline\");\r\n      \r\n      // Create container\r\n      const wrapper = document.createElement('div');\r\n      wrapper.className = 'cm-html-preview-widget';\r\n      \r\n      // Add special class for multiline widgets\r\n      if (this.isMultiline) {\r\n        wrapper.classList.add('cm-html-preview-multiline');\r\n      } else {\r\n        wrapper.classList.add('cm-html-preview-inline');\r\n      }\r\n      \r\n      // Create content container (removed the label)\r\n      const contentContainer = document.createElement('div');\r\n      contentContainer.className = 'cm-html-content-container';\r\n      contentContainer.style.cssText = `\r\n        padding: 0;\r\n        background: transparent;\r\n        border-radius: 0;\r\n      `;\r\n      \r\n      try {\r\n        // Process content and check for security issues\r\n        const securityWarnings = this.checkSecurityIssues(this.content);\r\n        if (securityWarnings.length > 0) {\r\n          // Add security warnings if found\r\n          securityWarnings.forEach(warning => {\r\n            const warningElement = document.createElement('div');\r\n            warningElement.className = 'cm-html-security-warning';\r\n            warningElement.innerHTML = `⚠️ ${warning}`;\r\n            contentContainer.appendChild(warningElement);\r\n          });\r\n        }\r\n        \r\n        // Extract content from the HTML if we have both opening and closing tags\r\n        let htmlToRender = this.content;\r\n        let isBlockElement = false;\r\n        \r\n        // Instead of trying to extract the content with regex, we'll render the full HTML\r\n        // This handles deeply nested elements better\r\n        \r\n        // Just detect if it's a block element for proper display\r\n        const tagMatch = /<([a-zA-Z][a-zA-Z0-9\\-_:]*)([^>]*?)(?:\\s*\\/?>)/i.exec(this.content);\r\n        if (tagMatch) {\r\n          const tagName = tagMatch[1].toLowerCase();\r\n          isBlockElement = this.isBlockElement(tagName);\r\n        }\r\n        \r\n        // Create a container for the actual rendered HTML\r\n        const htmlContainer = document.createElement('div');\r\n        \r\n        // Apply editor's base styles but allow HTML to override specific properties\r\n        htmlContainer.style.cssText = `\r\n          display: block; \r\n          width: 100%;\r\n          font-family: inherit;\r\n          font-size: inherit;\r\n          line-height: inherit;\r\n          color: inherit;\r\n        `;\r\n        \r\n        // Apply block or inline styling based on element type\r\n        if (isBlockElement) {\r\n          htmlContainer.style.cssText += 'display: block;';\r\n        }\r\n        \r\n        // Apply the sanitized HTML content\r\n        htmlContainer.innerHTML = this.sanitizeHtml(htmlToRender);\r\n        \r\n        // Apply base editor styles to all HTML elements that don't have explicit styles\r\n        htmlContainer.querySelectorAll('*').forEach(element => {\r\n          if (element instanceof HTMLElement) {\r\n            // Only apply default styles if not specified in the HTML\r\n            if (!element.hasAttribute('style')) {\r\n              element.style.fontFamily = 'inherit';\r\n              element.style.fontSize = 'inherit';\r\n              element.style.lineHeight = 'inherit';\r\n              element.style.color = 'inherit';\r\n            }\r\n            \r\n            // Make sure block elements display properly\r\n            if (this.isBlockElement(element.tagName)) {\r\n              element.style.display = 'block';\r\n              element.style.width = '100%';\r\n              element.style.boxSizing = 'border-box';\r\n              \r\n              // Remove excessive margins to match Obsidian's rendering\r\n              if (!element.style.marginTop) element.style.marginTop = '0';\r\n              if (!element.style.marginBottom) element.style.marginBottom = '0';\r\n            }\r\n            \r\n            // Special handling for list elements to show bullets\r\n            if (element.tagName === 'UL') {\r\n              element.style.listStyleType = 'disc';\r\n              element.style.paddingLeft = '2em';\r\n              element.style.marginTop = '0.2em';\r\n              element.style.marginBottom = '0.2em';\r\n            } else if (element.tagName === 'OL') {\r\n              element.style.listStyleType = 'decimal';\r\n              element.style.paddingLeft = '2em';\r\n              element.style.marginTop = '0.2em';\r\n              element.style.marginBottom = '0.2em';\r\n            } else if (element.tagName === 'LI') {\r\n              element.style.display = 'list-item';\r\n              element.style.marginTop = '0.1em';\r\n              element.style.marginBottom = '0.1em';\r\n            } else if (element.tagName === 'DIV') {\r\n              element.style.width = '100%';\r\n              element.style.boxSizing = 'border-box';\r\n              element.style.margin = '0';\r\n              element.style.padding = '0';\r\n            } else if (element.tagName === 'P') {\r\n              // Reduce paragraph spacing to match Obsidian\r\n              element.style.marginTop = '0.2em';\r\n              element.style.marginBottom = '0.2em';\r\n            }\r\n          }\r\n        });\r\n        \r\n        contentContainer.appendChild(htmlContainer);\r\n        \r\n        // Edit button has been removed as requested\r\n        \r\n        // Disable any interactive elements\r\n        this.disableInteractiveElements(htmlContainer);\r\n        \r\n      } catch (error: any) {\r\n        console.error('Error rendering HTML:', error);\r\n        const errorDiv = document.createElement('div');\r\n        errorDiv.className = 'cm-html-error';\r\n        errorDiv.textContent = `Error rendering HTML: ${error.message || 'Unknown error'}`;\r\n        contentContainer.appendChild(errorDiv);\r\n      }\r\n      \r\n      wrapper.appendChild(contentContainer);\r\n      \r\n      return wrapper;\r\n    } catch (error: any) {\r\n      console.error('Fatal error in HTML widget:', error);\r\n      const errorElement = document.createElement('div');\r\n      errorElement.className = 'cm-html-error';\r\n      errorElement.textContent = 'Error rendering HTML content';\r\n      return errorElement;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check for potential security issues in HTML content\r\n   */\r\n  private checkSecurityIssues(html: string): string[] {\r\n    const warnings: string[] = [];\r\n    \r\n    // Check for dangerous tags\r\n    DANGEROUS_TAGS.forEach(tag => {\r\n      const tagRegex = new RegExp(`<${tag}[\\\\s>]`, 'i');\r\n      if (tagRegex.test(html)) {\r\n        warnings.push(`${tag.toUpperCase()} tag detected and will be sanitized`);\r\n      }\r\n    });\r\n    \r\n    // Check for event handlers\r\n    if (/\\son\\w+\\s*=/i.test(html)) {\r\n      warnings.push('Event handlers detected and removed');\r\n    }\r\n    \r\n    // Check for javascript: URLs\r\n    if (/javascript:/i.test(html)) {\r\n      warnings.push('JavaScript URLs detected and removed');\r\n    }\r\n    \r\n    return warnings;\r\n  }\r\n\r\n  /**\r\n   * Sanitizes HTML to prevent XSS attacks\r\n   */\r\n  private sanitizeHtml(html: string): string {\r\n    // Remove script tags and their content\r\n    let sanitized = html.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '');\r\n    \r\n    // Remove event handlers (onclick, onload, etc.)\r\n    sanitized = sanitized.replace(/\\son\\w+\\s*=\\s*(['\"]).*?\\1/gi, '');\r\n    sanitized = sanitized.replace(/\\son\\w+\\s*=\\s*[^\\s>]+/gi, '');\r\n    \r\n    // Remove javascript: URLs\r\n    sanitized = sanitized.replace(/javascript:/gi, 'void:');\r\n    \r\n    // Handle dangerous tags by adding warnings\r\n    DANGEROUS_TAGS.forEach(tag => {\r\n      const tagName = tag.toUpperCase();\r\n      \r\n      // Handle opening/closing tag pairs\r\n      const regex = new RegExp(`<${tag}([^>]*)>([\\\\s\\\\S]*?)<\\\\/${tag}>`, 'gi');\r\n      sanitized = sanitized.replace(regex, (match, attrs, content) => {\r\n        return `<div class=\"cm-html-removed-tag\">[${tagName} removed]</div>`;\r\n      });\r\n      \r\n      // Handle self-closing versions\r\n      const selfClosingRegex = new RegExp(`<${tag}([^>]*?)\\\\s*\\\\/>`, 'gi');\r\n      sanitized = sanitized.replace(selfClosingRegex, \r\n        `<div class=\"cm-html-removed-tag\">[${tagName} removed]</div>`);\r\n    });\r\n    \r\n    return sanitized;\r\n  }\r\n\r\n  /**\r\n   * Disable interactive elements like links and forms\r\n   */\r\n  private disableInteractiveElements(container: HTMLElement): void {\r\n    try {\r\n      // Disable links\r\n      const links = container.querySelectorAll('a');\r\n      links.forEach(link => {\r\n        link.addEventListener('click', e => e.preventDefault());\r\n        link.style.pointerEvents = 'none';\r\n        if (link.hasAttribute('href')) {\r\n          link.setAttribute('data-href', link.getAttribute('href') || '');\r\n          link.removeAttribute('href');\r\n        }\r\n      });\r\n      \r\n      // Disable forms\r\n      const forms = container.querySelectorAll('form');\r\n      forms.forEach(form => {\r\n        form.addEventListener('submit', e => e.preventDefault());\r\n        form.setAttribute('onsubmit', 'return false;');\r\n      });\r\n      \r\n      // Disable buttons\r\n      const buttons = container.querySelectorAll('button, input[type=\"submit\"], input[type=\"button\"]');\r\n      buttons.forEach(button => {\r\n        button.setAttribute('disabled', 'disabled');\r\n        button.addEventListener('click', e => e.preventDefault());\r\n      });\r\n    } catch (error: any) {\r\n      if (DEBUG) console.error('Error disabling interactive elements:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Try to find the editor view from a DOM element\r\n   */\r\n  private getEditorViewFromElement(element: HTMLElement): EditorView | null {\r\n    try {\r\n      // Look for the CodeMirror editor in the parent chain\r\n      let current: HTMLElement | null = element;\r\n      while (current) {\r\n        // Look for the CodeMirror editor wrapper\r\n        const editorEl = current.closest('.cm-editor');\r\n        if (editorEl) {\r\n          // Try to find the view instance\r\n          for (const key in editorEl) {\r\n            if (key.startsWith('__')) {\r\n              // @ts-ignore - accessing private property\r\n              const value = editorEl[key];\r\n              if (value instanceof EditorView) {\r\n                return value;\r\n              }\r\n            }\r\n          }\r\n          \r\n          // Alternative way - look through event listeners\r\n          // @ts-ignore - accessing private property\r\n          if (editorEl.cmView) {\r\n            // @ts-ignore - accessing private property\r\n            return editorEl.cmView;\r\n          }\r\n        }\r\n        current = current.parentElement;\r\n      }\r\n      \r\n      // Another approach - use a global CodeMirror registry if available\r\n      // @ts-ignore - accessing potential global property\r\n      if (window.CodeMirrorViewRegistry) {\r\n        // @ts-ignore - accessing potential global property\r\n        const registry = window.CodeMirrorViewRegistry;\r\n        for (const view of registry) {\r\n          if (view.dom && view.dom.contains(element)) {\r\n            return view;\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error finding editor view:', error);\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Allow events from the content (like scrolling in a div)\r\n   */\r\n  ignoreEvent(): boolean {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Check if a tag name represents a block element\r\n   */\r\n  private isBlockElement(tagName: string): boolean {\r\n    const blockElements = [\r\n      'DIV', 'P', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6',\r\n      'ARTICLE', 'SECTION', 'HEADER', 'FOOTER', 'BLOCKQUOTE',\r\n      'UL', 'OL', 'LI', 'TABLE', 'TR', 'HR', 'PRE', 'FIGURE'\r\n    ];\r\n    \r\n    return blockElements.includes(tagName.toUpperCase());\r\n  }\r\n} ","import { Decoration, DecorationSet } from '@codemirror/view';\r\nimport { RangeSetBuilder } from '@codemirror/state';\r\nimport { HtmlRegion, VOID_TAGS } from './types';\r\n\r\n/**\r\n * Interface for tracking decoration items before sorting\r\n */\r\ninterface DecorationItem {\r\n  from: number;\r\n  to: number;\r\n  decoration: Decoration;\r\n}\r\n\r\n/**\r\n * Service for providing syntax highlighting to HTML code\r\n */\r\nexport class HtmlSyntaxHighlighter {\r\n  /**\r\n   * Highlight HTML code with appropriate syntax classes\r\n   */\r\n  static highlight(region: HtmlRegion): DecorationSet {\r\n    try {\r\n      // For safety, return an empty decoration set if there's no content\r\n      if (!region.content || region.content.length === 0) {\r\n        return Decoration.none;\r\n      }\r\n      \r\n      // Create a builder for decorations\r\n      const builder = new RangeSetBuilder<Decoration>();\r\n      \r\n      // Add base HTML code highlighting decoration\r\n      builder.add(\r\n        region.from, \r\n        region.to, \r\n        Decoration.mark({ \r\n          class: 'cm-html-code-mode cm-disable-markdown-parsing cm-plain-text',\r\n          inclusive: true\r\n        })\r\n      );\r\n      \r\n      // Add token-level decorations for HTML syntax highlighting\r\n      this.addHtmlTokens(builder, region.content, region.from);\r\n      \r\n      return builder.finish();\r\n    } catch (error) {\r\n      console.error(\"Error in HTML syntax highlighter:\", error);\r\n      return Decoration.none;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Add HTML token decorations directly to builder\r\n   */\r\n  private static addHtmlTokens(builder: RangeSetBuilder<Decoration>, html: string, baseOffset: number): void {\r\n    // Track tag nesting level for each tag name\r\n    const tagStack: {name: string, level: number}[] = [];\r\n    let currentLevel = 0;\r\n    \r\n    // Improved regex for better token detection\r\n    // Process tag by tag using regex that handles all HTML elements more precisely\r\n    const tokenRegex = /<\\/?([a-zA-Z][a-zA-Z0-9\\-_:]*)|\\s([a-zA-Z][a-zA-Z0-9\\-_:]*)(=(?:(['\"]).*?\\4|\\S+))?|(['\"])(.*?)\\5|(\\/?>)/g;\r\n    let match;\r\n    \r\n    // Create an array of tokens before adding to builder\r\n    const tokens: {from: number, to: number, class: string}[] = [];\r\n    \r\n    // Process tokens in order of appearance (which maintains from order)\r\n    while ((match = tokenRegex.exec(html)) !== null) {\r\n      try {\r\n        const [full, tagName, attrName, fullAttr, q1, attrValue, q2, bracket] = match;\r\n        const start = baseOffset + match.index;\r\n        \r\n        // Handle opening and closing tags\r\n        if (tagName) {\r\n          const isClosing = full.startsWith('</');\r\n          const tagStart = start;\r\n          const tagEnd = start + (isClosing ? 2 : 1) + tagName.length;\r\n          \r\n          // Add bracket highlighting\r\n          tokens.push({\r\n            from: tagStart,\r\n            to: tagStart + (isClosing ? 2 : 1),\r\n            class: `cm-html-bracket cm-html-bracket-level-${currentLevel % 6}`\r\n          });\r\n          \r\n          // Add tag name highlighting\r\n          tokens.push({\r\n            from: tagStart + (isClosing ? 2 : 1),\r\n            to: tagEnd,\r\n            class: `cm-html-tag-name cm-html-tag-level-${currentLevel % 6}`\r\n          });\r\n          \r\n          // Track nesting\r\n          if (isClosing) {\r\n            // Find matching opening tag\r\n            for (let i = tagStack.length - 1; i >= 0; i--) {\r\n              if (tagStack[i].name === tagName.toLowerCase()) {\r\n                currentLevel = tagStack[i].level;\r\n                tagStack.splice(i);\r\n                break;\r\n              }\r\n            }\r\n          } else {\r\n            // Push this tag onto stack\r\n            tagStack.push({\r\n              name: tagName.toLowerCase(),\r\n              level: currentLevel\r\n            });\r\n            currentLevel = (currentLevel + 1) % 6;\r\n          }\r\n        }\r\n        \r\n        // Handle attributes\r\n        else if (attrName) {\r\n          const attrStart = start + 1; // Skip whitespace\r\n          const attrEnd = attrStart + attrName.length;\r\n          \r\n          tokens.push({\r\n            from: attrStart,\r\n            to: attrEnd,\r\n            class: 'cm-html-attribute'\r\n          });\r\n          \r\n          // If attribute has a value, highlight it\r\n          if (fullAttr && fullAttr.includes('=')) {\r\n            const equalsPos = fullAttr.indexOf('=');\r\n            const valueStart = attrStart + attrName.length + 1; // +1 for equals sign\r\n            \r\n            if (q1) { // Quoted value\r\n              const quoteLen = q1.length;\r\n              tokens.push({\r\n                from: valueStart,\r\n                to: valueStart + fullAttr.length - equalsPos - 1,\r\n                class: 'cm-html-attribute-value'\r\n              });\r\n            } else if (fullAttr.length > equalsPos + 1) { // Unquoted value\r\n              tokens.push({\r\n                from: valueStart,\r\n                to: valueStart + fullAttr.length - equalsPos - 1,\r\n                class: 'cm-html-attribute-value'\r\n              });\r\n            }\r\n          }\r\n        }\r\n        \r\n        // Handle attribute values with explicit quotes\r\n        else if (attrValue !== undefined && q2) {\r\n          const valueStart = start;\r\n          const valueEnd = start + q2.length + attrValue.length + q2.length;\r\n          \r\n          tokens.push({\r\n            from: valueStart,\r\n            to: valueEnd,\r\n            class: 'cm-html-attribute-value'\r\n          });\r\n        }\r\n        \r\n        // Handle closing brackets\r\n        else if (bracket) {\r\n          const bracketStart = start;\r\n          const bracketEnd = start + bracket.length;\r\n          \r\n          const isSelfClosing = bracket === '/>' || \r\n              (bracket === '>' && tagStack.length > 0 && \r\n               VOID_TAGS.has(tagStack[tagStack.length - 1].name));\r\n            \r\n          tokens.push({\r\n            from: bracketStart,\r\n            to: bracketEnd,\r\n            class: `cm-html-bracket cm-html-bracket-level-${Math.max(0, currentLevel - (isSelfClosing ? 1 : 0)) % 6}`\r\n          });\r\n          \r\n          if (isSelfClosing && tagStack.length > 0) {\r\n            currentLevel = tagStack[tagStack.length - 1].level;\r\n            tagStack.pop();\r\n          }\r\n        }\r\n      } catch (tokenError) {\r\n        // Skip this token if there was an error processing it\r\n        console.warn(\"Error processing token:\", tokenError);\r\n      }\r\n    }\r\n    \r\n    // Sort tokens by position to ensure they're added in the correct order\r\n    tokens.sort((a, b) => {\r\n      if (a.from !== b.from) return a.from - b.from;\r\n      return a.to - b.to;\r\n    });\r\n    \r\n    // Add all tokens to the builder\r\n    for (const token of tokens) {\r\n      builder.add(\r\n        token.from,\r\n        token.to,\r\n        Decoration.mark({ class: token.class })\r\n      );\r\n    }\r\n  }\r\n} ","import { Text } from '@codemirror/state';\r\nimport { EditorView } from '@codemirror/view';\r\nimport { HtmlRegion, VOID_TAGS } from './types';\r\n\r\n/**\r\n * Detects HTML regions in the document text\r\n */\r\nexport function detectHtmlRegions(view: EditorView): HtmlRegion[] {\r\n  try {\r\n    const regions: HtmlRegion[] = [];\r\n    const { state } = view;\r\n    const doc = state.doc;\r\n    \r\n    // Get the entire document text for proper tag matching\r\n    const fullText = doc.toString();\r\n    \r\n    // First, identify HTML comments and exclude them from tag processing\r\n    const commentRegions = findHtmlComments(fullText);\r\n    \r\n    // Parse HTML using a more robust stack-based approach\r\n    const parsedRegions = parseHtmlHierarchy(fullText, commentRegions);\r\n    \r\n    // Convert parsed regions to our HtmlRegion format\r\n    for (const region of parsedRegions) {\r\n      try {\r\n        const { from, to, tagName, content, isMultiline, isSelfClosing, openTagEnd, closeTagStart } = region;\r\n        \r\n        regions.push({\r\n          from,\r\n          to,\r\n          tagName,\r\n          isMultiline,\r\n          content,\r\n          openTagEnd,\r\n          closeTagStart,\r\n          isSelfClosing\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Error processing HTML region:\", error);\r\n      }\r\n    }\r\n    \r\n    // Sort regions by start position\r\n    regions.sort((a, b) => a.from - b.from);\r\n    \r\n    return regions;\r\n  } catch (error) {\r\n    console.error(\"Error detecting HTML regions:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Parse HTML using a stack-based approach to handle nested tags properly\r\n */\r\nfunction parseHtmlHierarchy(text: string, commentRegions: Array<{from: number, to: number}>): HtmlRegion[] {\r\n  const regions: HtmlRegion[] = [];\r\n  \r\n  // Stack to keep track of open tags\r\n  interface TagStackItem {\r\n    tagName: string;\r\n    startIndex: number;\r\n    openTagEnd: number;\r\n    content: string;\r\n  }\r\n  \r\n  const tagStack: TagStackItem[] = [];\r\n  \r\n  // Regex to find opening and closing tags\r\n  const tagRegex = /<\\/?\\s*([a-zA-Z][a-zA-Z0-9\\-_:]*)((?:\\s+[a-zA-Z][a-zA-Z0-9\\-_:]*(?:=(?:\"[^\"]*\"|'[^']*'|[^\\s>]*))?)*)\\s*(\\/?)>/g;\r\n  let match: RegExpExecArray | null;\r\n  \r\n  while ((match = tagRegex.exec(text)) !== null) {\r\n    const [fullMatch, tagName, attributes, selfClosing] = match;\r\n    const position = match.index;\r\n    const matchEnd = position + fullMatch.length;\r\n    const lowerTagName = tagName.toLowerCase();\r\n    \r\n    // Skip if this match is inside a comment\r\n    if (isPositionInRanges(position, commentRegions)) {\r\n      continue;\r\n    }\r\n    \r\n    const isClosingTag = fullMatch.startsWith('</');\r\n    const isSelfClosingTag = selfClosing === '/' || VOID_TAGS.has(lowerTagName);\r\n    \r\n    if (isClosingTag) {\r\n      // This is a closing tag, try to match it with the corresponding opening tag\r\n      let foundMatchingTag = false;\r\n      \r\n      // Look for matching opening tag, starting from the most recent\r\n      for (let i = tagStack.length - 1; i >= 0; i--) {\r\n        const openTag = tagStack[i];\r\n        \r\n        if (openTag.tagName.toLowerCase() === lowerTagName) {\r\n          // We found a matching opening tag!\r\n          const from = openTag.startIndex;\r\n          const to = matchEnd;\r\n          const content = text.substring(from, to);\r\n          const isMultiline = content.includes('\\n');\r\n          \r\n          regions.push({\r\n            from,\r\n            to,\r\n            tagName: lowerTagName,\r\n            content,\r\n            isMultiline,\r\n            isSelfClosing: false,\r\n            openTagEnd: openTag.openTagEnd,\r\n            closeTagStart: position\r\n          });\r\n          \r\n          // Remove this tag and all nested unclosed tags from the stack\r\n          // (This handles cases where tags were not properly nested)\r\n          tagStack.splice(i);\r\n          \r\n          foundMatchingTag = true;\r\n          break;\r\n        }\r\n      }\r\n      \r\n      // If we didn't find a matching opening tag, this closing tag is orphaned\r\n      if (!foundMatchingTag && VOID_TAGS.has(lowerTagName) === false) {\r\n        // Orphaned closing tag, no need to log\r\n      }\r\n    } else if (isSelfClosingTag) {\r\n      // This is a self-closing tag, add it directly to regions\r\n      regions.push({\r\n        from: position,\r\n        to: matchEnd,\r\n        tagName: lowerTagName,\r\n        content: fullMatch,\r\n        isMultiline: false,\r\n        isSelfClosing: true,\r\n        openTagEnd: matchEnd,\r\n        closeTagStart: matchEnd\r\n      });\r\n    } else {\r\n      // This is an opening tag, push to stack\r\n      tagStack.push({\r\n        tagName: lowerTagName,\r\n        startIndex: position,\r\n        openTagEnd: matchEnd,\r\n        content: fullMatch\r\n      });\r\n    }\r\n  }\r\n  \r\n  // Handle void elements that don't require closing tags\r\n  const voidTagRegex = /<([a-zA-Z][a-zA-Z0-9\\-_:]*)([^>]*?)>/g;\r\n  voidTagRegex.lastIndex = 0; // Reset regex\r\n  \r\n  while ((match = voidTagRegex.exec(text)) !== null) {\r\n    const [fullTag, tagName, attributes] = match;\r\n    const lowerTagName = tagName.toLowerCase();\r\n    const position = match.index;\r\n    const tagEnd = position + fullTag.length;\r\n    \r\n    // Only process if it's a void element and not already captured\r\n    if (VOID_TAGS.has(lowerTagName) && \r\n        !regions.some(r => r.from === position) && \r\n        !isPositionInRanges(position, commentRegions)) {\r\n      \r\n      regions.push({\r\n        from: position,\r\n        to: tagEnd,\r\n        tagName: lowerTagName,\r\n        isMultiline: false,\r\n        content: fullTag,\r\n        openTagEnd: tagEnd,\r\n        closeTagStart: tagEnd,\r\n        isSelfClosing: true\r\n      });\r\n    }\r\n  }\r\n  \r\n  return regions;\r\n}\r\n\r\n/**\r\n * Check if a position is within any of the specified ranges\r\n */\r\nfunction isPositionInRanges(position: number, ranges: Array<{from: number, to: number}>): boolean {\r\n  return ranges.some(range => position >= range.from && position < range.to);\r\n}\r\n\r\n/**\r\n * Find HTML comments in the document\r\n */\r\nfunction findHtmlComments(text: string): Array<{from: number, to: number}> {\r\n  const comments: Array<{from: number, to: number}> = [];\r\n  const commentRegex = /<!--[\\s\\S]*?-->/g;\r\n  let match: RegExpExecArray | null;\r\n  \r\n  while ((match = commentRegex.exec(text)) !== null) {\r\n    comments.push({\r\n      from: match.index,\r\n      to: match.index + match[0].length\r\n    });\r\n  }\r\n  \r\n  return comments;\r\n}\r\n\r\n/**\r\n * Determine if cursor is near or within an HTML region\r\n */\r\nexport function isCursorNearRegion(view: EditorView, region: HtmlRegion): boolean {\r\n  const selection = view.state.selection.main;\r\n  const cursor = selection.head;\r\n  const doc = view.state.doc;\r\n  \r\n  // Check if cursor is within the HTML region\r\n  if (cursor > region.from && cursor < region.to) {\r\n    return true;\r\n  }\r\n  \r\n  // Check if cursor is exactly at the boundary of the HTML region\r\n  if (cursor === region.from || cursor === region.to) {\r\n    return true;\r\n  }\r\n  \r\n  // Not near the HTML region - removed the line-before/line-after detection\r\n  // that was causing edit mode to activate on adjacent lines\r\n  return false;\r\n}\r\n\r\n/**\r\n * Check if the editor is in preview/read-only mode\r\n */\r\nexport function isEditorInPreviewMode(view: EditorView): boolean {\r\n  // Check for editor being in read-only mode\r\n  if (!view.state.facet(EditorView.editable)) {\r\n    return true;\r\n  }\r\n  \r\n  // Check for any parent element with \"preview-mode\" class\r\n  let element: HTMLElement | null = view.dom;\r\n  while (element) {\r\n    if (element.classList && element.classList.contains('preview-mode')) {\r\n      return true;\r\n    }\r\n    element = element.parentElement;\r\n  }\r\n  \r\n  return false;\r\n} ","import { Decoration, DecorationSet, EditorView, WidgetType } from '@codemirror/view';\r\nimport { RangeSetBuilder } from '@codemirror/state';\r\nimport { HtmlRegion } from './types';\r\nimport { HtmlPreviewWidget } from './html-widget';\r\nimport { HtmlSyntaxHighlighter } from './syntax-highlighter';\r\nimport { detectHtmlRegions, isCursorNearRegion, isEditorInPreviewMode } from './tag-detector';\r\n\r\n// Interface for decoration item\r\ninterface DecorationItem {\r\n  from: number;\r\n  to: number;\r\n  decoration: Decoration;\r\n}\r\n\r\n// Logging control\r\nconst DEBUG = false;\r\n\r\n/**\r\n * Builds HTML decorations for the editor\r\n */\r\nexport function buildHtmlDecorations(view: EditorView): DecorationSet {\r\n  try {\r\n    if (DEBUG) console.log(\"Building HTML decorations\");\r\n    \r\n    // Detect HTML regions in the document\r\n    const regions = detectHtmlRegions(view);\r\n    \r\n    if (!regions.length) {\r\n      if (DEBUG) console.log(\"No HTML regions found\");\r\n      return Decoration.none;\r\n    }\r\n    \r\n    if (DEBUG) console.log(`Found ${regions.length} HTML regions:`, regions);\r\n    \r\n    // Check if editor is in read-only/preview mode\r\n    const inPreviewMode = isEditorInPreviewMode(view);\r\n    \r\n    // Build decorations based on cursor position\r\n    return buildSmartDecorations(regions, view, inPreviewMode);\r\n  } catch (error) {\r\n    console.error('Error building HTML decorations:', error);\r\n    return Decoration.none;\r\n  }\r\n}\r\n\r\n/**\r\n * Creates an HTML preview element for a region\r\n */\r\nfunction createHtmlPreview(html: string): HTMLElement {\r\n  // Container for the preview\r\n  const container = document.createElement('div');\r\n  container.className = 'cm-html-preview';\r\n  container.style.cssText = `\r\n    background-color: #f5f5f5;\r\n    border: 2px solid #4285f4;\r\n    border-radius: 8px;\r\n    padding: 15px;\r\n    margin: 5px 0;\r\n    box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n    position: relative;\r\n  `;\r\n\r\n  // Create content container (removed the label)\r\n  const content = document.createElement('div');\r\n  content.style.cssText = `\r\n    background: white;\r\n    padding: 10px;\r\n    border-radius: 4px;\r\n    color: black;\r\n  `;\r\n  \r\n  // Set the HTML content\r\n  content.innerHTML = html;\r\n  container.appendChild(content);\r\n  \r\n  return container;\r\n}\r\n\r\n/**\r\n * Build smart decorations that handle both edit mode and preview mode\r\n */\r\nfunction buildSmartDecorations(regions: HtmlRegion[], view: EditorView, inPreviewMode: boolean): DecorationSet {\r\n  // Create a collection for all decorations before sorting\r\n  const allDecorations: DecorationItem[] = [];\r\n  \r\n  // Get cursor ranges\r\n  const cursorRanges = view.state.selection.ranges;\r\n  \r\n  // First, determine which regions should be in edit mode based on cursor proximity\r\n  // and build a set of their IDs\r\n  const editModeRegions = new Set<number>();\r\n  \r\n  // First pass: Find regions directly containing the cursor\r\n  for (let i = 0; i < regions.length; i++) {\r\n    const region = regions[i];\r\n    for (const range of cursorRanges) {\r\n      if (isCursorNearRegion(view, region)) {\r\n        editModeRegions.add(i);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Second pass: Find all regions nested within edit mode regions\r\n  // and also all parent regions containing edit mode regions\r\n  let madeChange = true;\r\n  while (madeChange) {\r\n    madeChange = false;\r\n    \r\n    // Check for nesting relationships\r\n    for (let i = 0; i < regions.length; i++) {\r\n      const region = regions[i];\r\n      \r\n      // If this region is already in edit mode, check for nested regions\r\n      if (editModeRegions.has(i)) {\r\n        // Find any regions completely contained within this one\r\n        for (let j = 0; j < regions.length; j++) {\r\n          if (i !== j && !editModeRegions.has(j)) {\r\n            const nestedRegion = regions[j];\r\n            if (nestedRegion.from >= region.from && nestedRegion.to <= region.to) {\r\n              editModeRegions.add(j);\r\n              madeChange = true;\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        // Check if this region contains any edit mode regions\r\n        for (let j = 0; j < regions.length; j++) {\r\n          if (editModeRegions.has(j)) {\r\n            const editModeRegion = regions[j];\r\n            if (editModeRegion.from >= region.from && editModeRegion.to <= region.to) {\r\n              editModeRegions.add(i);\r\n              madeChange = true;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  if (DEBUG) console.log(`${editModeRegions.size} regions will be in edit mode out of ${regions.length} total`);\r\n  \r\n  // Process each HTML region\r\n  for (let i = 0; i < regions.length; i++) {\r\n    const region = regions[i];\r\n    try {\r\n      // If this region should be in edit mode\r\n      if (editModeRegions.has(i)) {\r\n        if (DEBUG) console.log(`Creating editable syntax highlighting for ${region.tagName} (${region.from}-${region.to})`);\r\n        \r\n        // Add special plain text decoration to prevent markdown parsing within HTML\r\n        allDecorations.push({\r\n          from: region.from,\r\n          to: region.to,\r\n          decoration: Decoration.mark({ \r\n            class: 'cm-plain-text-marker cm-disable-markdown-parsing cm-html-code-mode cm-no-list-rendering cm-no-markdown',\r\n            inclusiveStart: true,\r\n            inclusiveEnd: true,\r\n            attributes: { \r\n              'data-html-content': 'true',\r\n              'data-no-markdown': 'true',\r\n              'data-no-list': 'true'\r\n            }\r\n          })\r\n        });\r\n        \r\n        // Get syntax highlighting decorations\r\n        const syntaxDecorationSet = HtmlSyntaxHighlighter.highlight(region);\r\n        \r\n        // Collect decorations from the decoration set into our array\r\n        const syntaxDecorations: DecorationItem[] = [];\r\n        \r\n        syntaxDecorationSet.between(region.from, region.to, (from, to, deco) => {\r\n          syntaxDecorations.push({\r\n            from,\r\n            to,\r\n            decoration: deco\r\n          });\r\n        });\r\n        \r\n        // If we have syntax decorations, add them to our collection\r\n        if (syntaxDecorations.length > 0) {\r\n          allDecorations.push(...syntaxDecorations);\r\n        }\r\n      } else {\r\n        if (DEBUG) console.log(`Creating preview for ${region.tagName} (${region.from}-${region.to})`);\r\n        \r\n        // Extract just the HTML content for preview\r\n        let htmlContent = region.content;\r\n        \r\n        // For div and span, try to extract inner content for cleaner display\r\n        const tagMatch = /<([a-zA-Z][a-zA-Z0-9\\-_:]*)([^>]*?)>([\\s\\S]*?)<\\/\\1>/i.exec(region.content);\r\n        if (tagMatch) {\r\n          const tagName = tagMatch[1].toLowerCase();\r\n          const attributes = tagMatch[2] || '';\r\n          const innerContent = tagMatch[3] || '';\r\n          \r\n          // Create an HTML string that preserves styling but focuses on content\r\n          if (tagName === 'div' || tagName === 'span') {\r\n            const styleMatch = /style\\s*=\\s*(['\"])(.*?)\\1/i.exec(attributes);\r\n            const styleValue = styleMatch ? styleMatch[2] : '';\r\n            \r\n            if (styleValue) {\r\n              htmlContent = `<div style=\"${styleValue}\">${innerContent}</div>`;\r\n            } else {\r\n              htmlContent = innerContent;\r\n            }\r\n          }\r\n        }\r\n        \r\n        // Make sure this region doesn't overlap with any edit mode regions\r\n        // This can happen with malformed HTML where regions overlap\r\n        let overlapsEditMode = false;\r\n        for (const editIndex of editModeRegions) {\r\n          const editRegion = regions[editIndex];\r\n          if ((region.from >= editRegion.from && region.from < editRegion.to) ||\r\n              (region.to > editRegion.from && region.to <= editRegion.to) ||\r\n              (region.from <= editRegion.from && region.to >= editRegion.to)) {\r\n            overlapsEditMode = true;\r\n            break;\r\n          }\r\n        }\r\n        \r\n        if (!overlapsEditMode) {\r\n          // Completely hide the original HTML code with a preview widget\r\n          allDecorations.push({\r\n            from: region.from,\r\n            to: region.to,\r\n            decoration: Decoration.replace({\r\n              widget: new HtmlPreviewWidget(htmlContent, region.isMultiline),\r\n            })\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error processing region:', error, region);\r\n    }\r\n  }\r\n  \r\n  // COMPLETELY REWRITTEN DECORATION SORTING AND BUILDING LOGIC\r\n  const builder = new RangeSetBuilder<Decoration>();\r\n  \r\n  try {\r\n    // Create a map to store decorations by position\r\n    // The key is the from position, and the value is an array of decorations at that position\r\n    const positionMap = new Map<number, {from: number, to: number, decoration: Decoration}[]>();\r\n    \r\n    // Group decorations by from position\r\n    for (const deco of allDecorations) {\r\n      if (deco.from < deco.to) { // Skip invalid ranges\r\n        if (!positionMap.has(deco.from)) {\r\n          positionMap.set(deco.from, []);\r\n        }\r\n        positionMap.get(deco.from)!.push(deco);\r\n      }\r\n    }\r\n    \r\n    // Get all positions sorted\r\n    const positions = Array.from(positionMap.keys()).sort((a, b) => a - b);\r\n    \r\n    // For each position, sort its decorations by startSide and priority\r\n    for (const pos of positions) {\r\n      const decos = positionMap.get(pos)!;\r\n      \r\n      // Sort decorations at this position\r\n      decos.sort((a, b) => {\r\n        // First prioritize by whether it's a replace widget\r\n        const aIsWidget = a.decoration.spec.widget !== undefined;\r\n        const bIsWidget = b.decoration.spec.widget !== undefined;\r\n        \r\n        if (aIsWidget !== bIsWidget) {\r\n          return aIsWidget ? -1 : 1; // Widgets come first\r\n        }\r\n        \r\n        // For marks, sort by startSide (inclusiveStart)\r\n        if (!aIsWidget && !bIsWidget) {\r\n          const aInclusive = a.decoration.spec.inclusiveStart === true;\r\n          const bInclusive = b.decoration.spec.inclusiveStart === true;\r\n          \r\n          if (aInclusive !== bInclusive) {\r\n            return aInclusive ? -1 : 1; // Inclusive comes first\r\n          }\r\n        }\r\n        \r\n        // If still tied, sort by end position\r\n        return a.to - b.to;\r\n      });\r\n      \r\n      // Add sorted decorations to the builder\r\n      for (const deco of decos) {\r\n        try {\r\n          builder.add(deco.from, deco.to, deco.decoration);\r\n        } catch (e) {\r\n          if (DEBUG) console.warn(`Skipping decoration ${deco.from}-${deco.to} due to error:`, e);\r\n        }\r\n      }\r\n    }\r\n    \r\n    return builder.finish();\r\n  } catch (error) {\r\n    console.error(\"Critical error in decoration building:\", error);\r\n    return Decoration.none;\r\n  }\r\n}\r\n\r\n/**\r\n * Widget that renders HTML directly in the replace decoration\r\n */\r\nclass HtmlReplaceWidget extends WidgetType {\r\n  constructor(readonly html: string) { super(); }\r\n  \r\n  eq(other: HtmlReplaceWidget): boolean {\r\n    return other.html === this.html;\r\n  }\r\n  \r\n  toDOM(): HTMLElement {\r\n    const element = document.createElement('div');\r\n    element.innerHTML = this.html;\r\n    return element.firstElementChild as HTMLElement;\r\n  }\r\n  \r\n  ignoreEvent(): boolean { return false; }\r\n} ","/**\r\n * HTML decorator styles that use CSS variables from templates\r\n */\r\n\r\n/**\r\n * Add HTML styles based on CSS variables\r\n * Uses variables from lightHtmlTemplate.css and darkHtmlTemplate.css\r\n */\r\nexport function addCssVarHtmlStyles(): void {\r\n  if (typeof document === \"undefined\") return;\r\n  \r\n  // Check if styles already exist\r\n  if (document.getElementById('cm-html-decorator-styles')) {\r\n    // Remove existing styles to ensure we have the latest\r\n    const oldStyles = document.getElementById('cm-html-decorator-styles');\r\n    if (oldStyles && oldStyles.parentNode) {\r\n      oldStyles.parentNode.removeChild(oldStyles);\r\n    }\r\n  }\r\n  \r\n  console.log(\"Adding HTML decorator styles with CSS variables\");\r\n  \r\n  // Create style element\r\n  const style = document.createElement('style');\r\n  style.id = 'cm-html-decorator-styles';\r\n  style.textContent = `\r\n    /* Editor container - ensure it can display overflow */\r\n    .cm-editor {\r\n      position: relative !important;\r\n      z-index: 1 !important;\r\n    }\r\n    \r\n    /* HTML decoration using CSS variables - Light Theme */\r\n    .cm-html-preview {\r\n      position: relative;\r\n      background-color: var(--light-html-preview-bg, #f8f8f8);\r\n      border: 1px solid var(--light-html-preview-border, #e0e0e0);\r\n      border-radius: 4px;\r\n      padding: 12px;\r\n      margin: 4px 0;\r\n      box-shadow: var(--light-html-preview-shadow, 0 1px 3px rgba(0,0,0,0.1));\r\n      min-height: 20px;\r\n      max-width: 100%;\r\n      width: calc(100% - 16px);\r\n      display: block;\r\n      visibility: visible !important;\r\n      color: var(--light-html-content-color, #333333);\r\n      z-index: 9999;\r\n    }\r\n    \r\n    /* HTML preview label */\r\n    .cm-html-preview-label {\r\n      position: absolute;\r\n      top: -10px;\r\n      left: 8px;\r\n      background: var(--light-html-label-bg, #e3e3e3);\r\n      color: var(--light-html-label-color, #333333);\r\n      padding: 2px 6px;\r\n      border-radius: 3px;\r\n      font-size: 10px;\r\n      font-weight: 500;\r\n      box-shadow: 0 1px 2px rgba(0,0,0,0.1);\r\n      z-index: 10000;\r\n    }\r\n    \r\n    /* HTML content container */\r\n    .cm-html-content {\r\n      background: var(--light-html-content-bg, #ffffff);\r\n      padding: 8px;\r\n      border-radius: 3px;\r\n      color: var(--light-html-content-color, #333333);\r\n      font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Arial, sans-serif;\r\n      line-height: 1.5;\r\n      min-height: 10px;\r\n    }\r\n    \r\n    /* HTML code syntax highlighting */\r\n    .cm-editor .cm-html-code-mode {\r\n      color: var(--light-html-content-color, #333333) !important;\r\n      font-family: monospace !important;\r\n      background-color: transparent !important;\r\n      border-radius: 0 !important;\r\n    }\r\n    \r\n    .cm-editor .cm-html-tag-name {\r\n      color: var(--light-html-tag-color, #d73a49) !important;\r\n      font-weight: 600 !important;\r\n      font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace !important;\r\n    }\r\n    \r\n    .cm-editor .cm-html-attribute {\r\n      color: var(--light-html-attribute-color, #e36209) !important;\r\n      font-style: normal !important;\r\n    }\r\n    \r\n    .cm-editor .cm-html-attribute-value {\r\n      color: var(--light-html-attribute-value-color, #22863a) !important;\r\n      font-style: normal !important;\r\n    }\r\n    \r\n    .cm-editor .cm-html-bracket {\r\n      color: var(--light-html-bracket-color, #909090) !important;\r\n      font-weight: normal !important;\r\n      opacity: 1 !important;\r\n    }\r\n    \r\n    /* Dark theme styles */\r\n    .dark .cm-html-preview {\r\n      background-color: var(--dark-html-preview-bg, #282828);\r\n      border: 1px solid var(--dark-html-preview-border, #444444);\r\n      box-shadow: var(--dark-html-preview-shadow, 0 1px 3px rgba(0,0,0,0.3));\r\n      color: var(--dark-html-content-color, #e0e0e0);\r\n    }\r\n    \r\n    .dark .cm-html-preview-label {\r\n      background: var(--dark-html-label-bg, #4a4a4a);\r\n      color: var(--dark-html-label-color, #e0e0e0);\r\n    }\r\n    \r\n    .dark .cm-html-content {\r\n      background: var(--dark-html-content-bg, #333333);\r\n      color: var(--dark-html-content-color, #e0e0e0);\r\n    }\r\n    \r\n    .dark .cm-editor .cm-html-tag-name {\r\n      color: var(--dark-html-tag-color, #f97583) !important;\r\n    }\r\n    \r\n    .dark .cm-editor .cm-html-attribute {\r\n      color: var(--dark-html-attribute-color, #ffab70) !important;\r\n    }\r\n    \r\n    .dark .cm-editor .cm-html-attribute-value {\r\n      color: var(--dark-html-attribute-value-color, #85e89d) !important;\r\n    }\r\n    \r\n    .dark .cm-editor .cm-html-bracket {\r\n      color: var(--dark-html-bracket-color, #a0a0a0) !important;\r\n    }\r\n    \r\n    /* Force visibility of HTML elements inside the preview */\r\n    .cm-html-preview * {\r\n      visibility: visible !important;\r\n      opacity: 1 !important;\r\n    }\r\n    \r\n    /* Block element defaults */\r\n    .cm-html-preview div,\r\n    .cm-html-preview p,\r\n    .cm-html-preview h1,\r\n    .cm-html-preview h2,\r\n    .cm-html-preview h3,\r\n    .cm-html-preview h4,\r\n    .cm-html-preview h5,\r\n    .cm-html-preview h6,\r\n    .cm-html-preview ul,\r\n    .cm-html-preview ol {\r\n      display: block !important;\r\n      margin: 0.4em 0 !important;\r\n    }\r\n    \r\n    /* Heading styles */\r\n    .cm-html-preview h1,\r\n    .cm-html-preview h2,\r\n    .cm-html-preview h3,\r\n    .cm-html-preview h4,\r\n    .cm-html-preview h5,\r\n    .cm-html-preview h6 {\r\n      font-weight: 600 !important;\r\n      color: var(--light-html-heading-color, #333333) !important;\r\n    }\r\n    \r\n    .dark .cm-html-preview h1,\r\n    .dark .cm-html-preview h2,\r\n    .dark .cm-html-preview h3,\r\n    .dark .cm-html-preview h4,\r\n    .dark .cm-html-preview h5,\r\n    .dark .cm-html-preview h6 {\r\n      color: var(--dark-html-heading-color, #e0e0e0) !important;\r\n    }\r\n    \r\n    .cm-html-preview h1 { font-size: 1.4em !important; }\r\n    .cm-html-preview h2 { font-size: 1.2em !important; }\r\n    .cm-html-preview h3 { font-size: 1.1em !important; }\r\n    \r\n    /* Debug info */\r\n    .cm-html-debug-info {\r\n      position: absolute;\r\n      bottom: -12px;\r\n      right: 4px;\r\n      font-size: 8px;\r\n      color: var(--light-html-debug-color, #999999);\r\n      background: rgba(255,255,255,0.7);\r\n      padding: 1px 3px;\r\n      border-radius: 2px;\r\n    }\r\n    \r\n    .dark .cm-html-debug-info {\r\n      color: var(--dark-html-debug-color, #777777);\r\n      background: rgba(0,0,0,0.3);\r\n    }\r\n    \r\n    /* Editorial indicator when in edit mode */\r\n    .cm-editing-html {\r\n      position: relative;\r\n    }\r\n    \r\n    .cm-editing-html::before {\r\n      content: \"Editing HTML\";\r\n      position: absolute;\r\n      top: -16px;\r\n      right: 8px;\r\n      background-color: var(--light-html-edit-label-bg, #f0f0f0);\r\n      color: var(--light-html-edit-label-color, #555555);\r\n      font-size: 9px;\r\n      padding: 1px 5px;\r\n      border-radius: 2px;\r\n      opacity: 0.8;\r\n    }\r\n    \r\n    .dark .cm-editing-html::before {\r\n      background-color: var(--dark-html-edit-label-bg, #3a3a3a);\r\n      color: var(--dark-html-edit-label-color, #bbbbbb);\r\n    }\r\n  `;\r\n  \r\n  // Add to document head\r\n  document.head.appendChild(style);\r\n  console.log(\"HTML decorator styles with CSS variables added to document\");\r\n} ","/**\r\n * CSS styles for HTML rendering and code highlighting\r\n */\r\nimport { addCssVarHtmlStyles } from './cssVarStyles';\r\n\r\n/**\r\n * Add global CSS styles for HTML rendering and code modes\r\n * This now uses the CSS variables from the template files\r\n */\r\nexport function addHtmlStyles(): void {\r\n  // Call the implementation that uses CSS variables\r\n  addCssVarHtmlStyles();\r\n} ","import { EditorView, ViewPlugin, ViewUpdate, PluginValue, Decoration, DecorationSet } from '@codemirror/view';\r\nimport { Extension, StateEffect, StateField } from '@codemirror/state';\r\nimport { buildHtmlDecorations } from './decorations';\r\nimport { addHtmlStyles } from './styles';\r\nimport { DANGEROUS_TAGS } from './types';\r\n\r\n/**\r\n * HtmlDecorator plugin to handle HTML rendering and editing in the editor\r\n */\r\nclass HtmlDecoratorPlugin implements PluginValue {\r\n  private view: EditorView;\r\n  private enabled = true;\r\n  private debug = false;\r\n  private updateScheduled = false;\r\n  private isDestroyed = false;\r\n  private lastSelectionHead = -1;\r\n  private htmlRegions: Array<{from: number, to: number}> = [];\r\n  \r\n  constructor(view: EditorView) {\r\n    this.view = view;\r\n    \r\n    // Add styles on plugin initialization\r\n    addHtmlStyles();\r\n    \r\n    // Initialize last selection position\r\n    if (view.state.selection.ranges.length > 0) {\r\n      this.lastSelectionHead = view.state.selection.main.head;\r\n    }\r\n    \r\n    // Schedule initial decorations update\r\n    setTimeout(() => {\r\n      this.updateDecorations();\r\n    }, 100);\r\n    \r\n    if (this.debug) console.log('HtmlDecorator plugin initialized');\r\n  }\r\n\r\n  /**\r\n   * Update the view - rebuild decorations when editor changes\r\n   */\r\n  update(update: ViewUpdate): void {\r\n    if (!this.enabled || this.isDestroyed) return;\r\n    \r\n    // Check if content changed\r\n    const contentChanged = update.docChanged;\r\n    const selectionChanged = update.selectionSet;\r\n    \r\n    // Check if cursor moved\r\n    let cursorMoved = false;\r\n    if (selectionChanged && update.state.selection.ranges.length > 0) {\r\n      const newHead = update.state.selection.main.head;\r\n      cursorMoved = newHead !== this.lastSelectionHead;\r\n      this.lastSelectionHead = newHead;\r\n    }\r\n    \r\n    // Only update if:\r\n    // 1. Content changed AND might affect HTML (we'll check this below)\r\n    // 2. Cursor moved near or away from an HTML region\r\n    \r\n    // Quick check - if content changed, is it affecting any known HTML region?\r\n    let htmlContentChanged = false;\r\n    if (contentChanged) {\r\n      // Check if any changes overlap with known HTML regions\r\n      update.changes.iterChanges((fromA, toA, fromB, toB) => {\r\n        // If we've already determined HTML content changed, skip further checks\r\n        if (htmlContentChanged) return;\r\n        \r\n        // Check if this change overlaps with any known HTML region\r\n        for (const region of this.htmlRegions) {\r\n          if (fromA <= region.to && toA >= region.from) {\r\n            htmlContentChanged = true;\r\n            break;\r\n          }\r\n        }\r\n        \r\n        // If the change doesn't overlap with known regions, we'll need to detect\r\n        // if it might have created a new HTML region (simple heuristic check for tags)\r\n        if (!htmlContentChanged) {\r\n          const changedText = update.state.doc.sliceString(fromB, toB);\r\n          htmlContentChanged = changedText.includes('<') && changedText.includes('>');\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Check if cursor moved to/from HTML region\r\n    let cursorMovedToFromHtml = false;\r\n    if (cursorMoved) {\r\n      // Check if cursor is within any known HTML region\r\n      const currentPosition = update.state.selection.main.head;\r\n      const cursorInHtmlRegion = this.htmlRegions.some(\r\n        region => currentPosition >= region.from && currentPosition <= region.to\r\n      );\r\n      \r\n      // Only consider exact boundaries, not adjacent positions\r\n      if (!cursorInHtmlRegion) {\r\n        cursorMovedToFromHtml = this.htmlRegions.some(\r\n          region => currentPosition === region.from || currentPosition === region.to\r\n        );\r\n      } else {\r\n        cursorMovedToFromHtml = true;\r\n      }\r\n    }\r\n    \r\n    // Schedule updates for both content changes and cursor movements\r\n    // IMPORTANT: Always use setTimeout to avoid updating during an update cycle\r\n    if ((contentChanged && htmlContentChanged) || cursorMoved) {\r\n      const reason = contentChanged ? 'HTML content change' : 'cursor movement';\r\n      if (this.debug) console.log(`HtmlDecorator: Scheduling update due to ${reason}`);\r\n      \r\n      // Always schedule updates at the end of the current update cycle to avoid errors\r\n      if (!this.updateScheduled) {\r\n        this.updateScheduled = true;\r\n        setTimeout(() => {\r\n          this.updateDecorations();\r\n          this.updateScheduled = false;\r\n        }, 0);\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Update decorations using the measure/notify pattern\r\n   */\r\n  private updateDecorations(): void {\r\n    if (this.isDestroyed) return;\r\n    \r\n    try {\r\n      if (this.debug) console.log(\"Updating HTML decorations\");\r\n      // Build decorations\r\n      const decorations = buildHtmlDecorations(this.view);\r\n      \r\n      // Update our cached HTML regions\r\n      this.updateHtmlRegions();\r\n      \r\n      // Apply the decorations using the state effect\r\n      this.view.dispatch({\r\n        effects: setHtmlDecorations.of(decorations)\r\n      });\r\n    } catch (error) {\r\n      console.error('Error updating HTML decorations:', error);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Update the cached list of HTML regions\r\n   */\r\n  private updateHtmlRegions(): void {\r\n    try {\r\n      const { state } = this.view;\r\n      const doc = state.doc;\r\n      const fullText = doc.toString();\r\n      \r\n      // Quick regex to find HTML regions (not perfect but good enough for caching)\r\n      const regions: Array<{from: number, to: number}> = [];\r\n      const htmlRegex = /<([a-zA-Z][a-zA-Z0-9\\-_:]*)([^>]*?)(?:\\/>|>([\\s\\S]*?)<\\/\\1>)/g;\r\n      let match: RegExpExecArray | null;\r\n      \r\n      while ((match = htmlRegex.exec(fullText)) !== null) {\r\n        regions.push({\r\n          from: match.index,\r\n          to: match.index + match[0].length\r\n        });\r\n      }\r\n      \r\n      this.htmlRegions = regions;\r\n    } catch (error) {\r\n      console.error('Error updating HTML regions cache:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clean up resources when plugin is removed\r\n   */\r\n  destroy(): void {\r\n    this.updateScheduled = false;\r\n    this.isDestroyed = true;\r\n    \r\n    if (this.debug) console.log('HtmlDecorator plugin destroyed');\r\n  }\r\n}\r\n\r\n// Define state effect for setting decorations\r\nexport const setHtmlDecorations = StateEffect.define<DecorationSet>();\r\n\r\n/**\r\n * State field for HTML decorations\r\n */\r\nexport const htmlDecorationsField = StateField.define<DecorationSet>({\r\n  create: () => Decoration.none,\r\n  update: (decorations, tr) => {\r\n    // Move decorations if document changes\r\n    decorations = decorations.map(tr.changes);\r\n    \r\n    // Apply any decoration effects\r\n    for (const effect of tr.effects) {\r\n      if (effect.is(setHtmlDecorations)) {\r\n        decorations = effect.value;\r\n      }\r\n    }\r\n    \r\n    return decorations;\r\n  },\r\n  provide: (field) => EditorView.decorations.from(field),\r\n});\r\n\r\n/**\r\n * Create HTML decorator extension for CodeMirror\r\n */\r\nexport function htmlDecorator(): Extension {\r\n  return [\r\n    htmlDecorationsField,\r\n    ViewPlugin.define(view => new HtmlDecoratorPlugin(view))\r\n  ];\r\n}\r\n\r\n/**\r\n * Export HTML decorator types and constants\r\n */\r\nexport { DANGEROUS_TAGS };\r\n\r\n/**\r\n * Add HTML styles to document\r\n */\r\nexport { addHtmlStyles };\r\n\r\n// Also export under the original name for backward compatibility\r\nexport const HTMLTagDecorator = htmlDecorator;\r\n\r\n// Re-export types and utilities\r\nexport * from './types';\r\nexport { buildHtmlDecorations } from './decorations';\r\nexport { detectHtmlRegions, isCursorNearRegion } from './tag-detector'; ","import { Decoration, EditorView, WidgetType } from '@codemirror/view';\r\nimport { SyntaxRule, SyntaxRuleContext } from '../types';\r\nimport { StateEffect } from '@codemirror/state';\r\n\r\nfunction stripBlockquoteMarkers(line: string) {\r\n  // Returns [level, content, markerStart, markerEnd]\r\n  // Allow spaces between '>' markers, e.g., '> > >'\r\n  const match = line.match(/^(\\s*)((?:>\\s*)+)(.*)$/);\r\n  if (!match) return [0, line, 0, 0];\r\n  // Count number of '>' (ignore spaces)\r\n  const level = (match[2].match(/>/g) || []).length;\r\n  const markerStart = 0;\r\n  const markerEnd = match[1].length + match[2].length;\r\n  // Remove all '>' and spaces from the start\r\n  const content = match[3].replace(/^\\s*/, '');\r\n  return [level, content, markerStart, markerEnd];\r\n}\r\n\r\nclass BlockquoteWidget extends WidgetType {\r\n  constructor(readonly content: string, readonly level: number) {\r\n    super();\r\n  }\r\n\r\n  toDOM(view: EditorView): HTMLElement {\r\n    const container = document.createElement('blockquote');\r\n    container.className = 'markdown-blockquote-dim';\r\n    container.style.margin = '0';\r\n    container.style.padding = '0 0 0 1em';\r\n    container.style.borderLeft = `${this.level * 4}px solid #e0d9ce`;\r\n    container.style.background = '#fcfaf7';\r\n    container.style.color = '#6b5c3e';\r\n    container.style.borderRadius = '4px';\r\n    container.style.marginBottom = '0.5em';\r\n    container.textContent = this.content;\r\n    return container;\r\n  }\r\n}\r\n\r\nclass VerticalBarWidget extends WidgetType {\r\n  toDOM() {\r\n    const bar = document.createElement('span');\r\n    bar.className = 'cm-blockquote-bar';\r\n    return bar;\r\n  }\r\n  ignoreEvent() { return true; }\r\n}\r\n\r\nclass EmptyWidget extends WidgetType {\r\n  toDOM() {\r\n    const span = document.createElement('span');\r\n    span.style.display = 'inline-block';\r\n    span.style.width = '1ch';\r\n    span.style.height = '1em';\r\n    span.style.verticalAlign = 'middle';\r\n    return span;\r\n  }\r\n  ignoreEvent() { return true; }\r\n}\r\n\r\nclass BlockquoteBarWidget extends WidgetType {\r\n  constructor(readonly level: number) {\r\n    super();\r\n  }\r\n  toDOM() {\r\n    const span = document.createElement('span');\r\n    for (let i = 0; i < this.level; i++) {\r\n      const bar = document.createElement('span');\r\n      bar.className = 'cm-blockquote-bar';\r\n      span.appendChild(bar);\r\n    }\r\n    return span;\r\n  }\r\n  ignoreEvent() { return true; }\r\n}\r\n\r\nexport class BlockquoteDecorator implements SyntaxRule {\r\n  process(context: SyntaxRuleContext): void {\r\n    const { docText, textSliceFrom, decorations, currentMode, cursorPositions, view } = context;\r\n    if (!decorations) return;\r\n    const lines = docText.split('\\n');\r\n    if (currentMode === 'preview') {\r\n      // Render each blockquote line with uniform bars (no space between bars)\r\n      let charPos = 0;\r\n      for (let i = 0; i < lines.length; i++) {\r\n        const lineText = lines[i];\r\n        const match = lineText.match(/^(\\s*)((?:>\\s*)+)(.*)$/);\r\n        if (match && lineText.length > 0) {\r\n          const markerStr = String(match[2]);\r\n          const barCount = (markerStr.match(/>/g) || []).length;\r\n          const lineStartInDoc = charPos;\r\n          const markerStart = lineStartInDoc + match[1].length;\r\n          // Replace the entire marker region with a widget of bars\r\n          decorations.push({\r\n            from: markerStart,\r\n            to: markerStart + markerStr.length,\r\n            decoration: Decoration.replace({ widget: new BlockquoteBarWidget(barCount) })\r\n          });\r\n        }\r\n        charPos += lineText.length + 1;\r\n      }\r\n    } else {\r\n      // LIVE MODE: For each blockquote line, hide '>' markers, apply nesting class and calculated padding.\r\n      let charPos = 0;\r\n      const lineSpacingEm = 0.8;\r\n      const lineWidthPx = 4;\r\n      const textPaddingEm = 0.4;\r\n\r\n      for (let i = 0; i < lines.length; i++) {\r\n        const lineText = lines[i];\r\n        const match = lineText.match(/^(\\s*)((?:>\\s*)+)(.*)$/);\r\n        if (match && lineText.length > 0) {\r\n          const markerStr = String(match[2]);\r\n          const level = (markerStr.match(/>/g) || []).length;\r\n          const lineStartInDoc = charPos;\r\n          const lineEndInDoc = charPos + lineText.length;\r\n          const isActive = cursorPositions.some(pos => pos >= lineStartInDoc && pos <= lineEndInDoc);\r\n          if (!isActive && level > 0) {\r\n            const markerStart = lineStartInDoc + match[1].length;\r\n            // Render a bar only at the actual positions of '>' in the marker region\r\n            for (let k = 0; k < markerStr.length; k++) {\r\n              if (markerStr[k] === '>') {\r\n                decorations.push({\r\n                  from: markerStart + k,\r\n                  to: markerStart + k + 1,\r\n                  decoration: Decoration.replace({ widget: new VerticalBarWidget() })\r\n                });\r\n              }\r\n            }\r\n          }\r\n        }\r\n        charPos += lineText.length + 1;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Note: For full markdown rendering inside blockquotes, you could use a markdown renderer or recursively apply syntaxRules in the widget. ","import { EditorView, Decoration, DecorationSet, ViewPlugin, ViewUpdate } from '@codemirror/view';\r\nimport { RangeSetBuilder } from '@codemirror/state';\r\n\r\n/**\r\n * ViewPlugin for hiding and styling Markdown syntax in the editor\r\n * Combines functionality from both the TS and JS implementations\r\n */\r\nexport const markdownSyntaxHider = ViewPlugin.fromClass(\r\n  class {\r\n    decorations: DecorationSet;\r\n\r\n    constructor(view: EditorView) {\r\n      this.decorations = this.buildDecorations(view);\r\n    }\r\n\r\n    update(update: ViewUpdate) {\r\n      if (update.docChanged || update.selectionSet) {\r\n        this.decorations = this.buildDecorations(update.view);\r\n      }\r\n    }\r\n\r\n    buildDecorations(view: EditorView): DecorationSet {\r\n      // Use an array to collect and sort decorations\r\n      const decorationsArray: Array<{from: number, to: number, decoration: Decoration}> = [];\r\n      const doc = view.state.doc;\r\n      const fullText = doc.toString();\r\n      \r\n      // Get all cursor positions (support multi-cursor)\r\n      const cursorPositions: number[] = [];\r\n      for (const range of view.state.selection.ranges) {\r\n        cursorPositions.push(range.head);\r\n        // Also include anchor position for text selections\r\n        if (range.head !== range.anchor) {\r\n          cursorPositions.push(range.anchor);\r\n        }\r\n      }\r\n      \r\n      // Find and collect all decorations\r\n      this.findHeadingDecorations(decorationsArray, 0, fullText, cursorPositions);\r\n      this.findBoldDecorations(decorationsArray, 0, fullText, cursorPositions);\r\n      this.findItalicDecorations(decorationsArray, 0, fullText, cursorPositions);\r\n      this.findFormattingDecorations(decorationsArray, 0, fullText, cursorPositions, '~~', '~~', 'markdown-strikethrough-active');\r\n      this.findFormattingDecorations(decorationsArray, 0, fullText, cursorPositions, '==', '==', 'markdown-highlight-active');\r\n      this.findFormattingDecorations(decorationsArray, 0, fullText, cursorPositions, '`', '`', 'markdown-code-active');\r\n      \r\n      // Sort decorations by position\r\n      decorationsArray.sort((a, b) => {\r\n        if (a.from !== b.from) return a.from - b.from;\r\n        return a.to - b.to;\r\n      });\r\n      \r\n      // Add sorted decorations to the builder\r\n      const builder = new RangeSetBuilder<Decoration>();\r\n      for (const {from, to, decoration} of decorationsArray) {\r\n        if (from < to) {\r\n          builder.add(from, to, decoration);\r\n        }\r\n      }\r\n      \r\n      return builder.finish();\r\n    }\r\n    \r\n    // Find heading decorations (# Heading)\r\n    findHeadingDecorations(\r\n      decorations: Array<{from: number, to: number, decoration: Decoration}>, \r\n      start: number, \r\n      text: string, \r\n      cursorPositions: number[]\r\n    ): void {\r\n      const headingRegex = /^(#{1,6})\\s(.*)$/gm;\r\n      let match;\r\n      \r\n      while ((match = headingRegex.exec(text)) !== null) {\r\n        // Skip escaped heading markers\r\n        const matchStart = match.index;\r\n        if (matchStart > 0 && text.charAt(matchStart - 1) === '\\\\') {\r\n          continue;\r\n        }\r\n\r\n        const lineStart = start + matchStart;\r\n        const hashMarks = match[1];\r\n        const hashCount = hashMarks.length;\r\n        \r\n        // Calculate positions\r\n        const hashStart = lineStart;\r\n        const hashEnd = hashStart + hashCount;\r\n        const spaceEnd = hashEnd + 1; // +1 for the space after #\r\n        const lineEnd = lineStart + match[0].length;\r\n        \r\n        // Check if any cursor is near the heading marker\r\n        let isCursorNearHash = false;\r\n        for (const cursor of cursorPositions) {\r\n          if (cursor >= hashStart - 1 && cursor <= spaceEnd + 1) {\r\n            isCursorNearHash = true;\r\n            break;\r\n          }\r\n        }\r\n        \r\n        // Add heading styling to the text content\r\n        decorations.push({\r\n          from: spaceEnd,\r\n          to: lineEnd,\r\n          decoration: Decoration.mark({ class: `markdown-heading-${hashCount}` })\r\n        });\r\n        \r\n        // Add marker decorations\r\n        if (isCursorNearHash) {\r\n          // Show the # symbols when cursor is near\r\n          decorations.push({\r\n            from: hashStart,\r\n            to: hashEnd,\r\n            decoration: Decoration.mark({ class: 'markdown-syntax-active' })\r\n          });\r\n          \r\n          decorations.push({\r\n            from: hashEnd,\r\n            to: spaceEnd,\r\n            decoration: Decoration.mark({ class: 'markdown-syntax-active' })\r\n          });\r\n        } else {\r\n          // Hide the # symbols when cursor is not near\r\n          decorations.push({\r\n            from: hashStart,\r\n            to: hashEnd,\r\n            decoration: Decoration.mark({ class: 'markdown-syntax-dim' })\r\n          });\r\n          \r\n          decorations.push({\r\n            from: hashEnd,\r\n            to: spaceEnd,\r\n            decoration: Decoration.mark({ class: 'markdown-syntax-dim' })\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Find bold text formatting (**bold** or __bold__)\r\n    findBoldDecorations(\r\n      decorations: Array<{from: number, to: number, decoration: Decoration}>, \r\n      start: number, \r\n      text: string, \r\n      cursorPositions: number[]\r\n    ): void {\r\n      // Find **bold** patterns\r\n      const boldPattern = /\\*\\*(.*?)\\*\\*/g;\r\n      const escapeChar = '\\\\';\r\n      \r\n      let match;\r\n      while ((match = boldPattern.exec(text)) !== null) {\r\n        // Skip escaped markers\r\n        const matchStart = match.index;\r\n        if (matchStart > 0 && text.charAt(matchStart - 1) === escapeChar) {\r\n          continue;\r\n        }\r\n        \r\n        const fullMatch = match[0]; // The entire match including ** markers\r\n        const content = match[1];   // Just the content between markers\r\n        \r\n        // Calculate positions\r\n        const fullStart = start + matchStart;\r\n        const fullEnd = fullStart + fullMatch.length;\r\n        \r\n        const openStart = fullStart;\r\n        const openEnd = fullStart + 2; // ** length is 2\r\n        \r\n        const contentStart = openEnd;\r\n        const contentEnd = fullEnd - 2;\r\n        \r\n        const closeStart = contentEnd;\r\n        const closeEnd = fullEnd;\r\n        \r\n        // Check if any cursor is anywhere near this bold text\r\n        let isCursorNearBold = false;\r\n        for (const cursor of cursorPositions) {\r\n          // Consider cursor near if it's close to either marker or inside content\r\n          if (cursor >= openStart - 1 && cursor <= closeEnd + 1) {\r\n            isCursorNearBold = true;\r\n            break;\r\n          }\r\n        }\r\n        \r\n        // Apply bold styling to the content\r\n        decorations.push({\r\n          from: contentStart,\r\n          to: contentEnd,\r\n          decoration: Decoration.mark({ class: 'markdown-bold-active' })\r\n        });\r\n        \r\n        // Always show or hide both markers together\r\n        if (isCursorNearBold) {\r\n          // Show both opening and closing markers\r\n          decorations.push({\r\n            from: openStart,\r\n            to: openEnd,\r\n            decoration: Decoration.mark({ class: 'markdown-syntax-active' })\r\n          });\r\n          decorations.push({\r\n            from: closeStart,\r\n            to: closeEnd,\r\n            decoration: Decoration.mark({ class: 'markdown-syntax-active' })\r\n          });\r\n        } else {\r\n          // Hide both opening and closing markers\r\n          decorations.push({\r\n            from: openStart,\r\n            to: openEnd,\r\n            decoration: Decoration.mark({ class: 'markdown-syntax-dim' })\r\n          });\r\n          decorations.push({\r\n            from: closeStart,\r\n            to: closeEnd,\r\n            decoration: Decoration.mark({ class: 'markdown-syntax-dim' })\r\n          });\r\n        }\r\n      }\r\n      \r\n      // Find __bold__ patterns\r\n      const boldUnderscorePattern = /__(.*?)__/g;\r\n      \r\n      while ((match = boldUnderscorePattern.exec(text)) !== null) {\r\n        // Skip escaped markers\r\n        const matchStart = match.index;\r\n        if (matchStart > 0 && text.charAt(matchStart - 1) === escapeChar) {\r\n          continue;\r\n        }\r\n        \r\n        const fullMatch = match[0];\r\n        const content = match[1];\r\n        \r\n        // Calculate positions\r\n        const fullStart = start + matchStart;\r\n        const fullEnd = fullStart + fullMatch.length;\r\n        \r\n        const openStart = fullStart;\r\n        const openEnd = fullStart + 2; // __ length is 2\r\n        \r\n        const contentStart = openEnd;\r\n        const contentEnd = fullEnd - 2;\r\n        \r\n        const closeStart = contentEnd;\r\n        const closeEnd = fullEnd;\r\n        \r\n        // Check if any cursor is anywhere near this bold text\r\n        let isCursorNearBold = false;\r\n        for (const cursor of cursorPositions) {\r\n          if (cursor >= openStart - 1 && cursor <= closeEnd + 1) {\r\n            isCursorNearBold = true;\r\n            break;\r\n          }\r\n        }\r\n        \r\n        // Apply bold styling to the content\r\n        decorations.push({\r\n          from: contentStart,\r\n          to: contentEnd,\r\n          decoration: Decoration.mark({ class: 'markdown-bold-active' })\r\n        });\r\n        \r\n        // Always show or hide both markers together\r\n        if (isCursorNearBold) {\r\n          // Show both opening and closing markers\r\n          decorations.push({\r\n            from: openStart,\r\n            to: openEnd,\r\n            decoration: Decoration.mark({ class: 'markdown-syntax-active' })\r\n          });\r\n          decorations.push({\r\n            from: closeStart,\r\n            to: closeEnd,\r\n            decoration: Decoration.mark({ class: 'markdown-syntax-active' })\r\n          });\r\n        } else {\r\n          // Hide both opening and closing markers\r\n          decorations.push({\r\n            from: openStart,\r\n            to: openEnd,\r\n            decoration: Decoration.mark({ class: 'markdown-syntax-dim' })\r\n          });\r\n          decorations.push({\r\n            from: closeStart,\r\n            to: closeEnd,\r\n            decoration: Decoration.mark({ class: 'markdown-syntax-dim' })\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Find italic text formatting (*italic* or _italic_)\r\n    findItalicDecorations(\r\n      decorations: Array<{from: number, to: number, decoration: Decoration}>, \r\n      start: number, \r\n      text: string, \r\n      cursorPositions: number[]\r\n    ): void {\r\n      // Find *italic* patterns (making sure they're not part of ** bold **)\r\n      const italicRegex = /(?<!\\*)\\*(?!\\*)([^\\*]+)\\*(?!\\*)/g;\r\n      const escapeChar = '\\\\';\r\n      \r\n      // Keep track of positions we've already processed\r\n      const processedPositions = new Set<number>();\r\n      \r\n      let match;\r\n      while ((match = italicRegex.exec(text)) !== null) {\r\n        // Skip escaped markers\r\n        const matchStart = match.index;\r\n        if (matchStart > 0 && text.charAt(matchStart - 1) === escapeChar) {\r\n          continue;\r\n        }\r\n        \r\n        // Skip if we've already processed this position\r\n        if (processedPositions.has(matchStart)) {\r\n          continue;\r\n        }\r\n        \r\n        // Mark this position as processed\r\n        processedPositions.add(matchStart);\r\n        \r\n        const fullMatch = match[0];\r\n        const content = match[1];\r\n        \r\n        // Calculate positions\r\n        const fullStart = start + matchStart;\r\n        const fullEnd = fullStart + fullMatch.length;\r\n        \r\n        const openStart = fullStart;\r\n        const openEnd = fullStart + 1; // * is 1 char\r\n        \r\n        const contentStart = openEnd;\r\n        const contentEnd = fullEnd - 1;\r\n        \r\n        const closeStart = contentEnd;\r\n        const closeEnd = fullEnd;\r\n        \r\n        // Check if any cursor is near this italic text\r\n        let isCursorNearItalic = false;\r\n        for (const cursor of cursorPositions) {\r\n          if (cursor >= openStart - 1 && cursor <= closeEnd + 1) {\r\n            isCursorNearItalic = true;\r\n            break;\r\n          }\r\n        }\r\n        \r\n        // Apply italic styling to the content\r\n        decorations.push({\r\n          from: contentStart,\r\n          to: contentEnd,\r\n          decoration: Decoration.mark({ class: 'markdown-italic-active' })\r\n        });\r\n        \r\n        // Show or hide markers\r\n        if (isCursorNearItalic) {\r\n          // Show both markers when cursor is inside\r\n          decorations.push({\r\n            from: openStart,\r\n            to: openEnd,\r\n            decoration: Decoration.mark({ class: 'markdown-syntax-active' })\r\n          });\r\n          decorations.push({\r\n            from: closeStart,\r\n            to: closeEnd,\r\n            decoration: Decoration.mark({ class: 'markdown-syntax-active' })\r\n          });\r\n        } else {\r\n          // Hide both markers when cursor is outside\r\n          decorations.push({\r\n            from: openStart,\r\n            to: openEnd,\r\n            decoration: Decoration.mark({ class: 'markdown-syntax-dim' })\r\n          });\r\n          decorations.push({\r\n            from: closeStart,\r\n            to: closeEnd,\r\n            decoration: Decoration.mark({ class: 'markdown-syntax-dim' })\r\n          });\r\n        }\r\n      }\r\n      \r\n      // Find _italic_ patterns\r\n      const italicUnderscoreRegex = /(?<!_)_(?!_)([^_]+)_(?!_)/g;\r\n      \r\n      while ((match = italicUnderscoreRegex.exec(text)) !== null) {\r\n        // Skip escaped markers\r\n        const matchStart = match.index;\r\n        if (matchStart > 0 && text.charAt(matchStart - 1) === escapeChar) {\r\n          continue;\r\n        }\r\n        \r\n        const fullMatch = match[0];\r\n        const content = match[1];\r\n        \r\n        // Calculate positions\r\n        const fullStart = start + matchStart;\r\n        const fullEnd = fullStart + fullMatch.length;\r\n        \r\n        const openStart = fullStart;\r\n        const openEnd = fullStart + 1; // _ is 1 char\r\n        \r\n        const contentStart = openEnd;\r\n        const contentEnd = fullEnd - 1;\r\n        \r\n        const closeStart = contentEnd;\r\n        const closeEnd = fullEnd;\r\n        \r\n        // Check if any cursor is near this italic text\r\n        let isCursorNearItalic = false;\r\n        for (const cursor of cursorPositions) {\r\n          if (cursor >= openStart - 1 && cursor <= closeEnd + 1) {\r\n            isCursorNearItalic = true;\r\n            break;\r\n          }\r\n        }\r\n        \r\n        // Apply italic styling to the content\r\n        decorations.push({\r\n          from: contentStart,\r\n          to: contentEnd,\r\n          decoration: Decoration.mark({ class: 'markdown-italic-active' })\r\n        });\r\n        \r\n        // Show or hide markers\r\n        if (isCursorNearItalic) {\r\n          // Show both markers when cursor is inside\r\n          decorations.push({\r\n            from: openStart,\r\n            to: openEnd,\r\n            decoration: Decoration.mark({ class: 'markdown-syntax-active' })\r\n          });\r\n          decorations.push({\r\n            from: closeStart,\r\n            to: closeEnd,\r\n            decoration: Decoration.mark({ class: 'markdown-syntax-active' })\r\n          });\r\n        } else {\r\n          // Hide both markers when cursor is outside\r\n          decorations.push({\r\n            from: openStart,\r\n            to: openEnd,\r\n            decoration: Decoration.mark({ class: 'markdown-syntax-dim' })\r\n          });\r\n          decorations.push({\r\n            from: closeStart,\r\n            to: closeEnd,\r\n            decoration: Decoration.mark({ class: 'markdown-syntax-dim' })\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Generic method for other formatting types (strikethrough, highlight, code)\r\n    findFormattingDecorations(\r\n      decorations: Array<{from: number, to: number, decoration: Decoration}>,\r\n      start: number,\r\n      text: string,\r\n      cursorPositions: number[],\r\n      openMarker: string,\r\n      closeMarker: string,\r\n      styleClass: string\r\n    ): void {\r\n      const escapeChar = '\\\\'; // Backslash for escaping\r\n      const markerLength = openMarker.length;\r\n\r\n      // Escape special characters for regex\r\n      const openRegexString = this.escapeRegExp(openMarker);\r\n      const closeRegexString = this.escapeRegExp(closeMarker);\r\n      \r\n      // Create the regex pattern\r\n      const pattern = new RegExp(openRegexString + '([\\\\s\\\\S]*?)' + closeRegexString, 'g');\r\n\r\n      let match;\r\n      while ((match = pattern.exec(text)) !== null) {\r\n        const matchStartIndex = match.index;\r\n\r\n        // Check for escaped markers\r\n        if (matchStartIndex > 0 && text.charAt(matchStartIndex - 1) === escapeChar) {\r\n          // Count preceding backslashes to determine if truly escaped\r\n          let backslashCount = 0;\r\n          let currentPos = matchStartIndex - 1;\r\n          while (currentPos >= 0 && text.charAt(currentPos) === escapeChar) {\r\n            backslashCount++;\r\n            currentPos--;\r\n          }\r\n          if (backslashCount % 2 !== 0) { // Odd number means it's escaped\r\n            continue;\r\n          }\r\n        }\r\n\r\n        const fullMatchedText = match[0];\r\n        const contentText = match[1];\r\n\r\n        const absoluteMatchStart = start + matchStartIndex;\r\n        const absoluteMatchEnd = absoluteMatchStart + fullMatchedText.length;\r\n\r\n        const openMarkerStart = absoluteMatchStart;\r\n        const openMarkerEnd = absoluteMatchStart + markerLength;\r\n\r\n        const contentBodyStart = openMarkerEnd;\r\n        const contentBodyEnd = absoluteMatchEnd - markerLength;\r\n\r\n        const closeMarkerStart = contentBodyEnd;\r\n        const closeMarkerEnd = absoluteMatchEnd;\r\n\r\n        // Check if cursor is near\r\n        let isCursorClose = false;\r\n        for (const cursorPos of cursorPositions) {\r\n          // Check if cursor is within or immediately adjacent\r\n          if (cursorPos >= openMarkerStart - 1 && cursorPos <= closeMarkerEnd + 1) {\r\n            isCursorClose = true;\r\n            break;\r\n          }\r\n        }\r\n\r\n        // Apply styling to the content itself if it's not empty\r\n        if (contentText && contentText.length > 0) {\r\n          decorations.push({\r\n            from: contentBodyStart,\r\n            to: contentBodyEnd,\r\n            decoration: Decoration.mark({ class: styleClass })\r\n          });\r\n        }\r\n\r\n        // Determine marker visibility\r\n        const markerVisibilityClass = isCursorClose ? 'markdown-syntax-active' : 'markdown-syntax-dim';\r\n\r\n        // Decorate opening marker\r\n        decorations.push({\r\n          from: openMarkerStart,\r\n          to: openMarkerEnd,\r\n          decoration: Decoration.mark({ class: markerVisibilityClass })\r\n        });\r\n\r\n        // Decorate closing marker\r\n        decorations.push({\r\n          from: closeMarkerStart,\r\n          to: closeMarkerEnd,\r\n          decoration: Decoration.mark({ class: markerVisibilityClass })\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Helper function to escape special regex characters\r\n    escapeRegExp(string: string): string {\r\n      return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n    }\r\n  },\r\n  {\r\n    decorations: (v) => v.decorations,\r\n  }\r\n);\r\n","'use client';\r\n\r\nimport { EditorView } from '@codemirror/view';\r\n\r\n/**\r\n * Insert link formatting\r\n * @param editorView - The CodeMirror editor view\r\n */\r\nexport const insertLink = (editorView: EditorView | null): void => {\r\n  if (!editorView) return;\r\n  \r\n  const selection = editorView.state.selection.main;\r\n  if (selection.empty) {\r\n    // Insert link placeholder\r\n    editorView.dispatch({\r\n      changes: {\r\n        from: selection.from,\r\n        to: selection.to,\r\n        insert: '[link text](url)',\r\n      },\r\n      selection: { anchor: selection.from + 1, head: selection.from + 10 },\r\n    });\r\n  } else {\r\n    // Make selected text the link text\r\n    const selectedText = editorView.state.sliceDoc(selection.from, selection.to);\r\n    editorView.dispatch({\r\n      changes: {\r\n        from: selection.from,\r\n        to: selection.to,\r\n        insert: `[${selectedText}](url)`,\r\n      },\r\n      selection: { anchor: selection.to + 2, head: selection.to + 5 },\r\n    });\r\n  }\r\n  editorView.focus();\r\n};\r\n\r\n/**\r\n * Insert list formatting\r\n * @param editorView - The CodeMirror editor view\r\n * @param ordered - Whether to create an ordered (numbered) list\r\n */\r\nexport const insertList = (editorView: EditorView | null, ordered: boolean): void => {\r\n  if (!editorView) return;\r\n  \r\n  const selection = editorView.state.selection.main;\r\n  const line = editorView.state.doc.lineAt(selection.from);\r\n  const prefix = ordered ? '1. ' : '- ';\r\n  \r\n  // Check if line already has a list marker\r\n  const lineText = editorView.state.sliceDoc(line.from, line.to);\r\n  const listMatch = lineText.match(/^([-*+]|\\d+\\.)\\s/);\r\n  \r\n  if (!listMatch) {\r\n    // Add list marker\r\n    editorView.dispatch({\r\n      changes: {\r\n        from: line.from,\r\n        to: line.from,\r\n        insert: prefix,\r\n      },\r\n    });\r\n  }\r\n  editorView.focus();\r\n};\r\n\r\n/**\r\n * Checks if a line is a list item\r\n * @param lineText - The text of the line to check\r\n * @returns Whether the line is a list item\r\n */\r\nexport const isListItem = (lineText: string): boolean => {\r\n  return /^\\s*([-*+]|\\d+\\.)\\s/.test(lineText);\r\n}; ","'use client';\r\n\r\nimport { EditorView } from '@codemirror/view';\r\nimport { EditorSelection } from '@codemirror/state';\r\nimport { isListItem } from './linkAndListFormatting';\r\n\r\n/**\r\n * Non-breaking space character used for indentation\r\n */\r\nexport const NBSP = '\\u00A0';\r\n\r\n/**\r\n * Standard indentation unit (4 spaces)\r\n */\r\nexport const INDENT_UNIT = '    '; // Exactly 4 spaces\r\n\r\n/**\r\n * Helper function to check if a line is a blockquote\r\n * @param lineText - The text of the line to check\r\n * @returns Whether the line contains a blockquote marker\r\n */\r\nexport const isBlockquote = (lineText: string): boolean => {\r\n  // Look for '>' character with optional leading spaces\r\n  return /^\\s*>/.test(lineText);\r\n};\r\n\r\n/**\r\n * Helper to indent lists and blockquotes\r\n * @param editorView - The CodeMirror editor view\r\n * @param line - The line object\r\n * @returns Whether an indentation was performed\r\n */\r\nconst indentListOrBlockquote = (editorView: EditorView, line: {from: number, to: number, text: string}): boolean => {\r\n  // For list items, we prepend 4 spaces to increase indentation level\r\n  if (isListItem(line.text)) {\r\n    // Add indentation at the start of the line - ensure it's exactly 4 spaces\r\n    editorView.dispatch({\r\n      changes: {\r\n        from: line.from,\r\n        to: line.from,\r\n        insert: INDENT_UNIT // Exactly four spaces for lists\r\n      },\r\n      userEvent: 'indent'\r\n    });\r\n    \r\n    console.log('List indent applied: 4 spaces added');\r\n    return true;\r\n  }\r\n  \r\n  // For blockquotes, we add another '> ' marker to increase depth\r\n  if (isBlockquote(line.text)) {\r\n    // Create a proper blockquote marker\r\n    const blockquotePrefix = '> ';\r\n    \r\n    // Find the leading spaces and blockquote markers\r\n    const blockquoteMatch = line.text.match(/^(\\s*)((?:>\\s*)+)(.*)/);\r\n    if (blockquoteMatch) {\r\n      const leadingSpaces = blockquoteMatch[1] || '';\r\n\r\n      // Add the marker at the beginning of the existing blockquote markers\r\n      editorView.dispatch({\r\n        changes: {\r\n          from: line.from + leadingSpaces.length,\r\n          to: line.from + leadingSpaces.length,\r\n          insert: blockquotePrefix\r\n        },\r\n        userEvent: 'indent'\r\n      });\r\n      \r\n      console.log('Blockquote indent applied: > marker added');\r\n      return true;\r\n    } else {\r\n      // If the regex didn't match but isBlockquote returned true, use simpler approach\r\n      const simpleMatch = line.text.match(/^(\\s*)>(.*)/);\r\n      if (simpleMatch) {\r\n        const leadingSpaces = simpleMatch[1] || '';\r\n        \r\n        editorView.dispatch({\r\n          changes: {\r\n            from: line.from + leadingSpaces.length, \r\n            to: line.from + leadingSpaces.length,\r\n            insert: blockquotePrefix\r\n          },\r\n          userEvent: 'indent'\r\n        });\r\n        \r\n        console.log('Simple blockquote indent applied');\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n  \r\n  return false;\r\n};\r\n\r\n/**\r\n * Helper to unindent lists and blockquotes\r\n * @param editorView - The CodeMirror editor view\r\n * @param line - The line object\r\n * @returns Whether an unindentation was performed\r\n */\r\nconst unindentListOrBlockquote = (editorView: EditorView, line: {from: number, to: number, text: string}): boolean => {\r\n  // For list items with leading spaces, remove exactly 4 spaces\r\n  if (isListItem(line.text)) {\r\n    const match = line.text.match(/^(\\s*)/);\r\n    if (!match) return false;\r\n    \r\n    // Always remove exactly 4 spaces for consistency\r\n    const spacesToRemove = Math.min(4, match[1].length);\r\n    if (spacesToRemove > 0) {\r\n      editorView.dispatch({\r\n        changes: {\r\n          from: line.from,\r\n          to: line.from + spacesToRemove,\r\n          insert: ''\r\n        },\r\n        userEvent: 'unindent'\r\n      });\r\n      console.log(`List unindent applied: ${spacesToRemove} spaces removed`);\r\n      return true;\r\n    }\r\n  }\r\n  \r\n  // For blockquotes, remove one level of '> ' markers\r\n  if (isBlockquote(line.text)) {\r\n    // Find if there's more than one level of blockquote\r\n    const blockquoteMatch = line.text.match(/^(\\s*)((?:>\\s*)+)(.*)/);\r\n    if (blockquoteMatch) {\r\n      const leadingSpaces = blockquoteMatch[1] || '';\r\n      const blockquoteMarkers = blockquoteMatch[2];\r\n      \r\n      // Find position of first '>' marker\r\n      const firstMarkerPos = line.from + leadingSpaces.length;\r\n      \r\n      // Find the first '> ' to remove (first two characters)\r\n      editorView.dispatch({\r\n        changes: {\r\n          from: firstMarkerPos,\r\n          to: firstMarkerPos + 2, // Remove '> '\r\n          insert: ''\r\n        },\r\n        userEvent: 'unindent'\r\n      });\r\n      console.log('Blockquote unindent applied: > marker removed');\r\n      return true;\r\n    } else {\r\n      // Fallback for simpler cases - remove the first blockquote marker only\r\n      const match = line.text.match(/^(\\s*)>/);\r\n      if (match) {\r\n        const leadingSpaces = match[1] || '';\r\n        const removePos = line.from + leadingSpaces.length;\r\n        \r\n        // Remove just the '>' character and one space after it if it exists\r\n        const hasSpaceAfter = line.text.charAt(leadingSpaces.length + 1) === ' ';\r\n        const removeLength = hasSpaceAfter ? 2 : 1; // '> ' or just '>'\r\n        \r\n        editorView.dispatch({\r\n          changes: {\r\n            from: removePos,\r\n            to: removePos + removeLength,\r\n            insert: ''\r\n          },\r\n          userEvent: 'unindent'\r\n        });\r\n        console.log('Simple blockquote unindent applied');\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n  \r\n  return false;\r\n};\r\n\r\n/**\r\n * Indent text using non-breaking spaces\r\n * @param editorView - The CodeMirror editor view\r\n * @returns Whether the action was performed\r\n */\r\nexport const indentText = (editorView: EditorView | null): boolean => {\r\n  if (!editorView) return false;\r\n\r\n  const { state } = editorView;\r\n  let actionPerformed = false;\r\n  \r\n  try {\r\n    // First check if we're dealing with list items or blockquotes in the current selection\r\n    const selection = state.selection.main;\r\n    const firstLine = state.doc.lineAt(selection.from);\r\n    const lastLine = state.doc.lineAt(selection.to);\r\n    \r\n    // For single line selection, try to indent list or blockquote first\r\n    if (firstLine.number === lastLine.number && \r\n        (isListItem(firstLine.text) || isBlockquote(firstLine.text))) {\r\n      if (indentListOrBlockquote(editorView, firstLine)) {\r\n        return true;\r\n      }\r\n    }\r\n    // For multi-line selection, check each line for list items or blockquotes\r\n    else if (firstLine.number !== lastLine.number) {\r\n      let anyIndented = false;\r\n      for (let i = firstLine.number; i <= lastLine.number; i++) {\r\n        const line = state.doc.line(i);\r\n        if (isListItem(line.text) || isBlockquote(line.text)) {\r\n          if (indentListOrBlockquote(editorView, line)) {\r\n            anyIndented = true;\r\n          }\r\n        }\r\n      }\r\n      if (anyIndented) {\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    // If we get here, proceed with normal indentation for non-list, non-blockquote text\r\n    const changes = state.changeByRange(range => {\r\n      // Default return value in case no changes are made\r\n      const defaultReturn = { \r\n        range: EditorSelection.range(range.anchor, range.head),\r\n        changes: []\r\n      };\r\n      \r\n      const firstLine = state.doc.lineAt(range.from);\r\n      const lastLine = state.doc.lineAt(range.to);\r\n      const newChanges = [];\r\n\r\n      let originalAnchor = range.anchor;\r\n      let originalHead = range.head;\r\n      let newAnchor = originalAnchor;\r\n      let newHead = originalHead;\r\n      \r\n      let cumulativeCharsAddedBeforeAnchor = 0;\r\n      let cumulativeCharsAddedBeforeHead = 0;\r\n\r\n      for (let i = firstLine.number; i <= lastLine.number; i++) {\r\n        const line = state.doc.line(i);\r\n        \r\n        // Skip list items and blockquotes which we handled above\r\n        if (isListItem(line.text) || isBlockquote(line.text)) {\r\n          continue;\r\n        }\r\n        \r\n        // Allow indenting empty lines in certain cases\r\n        if (line.length === 0) {\r\n          if (i === firstLine.number && firstLine.number === lastLine.number) {\r\n            // Allow indenting a single empty line\r\n          } else {\r\n            // Skip empty lines in multi-line selection\r\n            continue;\r\n          }\r\n        }\r\n        \r\n        newChanges.push({ from: line.from, insert: INDENT_UNIT });\r\n        actionPerformed = true;\r\n\r\n        // Adjust selection:\r\n        if (line.from <= originalAnchor) {\r\n          cumulativeCharsAddedBeforeAnchor += INDENT_UNIT.length;\r\n        }\r\n        if (line.from <= originalHead) {\r\n          cumulativeCharsAddedBeforeHead += INDENT_UNIT.length;\r\n        }\r\n      }\r\n      \r\n      if (!actionPerformed || newChanges.length === 0) {\r\n        return defaultReturn;\r\n      }\r\n\r\n      newAnchor = originalAnchor + cumulativeCharsAddedBeforeAnchor;\r\n      newHead = originalHead + cumulativeCharsAddedBeforeHead;\r\n\r\n      return {\r\n        changes: newChanges,\r\n        range: EditorSelection.range(newAnchor, newHead)\r\n      };\r\n    });\r\n    \r\n    if (actionPerformed && changes && !changes.changes.empty) {\r\n      editorView.dispatch({\r\n        changes: changes.changes,\r\n        selection: changes.selection,\r\n        userEvent: 'indent'\r\n      });\r\n      editorView.focus();\r\n      return true;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error in indentText:\", error);\r\n  }\r\n  \r\n  editorView.focus();\r\n  return false;\r\n};\r\n\r\n/**\r\n * Unindent text by removing leading non-breaking spaces\r\n * @param editorView - The CodeMirror editor view\r\n * @returns Whether the action was performed\r\n */\r\nexport const unindentText = (editorView: EditorView | null): boolean => {\r\n  if (!editorView) return false;\r\n\r\n  const { state } = editorView;\r\n  let actionPerformed = false;\r\n  \r\n  try {\r\n    // First check if we're dealing with list items or blockquotes in the current selection\r\n    const selection = state.selection.main;\r\n    const firstLine = state.doc.lineAt(selection.from);\r\n    const lastLine = state.doc.lineAt(selection.to);\r\n    \r\n    // For single line selection, try to unindent list or blockquote first\r\n    if (firstLine.number === lastLine.number && \r\n        (isListItem(firstLine.text) || isBlockquote(firstLine.text))) {\r\n      if (unindentListOrBlockquote(editorView, firstLine)) {\r\n        return true;\r\n      }\r\n    }\r\n    // For multi-line selection, check each line for list items or blockquotes\r\n    else if (firstLine.number !== lastLine.number) {\r\n      let anyUnindented = false;\r\n      for (let i = firstLine.number; i <= lastLine.number; i++) {\r\n        const line = state.doc.line(i);\r\n        if (isListItem(line.text) || isBlockquote(line.text)) {\r\n          if (unindentListOrBlockquote(editorView, line)) {\r\n            anyUnindented = true;\r\n          }\r\n        }\r\n      }\r\n      if (anyUnindented) {\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    // If we get here, proceed with normal unindentation for non-list, non-blockquote text\r\n    const changes = state.changeByRange(range => {\r\n      // Default return value in case no changes are made\r\n      const defaultReturn = { \r\n        range: EditorSelection.range(range.anchor, range.head),\r\n        changes: []\r\n      };\r\n      \r\n      const firstLine = state.doc.lineAt(range.from);\r\n      const lastLine = state.doc.lineAt(range.to);\r\n      const newChanges = [];\r\n\r\n      let originalAnchor = range.anchor;\r\n      let originalHead = range.head;\r\n      let newAnchor = originalAnchor;\r\n      let newHead = originalHead;\r\n\r\n      let cumulativeCharsRemovedBeforeAnchor = 0;\r\n      let cumulativeCharsRemovedBeforeHead = 0;\r\n\r\n      for (let i = firstLine.number; i <= lastLine.number; i++) {\r\n        const line = state.doc.line(i);\r\n        if (isListItem(line.text) || isBlockquote(line.text)) {\r\n          continue;\r\n        }\r\n        \r\n        // Skip empty lines\r\n        if (line.length === 0) {\r\n          continue;\r\n        }\r\n\r\n        // Handle both NBSP and regular spaces\r\n        let removedOnThisLine = 0;\r\n        \r\n        // Check for NBSP indentation first\r\n        if (line.text.startsWith(INDENT_UNIT)) {\r\n          removedOnThisLine = INDENT_UNIT.length;\r\n          newChanges.push({ from: line.from, to: line.from + removedOnThisLine, insert: '' });\r\n          actionPerformed = true;\r\n        }\r\n        // Try regular spaces (4 spaces)\r\n        else if (line.text.startsWith('    ')) {\r\n          removedOnThisLine = 4;\r\n          newChanges.push({ from: line.from, to: line.from + removedOnThisLine, insert: '' });\r\n          actionPerformed = true;\r\n        }\r\n        // Check for any leading spaces or NBSP characters\r\n        else {\r\n          let j = 0;\r\n          while (j < line.text.length && (line.text[j] === ' ' || line.text[j] === NBSP)) {\r\n            j++;\r\n          }\r\n          \r\n          if (j > 0) {\r\n            removedOnThisLine = j;\r\n            newChanges.push({ from: line.from, to: line.from + removedOnThisLine, insert: '' });\r\n            actionPerformed = true;\r\n          }\r\n        }\r\n\r\n        if (removedOnThisLine > 0) {\r\n          // Adjust selection positions based on what's removed\r\n          if (line.from < originalAnchor) {\r\n            cumulativeCharsRemovedBeforeAnchor += Math.min(removedOnThisLine, originalAnchor - line.from);\r\n          }\r\n          \r\n          if (line.from < originalHead) {\r\n            cumulativeCharsRemovedBeforeHead += Math.min(removedOnThisLine, originalHead - line.from);\r\n          }\r\n        }\r\n      }\r\n      \r\n      if (!actionPerformed || newChanges.length === 0) {\r\n        return defaultReturn;\r\n      }\r\n\r\n      newAnchor = Math.max(0, originalAnchor - cumulativeCharsRemovedBeforeAnchor);\r\n      newHead = Math.max(0, originalHead - cumulativeCharsRemovedBeforeHead);\r\n\r\n      // Ensure anchor and head don't cross if they were originally ordered\r\n      if (originalAnchor <= originalHead && newAnchor > newHead) newHead = newAnchor;\r\n      if (originalAnchor >= originalHead && newAnchor < newHead) newAnchor = newHead;\r\n\r\n      return {\r\n        changes: newChanges,\r\n        range: EditorSelection.range(newAnchor, newHead)\r\n      };\r\n    });\r\n\r\n    if (actionPerformed && changes && !changes.changes.empty) {\r\n      editorView.dispatch({\r\n          changes: changes.changes,\r\n          selection: changes.selection,\r\n          userEvent: 'unindent'\r\n      });\r\n      editorView.focus();\r\n      return true;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error in unindentText:\", error);\r\n  }\r\n  \r\n  editorView.focus();\r\n  return false;\r\n}; ","'use client';\r\n\r\nimport { ViewPlugin, ViewUpdate, Decoration, EditorView as CMEditorView } from '@codemirror/view';\r\nimport { RangeSet, RangeSetBuilder } from '@codemirror/state';\r\nimport { Extension } from '@codemirror/state';\r\nimport { isListItem } from '../utils/formatting/linkAndListFormatting';\r\nimport { isBlockquote, INDENT_UNIT } from '../utils/formatting/indentationUtils';\r\n\r\n/**\r\n * Type definition for atomic decoration\r\n */\r\ninterface AtomicDecoration {\r\n  from: number;\r\n  to: number;\r\n  decoration: Decoration;\r\n}\r\n\r\n/**\r\n * Plugin class that handles atomic indentation in the editor.\r\n * This ensures that indentation spaces are treated as a single unit\r\n * for cursor movement and selection purposes.\r\n */\r\nclass AtomicIndentPluginValue {\r\n  /** The set of ranges that should be treated as atomic units */\r\n  atomicRanges: RangeSet<Decoration>;\r\n\r\n  /**\r\n   * Creates a new instance of the atomic indent plugin\r\n   * @param view - The CodeMirror editor view\r\n   */\r\n  constructor(view: CMEditorView) {\r\n    this.atomicRanges = this.buildAtomicRanges(view);\r\n  }\r\n\r\n  /**\r\n   * Updates the atomic ranges when the document or viewport changes\r\n   * @param update - ViewUpdate\r\n   */\r\n  update(update: ViewUpdate) {\r\n    if (update.docChanged || update.viewportChanged) {\r\n      this.atomicRanges = this.buildAtomicRanges(update.view);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Builds the set of atomic ranges based on the current document content\r\n   * @param view - The CodeMirror editor view\r\n   * @returns A RangeSet containing all atomic indent ranges\r\n   */\r\n  buildAtomicRanges(view: CMEditorView): RangeSet<Decoration> {\r\n    // Process each line and collect all decorations\r\n    const allDecorations: AtomicDecoration[] = [];\r\n    \r\n    for (const { from, to } of view.visibleRanges) {\r\n      let pos = from;\r\n      while (pos <= to) {\r\n        const line = view.state.doc.lineAt(pos);\r\n        const lineText = line.text;\r\n        \r\n        // Process regular indentation (groups of 4 spaces)\r\n        this.processSpacesIndentation(lineText, line.from, allDecorations);\r\n        \r\n        // Process list indentation\r\n        if (isListItem(lineText)) {\r\n          this.processListIndentation(lineText, line.from, allDecorations);\r\n        }\r\n        \r\n        // Process blockquote indentation\r\n        if (isBlockquote(lineText)) {\r\n          this.processBlockquoteIndentation(lineText, line.from, allDecorations);\r\n        }\r\n        \r\n        pos = line.to + 1;\r\n      }\r\n    }\r\n    \r\n    // Sort the decorations by from position\r\n    allDecorations.sort((a, b) => a.from - b.from);\r\n    \r\n    // Create the range set\r\n    const builder = new RangeSetBuilder<Decoration>();\r\n    for (const { from, to, decoration } of allDecorations) {\r\n      if (from < to) {  // Ensure valid range\r\n        try {\r\n          builder.add(from, to, decoration);\r\n        } catch (error) {\r\n          console.warn(\"Failed to add atomic decoration:\", from, to, error);\r\n        }\r\n      }\r\n    }\r\n    \r\n    return builder.finish();\r\n  }\r\n  \r\n  /**\r\n   * Process standard space indentation in text\r\n   */\r\n  private processSpacesIndentation(lineText: string, lineStart: number, decorations: AtomicDecoration[]) {\r\n    // Look for groups of exactly 4 spaces\r\n    let searchPos = 0;\r\n    while (searchPos + 4 <= lineText.length) {\r\n      if (lineText.substring(searchPos, searchPos + 4) === INDENT_UNIT) {\r\n        decorations.push({\r\n          from: lineStart + searchPos,\r\n          to: lineStart + searchPos + 4,\r\n          decoration: Decoration.mark({\r\n            class: \"cm-atomic-indent\",\r\n            inclusive: true,\r\n            atomic: true\r\n          })\r\n        });\r\n        searchPos += 4;\r\n      } else {\r\n        searchPos++;\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Process list indentation\r\n   */\r\n  private processListIndentation(lineText: string, lineStart: number, decorations: AtomicDecoration[]) {\r\n    // Handle leading spaces in lists\r\n    const leadingMatch = lineText.match(/^(\\s+)/);\r\n    if (leadingMatch && leadingMatch[1]) {\r\n      const spaces = leadingMatch[1];\r\n      for (let i = 0; i < Math.floor(spaces.length / 4) * 4; i += 4) {\r\n        decorations.push({\r\n          from: lineStart + i,\r\n          to: lineStart + i + 4,\r\n          decoration: Decoration.mark({\r\n            class: \"cm-atomic-indent cm-list-indent\",\r\n            inclusive: true,\r\n            atomic: true\r\n          })\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Handle indentation after list markers\r\n    const markerMatch = lineText.match(/^(\\s*)([-*+]|\\d+\\.)\\s+/);\r\n    if (markerMatch) {\r\n      const afterMarker = lineText.substring(markerMatch[0].length);\r\n      const afterMarkerIndent = afterMarker.match(/^(\\s+)/);\r\n      \r\n      if (afterMarkerIndent && afterMarkerIndent[1]) {\r\n        const indentStart = lineStart + markerMatch[0].length;\r\n        const spaces = afterMarkerIndent[1];\r\n        \r\n        for (let i = 0; i < Math.floor(spaces.length / 4) * 4; i += 4) {\r\n          decorations.push({\r\n            from: indentStart + i,\r\n            to: indentStart + i + 4,\r\n            decoration: Decoration.mark({\r\n              class: \"cm-atomic-indent cm-list-indent\",\r\n              inclusive: true,\r\n              atomic: true\r\n            })\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Process blockquote indentation\r\n   */\r\n  private processBlockquoteIndentation(lineText: string, lineStart: number, decorations: AtomicDecoration[]) {\r\n    // Match blockquote structure: (leading spaces)(blockquote markers)(content)\r\n    const match = lineText.match(/^(\\s*)((?:>\\s*)+)(.*)/);\r\n    if (!match) return;\r\n    \r\n    const leadingSpaces = match[1] || '';\r\n    const blockquoteMarkers = match[2];\r\n    const content = match[3];\r\n    \r\n    // Process leading spaces\r\n    if (leadingSpaces.length > 0) {\r\n      // Handle leading spaces in chunks of 4\r\n      for (let i = 0; i < Math.floor(leadingSpaces.length / 4) * 4; i += 4) {\r\n        decorations.push({\r\n          from: lineStart + i,\r\n          to: lineStart + i + 4,\r\n          decoration: Decoration.mark({\r\n            class: \"cm-atomic-indent\",\r\n            inclusive: true,\r\n            atomic: true\r\n          })\r\n        });\r\n      }\r\n      \r\n      // Handle remaining spaces if any\r\n      const remainingSpaces = leadingSpaces.length % 4;\r\n      if (remainingSpaces > 0) {\r\n        decorations.push({\r\n          from: lineStart + leadingSpaces.length - remainingSpaces,\r\n          to: lineStart + leadingSpaces.length,\r\n          decoration: Decoration.mark({\r\n            class: \"cm-atomic-indent\",\r\n            inclusive: true,\r\n            atomic: true\r\n          })\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Process blockquote markers (each '> ' is treated as an atomic unit)\r\n    let markerStart = lineStart + leadingSpaces.length;\r\n    const markerMatches = blockquoteMarkers.match(/(>\\s*)/g);\r\n    \r\n    if (markerMatches) {\r\n      markerMatches.forEach(marker => {\r\n        decorations.push({\r\n          from: markerStart,\r\n          to: markerStart + marker.length,\r\n          decoration: Decoration.mark({\r\n            class: \"cm-atomic-indent cm-blockquote-indent\",\r\n            inclusive: true,\r\n            atomic: true\r\n          })\r\n        });\r\n        markerStart += marker.length;\r\n      });\r\n    }\r\n    \r\n    // Handle spaces after blockquote markers\r\n    if (content) {\r\n      const contentSpaces = content.match(/^(\\s+)/);\r\n      if (contentSpaces && contentSpaces[1]) {\r\n        const spaces = contentSpaces[1];\r\n        const contentStart = lineStart + leadingSpaces.length + blockquoteMarkers.length;\r\n        \r\n        // Handle content spaces in chunks of 4\r\n        for (let i = 0; i < Math.floor(spaces.length / 4) * 4; i += 4) {\r\n          decorations.push({\r\n            from: contentStart + i,\r\n            to: contentStart + i + 4,\r\n            decoration: Decoration.mark({\r\n              class: \"cm-atomic-indent\",\r\n              inclusive: true,\r\n              atomic: true\r\n            })\r\n          });\r\n        }\r\n        \r\n        // Handle remaining spaces\r\n        const remainingSpaces = spaces.length % 4;\r\n        if (remainingSpaces > 0) {\r\n          decorations.push({\r\n            from: contentStart + spaces.length - remainingSpaces,\r\n            to: contentStart + spaces.length,\r\n            decoration: Decoration.mark({\r\n              class: \"cm-atomic-indent\",\r\n              inclusive: true,\r\n              atomic: true\r\n            })\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * ViewPlugin that creates and manages the atomic indent functionality\r\n */\r\nconst atomicIndentPlugin = ViewPlugin.fromClass(AtomicIndentPluginValue);\r\n\r\n/**\r\n * Facet provider that supplies the atomic ranges to the editor view\r\n */\r\nconst atomicRangesFacetProvider = CMEditorView.atomicRanges.of(view => {\r\n  const pluginValue = view.plugin(atomicIndentPlugin);\r\n  if (pluginValue) {\r\n    return pluginValue.atomicRanges || RangeSet.empty;\r\n  }\r\n  return RangeSet.empty;\r\n});\r\n\r\n/**\r\n * The CSS styles for atomic indents\r\n */\r\nconst atomicIndentsStyle = CMEditorView.baseTheme({\r\n  \".cm-atomic-indent\": {\r\n    caretColor: \"transparent\",\r\n  },\r\n  \".cm-list-indent\": {\r\n    backgroundColor: \"rgba(0, 0, 0, 0.03)\",\r\n  },\r\n  \".cm-blockquote-indent\": {\r\n    backgroundColor: \"rgba(0, 0, 0, 0.03)\",\r\n  }\r\n});\r\n\r\n/**\r\n * Combined extension for atomic indents\r\n */\r\nexport const atomicIndents = [\r\n  atomicIndentPlugin,\r\n  atomicRangesFacetProvider,\r\n  atomicIndentsStyle\r\n];\r\n","/**\n * @fileoverview Markdown syntax extension for CodeMirror\n * @module obsidian-editor/extensions/markdown-syntax\n */\n\nimport { EditorView, Decoration, DecorationSet } from '@codemirror/view';\nimport { RangeSetBuilder, StateField, StateEffect, EditorState, Extension } from '@codemirror/state';\nimport { SyntaxRule, SyntaxRuleContext } from './types';\nimport { HeadingDecorator } from './rules/headingDecorator';\nimport { BoldDecorator } from './rules/boldDecorator';\nimport { ItalicDecorator } from './rules/italicDecorator';\nimport { StrikethroughDecorator } from './rules/strikethroughDecorator';\nimport { CodeDecorator } from './rules/codeDecorator';\nimport { HighlightDecorator } from './rules/highlightDecorator';\nimport { OldBoldDecorator } from './rules/oldBoldDecorator';\nimport { OldItalicDecorator } from './rules/oldItalicDecorator';\nimport { ListDecorator } from './rules/listDecorator';\nimport { FencedCodeBlockDecorator } from './rules/FencedCodeBlockDecorator';\nimport { HorizontalRuleDecorator } from './rules/horizontalRuleDecorator';\nimport { LineBreakDecorator } from './rules/lineBreakDecorator';\nimport { htmlDecorator } from './html-decorator';\nimport { BlockquoteDecorator } from './rules/blockquoteDecorator';\nimport { markdown } from '@codemirror/lang-markdown';\nimport { languages } from '@codemirror/language-data';\nimport { Compartment } from '@codemirror/state';\nimport { syntaxTree } from '@codemirror/language';\nimport { markdownSyntaxHider } from '../MarkdownSyntaxHider';\nimport { atomicIndents } from '../AtomicIndents';\n\n/**\n * Represents a decoration item with its position and decoration object\n */\ninterface DecorationItem {\n  /** Start position of the decoration */\n  from: number;\n  /** End position of the decoration */\n  to: number;\n  /** The decoration object to apply */\n  decoration: Decoration;\n}\n\n/**\n * Array of syntax rules to apply for markdown formatting\n * Each rule handles a specific markdown syntax feature\n */\nconst syntaxRules: SyntaxRule[] = [\n  new HeadingDecorator(),\n  new BoldDecorator(),\n  new ItalicDecorator(),\n  new StrikethroughDecorator(),\n  new CodeDecorator(),\n  new HighlightDecorator(),\n  new OldBoldDecorator(),\n  new OldItalicDecorator(),\n  new ListDecorator(),\n  new BlockquoteDecorator(),\n  new FencedCodeBlockDecorator(),\n  // HorizontalRuleDecorator is now a ViewPlugin and managed separately\n];\n\n/**\n * StateEffect to change the rendering mode between live editing and preview\n * This allows toggling between showing markdown syntax or rendered content\n */\nexport const setMarkdownSyntaxMode = StateEffect.define<'live' | 'preview'>();\n\n/**\n * Helper function to build decorations for legacy syntax rules\n * \n * @param state - The current editor state\n * @param currentMode - The current rendering mode ('live' or 'preview')\n * @param view - Optional editor view, used to determine visible ranges\n * @returns A DecorationSet containing all markdown syntax decorations\n */\nfunction buildLegacyDecorations(state: EditorState, currentMode: 'live' | 'preview', view?: EditorView): DecorationSet {\n  const builder = new RangeSetBuilder<Decoration>();\n  const allDecorations: DecorationItem[] = [];\n\n  // Collect all cursor positions to determine which syntax elements should be highlighted\n  const cursorPositions: number[] = [];\n  for (const range of state.selection.ranges) {\n    cursorPositions.push(range.head);\n  }\n  \n  // Determine which ranges of the document to process\n  const rangesToProcess = view ? view.visibleRanges : [{ from: 0, to: state.doc.length }];\n\n  // Find HTML regions to exclude from markdown processing\n  const htmlRegions = findHtmlRegions(state);\n  \n  // Process each visible range\n  for (const { from, to } of rangesToProcess) {\n    const docTextSlice = state.doc.sliceString(from, to);\n    \n    // Create the context for syntax rules, with information about HTML regions\n    const context: SyntaxRuleContext = {\n      builder,\n      docText: docTextSlice,\n      textSliceFrom: from,\n      cursorPositions,\n      state: state,\n      view: view,\n      decorations: allDecorations,\n      currentMode: currentMode,\n      htmlEditRegions: htmlRegions // Pass HTML regions to avoid processing markdown inside them\n    };\n\n    // Apply each syntax rule\n    for (const rule of syntaxRules) {\n      try {\n        if (typeof rule.process === 'function') {\n          rule.process(context);\n        } else {\n          console.warn(`Rule ${rule.constructor.name} does not have a process method.`);\n        }\n      } catch (error) {\n        console.error('Error processing legacy rule:', rule.constructor.name, error);\n      }\n    }\n  }\n\n  // Add decorations to explicitly mark HTML regions as plain text\n  for (const region of htmlRegions) {\n    allDecorations.push({\n      from: region.from,\n      to: region.to,\n      decoration: Decoration.mark({ \n        class: 'cm-plain-text cm-html-content cm-disable-markdown-parsing cm-no-list-rendering',\n        attributes: { 'data-html-content': 'true', 'data-no-markdown': 'true' }\n      })\n    });\n  }\n\n  // Sort and add decorations to the builder to handle overlaps correctly\n  const groupedDecorations = new Map<number, DecorationItem[]>();\n  for (const item of allDecorations) {\n    // Skip decorations inside HTML unless they are HTML-specific decorations\n    if (!item.decoration.spec.class?.includes('cm-html-content') && \n        isInsideHtml(item.from, item.to, htmlRegions)) {\n      continue;\n    }\n    \n    if (!groupedDecorations.has(item.from)) {\n      groupedDecorations.set(item.from, []);\n    }\n    if (item.decoration) {\n        groupedDecorations.get(item.from)!.push(item);\n    } else {\n        console.warn(\"Encountered an item with undefined decoration during legacy build:\", item);\n    }\n  }\n  \n  // Sort decorations by position and add them to the builder\n  const sortedFromPositions = [...groupedDecorations.keys()].sort((a, b) => a - b);\n  for (const fromPos of sortedFromPositions) {\n    const group = groupedDecorations.get(fromPos)!;\n    group.sort((a, b) => a.to - b.to); // Sort by 'to' within each 'from' group\n    for (const item of group) {\n      builder.add(item.from, item.to, item.decoration);\n    }\n  }\n  \n  return builder.finish();\n}\n\n/**\n * StateField that manages markdown syntax decorations\n * This keeps track of the current mode and decorations,\n * and updates them when necessary\n */\nexport const markdownSyntaxStateField = StateField.define<{\n  /** The current set of decorations */\n  decorations: DecorationSet;\n  /** The current rendering mode */\n  currentMode: 'live' | 'preview';\n}>({\n  /**\n   * Creates the initial state for the field\n   * @param state - The editor state\n   * @returns The initial field value\n   */\n  create(state) {\n    const initialMode = 'live'; \n    return {\n      decorations: buildLegacyDecorations(state, initialMode, undefined),\n      currentMode: initialMode,\n    };\n  },\n\n  /**\n   * Updates the field value based on transactions\n   * @param value - The current field value\n   * @param tr - The transaction to apply\n   * @returns The updated field value\n   */\n  update(value, tr) {\n    let newMode = value.currentMode;\n    let needsRebuild = false;\n\n    // Check for mode change effects\n    for (const effect of tr.effects) {\n      if (effect.is(setMarkdownSyntaxMode)) {\n        newMode = effect.value;\n        needsRebuild = true;\n      }\n    }\n\n    let modeChangedByEffect = false;\n    for (const effect of tr.effects) {\n      if (effect.is(setMarkdownSyntaxMode)) {\n        if (newMode !== effect.value) {\n            newMode = effect.value;\n            modeChangedByEffect = true;\n        }\n      }\n    }\n\n    // Rebuild decorations if document changed, selection changed, or mode changed\n    if (tr.docChanged || \n        (tr.selection && !tr.startState.selection.eq(tr.selection)) || \n        modeChangedByEffect) {\n      return {\n        decorations: buildLegacyDecorations(tr.state, newMode, undefined),\n        currentMode: newMode,\n      };\n    }\n    \n    // If mode changed without other triggers (e.g. initial load with a different mode)\n    if (value.currentMode !== newMode) {\n        return {\n            decorations: buildLegacyDecorations(tr.state, newMode, undefined),\n            currentMode: newMode,\n        };\n    }\n\n    return value; // No change to decorations or mode\n  },\n\n  /**\n   * Provides the decorations to the editor view\n   */\n  provide: f => EditorView.decorations.from(f, value => value.decorations)\n});\n\n/**\n * Compartment for markdown syntax mode\n */\nexport const markdownCompartment = new Compartment();\n\n/**\n * Current markdown syntax mode\n */\nlet currentMode: 'visible' | 'hidden' = 'hidden';\n\n/**\n * Create the markdown syntax extension\n * \n * @param {Object} options - Configuration options\n * @param {boolean} options.highlightHTML - Whether to highlight HTML in markdown\n * @returns {Extension} The markdown syntax extension\n */\nexport function createMarkdownSyntaxPlugin(options: {\n  highlightHTML?: boolean;\n} = {}): Extension {\n  const { highlightHTML = true } = options;\n  \n  // Configure the markdown extension\n  const markdownConfig = {\n    codeLanguages: languages\n  };\n  \n  return [\n    markdownCompartment.of(markdown(markdownConfig)),\n    markdownSyntaxStateField,\n    markdownSyntaxHider,\n    LineBreakDecorator,\n    HorizontalRuleDecorator,\n    htmlDecorator(),\n    atomicIndents,\n  ];\n}\n\n/**\n * Function to toggle markdown syntax visibility\n * \n * @param {EditorView} view - The editor view\n * @param {'visible' | 'hidden'} mode - The syntax mode\n */\nexport function toggleMarkdownSyntaxVisibility(view: EditorView, mode: 'visible' | 'hidden'): void {\n  if (mode === currentMode) return;\n  \n  // Apply mode change via StateEffect\n  view.dispatch({\n    effects: [setMarkdownSyntaxMode.of(mode === 'visible' ? 'live' : 'preview')]\n  });\n  \n  currentMode = mode;\n}\n\n// Find HTML regions to avoid processing markdown inside them\n// This is a simple helper that will be used when building decorations\nfunction findHtmlRegions(state: EditorState): {from: number, to: number}[] {\n  const regions: {from: number, to: number}[] = [];\n  const tree = syntaxTree(state);\n  \n  tree.iterate({\n    enter: (node) => {\n      if (node.name.includes('HtmlTag') || \n          node.name.includes('HtmlBlock') || \n          node.name.includes('OpenTag') || \n          node.name.includes('CloseTag') || \n          node.name.includes('SelfClosingTag') ||\n          node.name.includes('Element')) {\n        regions.push({from: node.from, to: node.to});\n      }\n    }\n  });\n  \n  return regions;\n}\n\n// Helper to check if a region is inside any HTML region\nfunction isInsideHtml(from: number, to: number, htmlRegions: {from: number, to: number}[]): boolean {\n  for (const region of htmlRegions) {\n    if (from >= region.from && to <= region.to) {\n      return true;\n    }\n  }\n  return false;\n}\n\n","/**\r\n * @fileoverview Markdown editing utilities\r\n * @module obsidian-editor/extensions/markdown\r\n */\r\n\r\nimport { EditorView } from '@codemirror/view';\r\nimport { EditorSelection } from '@codemirror/state';\r\n\r\n/**\r\n * Toggle markdown formatting around selected text\r\n * \r\n * @param {EditorView} view - The editor view\r\n * @param {string} openMark - The opening markdown syntax (e.g. \"**\")\r\n * @param {string} closeMark - The closing markdown syntax (e.g. \"**\")\r\n * @param {boolean} keepSelection - Whether to keep the selection after toggling\r\n * @returns {boolean} Whether the operation was successful\r\n */\r\nexport function toggleMark(\r\n  view: EditorView,\r\n  openMark: string,\r\n  closeMark: string,\r\n  keepSelection: boolean = false\r\n): boolean {\r\n  const { state } = view;\r\n  const selection = state.selection;\r\n  \r\n  if (selection.ranges.length === 0) return false;\r\n  \r\n  // Store all changes to be applied\r\n  const changes = [];\r\n  const newSelections = [];\r\n  \r\n  for (const range of selection.ranges) {\r\n    if (range.empty) {\r\n      // If no text is selected, insert marks and place cursor between them\r\n      changes.push({\r\n        from: range.from,\r\n        to: range.from,\r\n        insert: openMark + closeMark\r\n      });\r\n      \r\n      const newCursor = range.from + openMark.length;\r\n      newSelections.push(EditorSelection.cursor(newCursor));\r\n    } else {\r\n      const selectedText = state.doc.sliceString(range.from, range.to);\r\n      \r\n      // Check if the selection already has the marks\r\n      const hasMarks = selectedText.startsWith(openMark) && \r\n                      selectedText.endsWith(closeMark) &&\r\n                      selectedText.length >= openMark.length + closeMark.length;\r\n      \r\n      if (hasMarks) {\r\n        // Remove marks\r\n        const innerFrom = range.from + openMark.length;\r\n        const innerTo = range.to - closeMark.length;\r\n        const innerText = state.doc.sliceString(innerFrom, innerTo);\r\n        \r\n        changes.push({\r\n          from: range.from,\r\n          to: range.to,\r\n          insert: innerText\r\n        });\r\n        \r\n        if (keepSelection) {\r\n          newSelections.push(EditorSelection.range(range.from, range.from + innerText.length));\r\n        } else {\r\n          newSelections.push(EditorSelection.cursor(range.from + innerText.length));\r\n        }\r\n      } else {\r\n        // Add marks\r\n        changes.push({\r\n          from: range.from,\r\n          to: range.to,\r\n          insert: openMark + selectedText + closeMark\r\n        });\r\n        \r\n        if (keepSelection) {\r\n          const newFrom = range.from + openMark.length;\r\n          const newTo = newFrom + selectedText.length;\r\n          newSelections.push(EditorSelection.range(newFrom, newTo));\r\n        } else {\r\n          const cursorPos = range.from + openMark.length + selectedText.length + closeMark.length;\r\n          newSelections.push(EditorSelection.cursor(cursorPos));\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Apply all changes at once\r\n  view.dispatch({\r\n    changes,\r\n    selection: EditorSelection.create(newSelections)\r\n  });\r\n  \r\n  return true;\r\n} ","/**\r\n * @fileoverview Keyboard shortcuts and key mappings for the editor\r\n * @module obsidian-editor/extensions/keymaps\r\n */\r\n\r\nimport { keymap } from '@codemirror/view';\r\nimport { EditorSelection } from '@codemirror/state';\r\nimport { toggleMark } from './markdown';\r\n\r\n/**\r\n * Keyboard mapping for markdown formatting shortcuts\r\n */\r\nexport const markdownKeymap = keymap.of([\r\n  // Bold: Ctrl+B\r\n  {\r\n    key: 'Ctrl-b',\r\n    run: (view) => {\r\n      return toggleMark(view, '**', '**');\r\n    }\r\n  },\r\n  // Italic: Ctrl+I\r\n  {\r\n    key: 'Ctrl-i',\r\n    run: (view) => {\r\n      return toggleMark(view, '*', '*');\r\n    }\r\n  },\r\n  // Strikethrough: Ctrl+Shift+S\r\n  {\r\n    key: 'Ctrl-Shift-s',\r\n    run: (view) => {\r\n      return toggleMark(view, '~~', '~~');\r\n    }\r\n  },\r\n  // Code: Ctrl+Shift+C\r\n  {\r\n    key: 'Ctrl-Shift-c',\r\n    run: (view) => {\r\n      return toggleMark(view, '`', '`');\r\n    }\r\n  },\r\n  // Link: Ctrl+K\r\n  {\r\n    key: 'Ctrl-k',\r\n    run: (view) => {\r\n      const selection = view.state.selection;\r\n      if (selection.ranges.length === 1 && selection.main.empty) {\r\n        // No selection, insert a template link\r\n        const transaction = view.state.update({\r\n          changes: {\r\n            from: selection.main.from,\r\n            to: selection.main.from,\r\n            insert: '[]()'\r\n          },\r\n          selection: EditorSelection.cursor(selection.main.from + 1)\r\n        });\r\n        view.dispatch(transaction);\r\n        return true;\r\n      } else {\r\n        // With selection, wrap it in link syntax\r\n        return toggleMark(view, '[', ']()', true);\r\n      }\r\n    }\r\n  }\r\n]);\r\n\r\n/**\r\n * Define additional editor keymaps\r\n */\r\nexport const editorKeymap = keymap.of([\r\n  // Save: Ctrl+S\r\n  {\r\n    key: 'Ctrl-s',\r\n    run: (view) => {\r\n      // Trigger a custom event that can be caught by the editor component\r\n      const event = new CustomEvent('editor-save', {\r\n        bubbles: true,\r\n        detail: { content: view.state.doc.toString() }\r\n      });\r\n      view.dom.dispatchEvent(event);\r\n      return true;\r\n    },\r\n    preventDefault: true\r\n  }\r\n]);\r\n\r\n/**\r\n * Combined keymap for all editor shortcuts\r\n */\r\nexport const combinedKeymap = [\r\n  markdownKeymap,\r\n  editorKeymap\r\n];\r\n\r\nexport default combinedKeymap; ","/**\n * @fileoverview Extension to prevent markdown formatting inside HTML blocks\n * @module obsidian-editor/extensions/markdown/no-formatting\n */\n\nimport { EditorView, ViewPlugin, Decoration, DecorationSet } from '@codemirror/view';\nimport { syntaxTree } from '@codemirror/language';\nimport { RangeSetBuilder, Extension } from '@codemirror/state';\n\n/**\n * Creates an extension that prevents markdown formatting inside HTML blocks\n * This helps to maintain proper separation between HTML and markdown content\n * \n * @returns An Extension that prevents markdown processing in HTML blocks\n */\nexport function createNoMarkdownInHtmlExtension(): Extension {\n  return ViewPlugin.fromClass(class {\n    decorations: DecorationSet;\n    \n    constructor(view: EditorView) {\n      this.decorations = this.buildDecorations(view);\n    }\n    \n    update(update: any) {\n      if (update.docChanged || update.viewportChanged) {\n        this.decorations = this.buildDecorations(update.view);\n      }\n    }\n    \n    buildDecorations(view: EditorView) {\n      const builder = new RangeSetBuilder<Decoration>();\n      \n      // Find HTML blocks in the document\n      for (const { from, to } of view.visibleRanges) {\n        const tree = syntaxTree(view.state);\n        \n        tree.iterate({\n          from,\n          to,\n          enter: (node) => {\n            // Check if this is an HTML node\n            if (node.name.includes('HtmlBlock') || \n                node.type.name.includes('HtmlTag') ||\n                node.type.name.includes('Element')) {\n              \n              // Add decoration to prevent markdown processing\n              builder.add(\n                node.from, \n                node.to, \n                Decoration.mark({\n                  class: 'cm-no-markdown-formatting',\n                  attributes: { 'data-no-markdown': 'true' }\n                })\n              );\n            }\n          }\n        });\n      }\n      \n      return builder.finish();\n    }\n  }, {\n    decorations: v => v.decorations\n  });\n} ","import { Extension } from '@codemirror/state';\r\nimport { createMarkdownSyntaxPlugin } from './markdown-syntax';\r\nimport combinedKeymap from './keymaps';\r\nimport { createNoMarkdownInHtmlExtension } from './markdown/no-formatting';\r\nimport { atomicIndents } from './AtomicIndents';\r\nimport { markdownSyntaxHider } from './MarkdownSyntaxHider';\r\nimport { LineBreakDecorator } from './markdown-syntax/rules/lineBreakDecorator';\r\nimport { htmlDecorator } from './markdown-syntax/html-decorator';\r\n\r\n/**\r\n * Create all the extensions needed for the Obsidian-like editor\r\n * @returns An array of extensions\r\n */\r\nexport function createAllExtensions(): Extension[] {\r\n  return [\r\n    createMarkdownSyntaxPlugin(),\r\n    combinedKeymap,\r\n    createNoMarkdownInHtmlExtension(), // Add the no-markdown-in-html extension\r\n    atomicIndents, // Make indentation atomic (tab movement)\r\n    markdownSyntaxHider, // Hide markdown syntax when not in focus\r\n    LineBreakDecorator, // Handle markdown line breaks\r\n    htmlDecorator(), // Render HTML in markdown\r\n  ];\r\n} ","import { EditorSelection } from '@codemirror/state';\r\n\r\n/**\r\n * Change type representing a text change in the editor.\r\n * @interface TextChange\r\n */\r\ninterface TextChange {\r\n  from: number;\r\n  to: number;\r\n  insert: string;\r\n}\r\n\r\n/**\r\n * Result of a formatting operation.\r\n * @interface FormattingResult\r\n */\r\ninterface FormattingResult {\r\n  changes: TextChange[];\r\n  selection?: EditorSelection;\r\n}\r\n\r\n/**\r\n * Toggle bold formatting for the selected text\r\n * \r\n * @param selection - The current editor selection\r\n * @param doc - The document text\r\n * @returns Changes to apply to the document\r\n */\r\nexport function toggleBold(selection: EditorSelection, doc: string) {\r\n  const changes = [];\r\n  const newSelections = [];\r\n  \r\n  for (const range of selection.ranges) {\r\n    // Skip empty selections\r\n    if (range.empty) {\r\n      const from = range.from;\r\n      changes.push({ from, to: from, insert: '**Bold text**' });\r\n      newSelections.push(EditorSelection.range(from + 2, from + 10));\r\n      continue;\r\n    }\r\n    \r\n    const text = doc.slice(range.from, range.to);\r\n    const isBold = text.startsWith('**') && text.endsWith('**');\r\n    \r\n    if (isBold) {\r\n      // Remove bold formatting\r\n      const innerText = text.slice(2, -2);\r\n      changes.push({ from: range.from, to: range.to, insert: innerText });\r\n      newSelections.push(EditorSelection.range(range.from, range.from + innerText.length));\r\n    } else {\r\n      // Add bold formatting\r\n      changes.push({ from: range.from, to: range.to, insert: `**${text}**` });\r\n      newSelections.push(EditorSelection.range(range.from, range.to + 4));\r\n    }\r\n  }\r\n  \r\n  return {\r\n    changes,\r\n    selection: EditorSelection.create(newSelections)\r\n  };\r\n}\r\n\r\n/**\r\n * Toggle italic formatting for the selected text\r\n * \r\n * @param selection - The current editor selection\r\n * @param doc - The document text\r\n * @returns Changes to apply to the document\r\n */\r\nexport function toggleItalic(selection: EditorSelection, doc: string) {\r\n  const changes = [];\r\n  const newSelections = [];\r\n  \r\n  for (const range of selection.ranges) {\r\n    // Skip empty selections\r\n    if (range.empty) {\r\n      const from = range.from;\r\n      changes.push({ from, to: from, insert: '*Italic text*' });\r\n      newSelections.push(EditorSelection.range(from + 1, from + 12));\r\n      continue;\r\n    }\r\n    \r\n    const text = doc.slice(range.from, range.to);\r\n    const isItalic = text.startsWith('*') && text.endsWith('*') && !text.startsWith('**');\r\n    \r\n    if (isItalic) {\r\n      // Remove italic formatting\r\n      const innerText = text.slice(1, -1);\r\n      changes.push({ from: range.from, to: range.to, insert: innerText });\r\n      newSelections.push(EditorSelection.range(range.from, range.from + innerText.length));\r\n    } else {\r\n      // Add italic formatting\r\n      changes.push({ from: range.from, to: range.to, insert: `*${text}*` });\r\n      newSelections.push(EditorSelection.range(range.from, range.to + 2));\r\n    }\r\n  }\r\n  \r\n  return {\r\n    changes,\r\n    selection: EditorSelection.create(newSelections)\r\n  };\r\n}\r\n\r\n/**\r\n * Toggle heading formatting for the selected text\r\n * \r\n * @param selection - The current editor selection\r\n * @param doc - The document text\r\n * @param level - Heading level (1-6)\r\n * @returns Changes to apply to the document\r\n */\r\nexport function toggleHeading(selection: EditorSelection, doc: string, level: number) {\r\n  // Ensure level is between 1 and 6\r\n  level = Math.max(1, Math.min(6, level));\r\n  \r\n  const changes = [];\r\n  const newSelections = [];\r\n  const prefix = '#'.repeat(level) + ' ';\r\n  \r\n  for (const range of selection.ranges) {\r\n    // Get the line containing the selection\r\n    const line = getLineAt(doc, range.from);\r\n    \r\n    // Check if the line already has a heading of this level\r\n    const hasHeading = line.text.trimStart().startsWith(prefix);\r\n    \r\n    if (hasHeading) {\r\n      // Remove heading\r\n      const headingStart = line.from + line.text.indexOf(prefix);\r\n      changes.push({ from: headingStart, to: headingStart + prefix.length, insert: '' });\r\n      newSelections.push(EditorSelection.range(range.from - prefix.length, range.to - prefix.length));\r\n    } else {\r\n      // Check if the line has a different heading level\r\n      const existingHeadingMatch = line.text.trimStart().match(/^(#{1,6})\\s/);\r\n      \r\n      if (existingHeadingMatch) {\r\n        // Replace existing heading with new heading level\r\n        const existingPrefix = existingHeadingMatch[0];\r\n        const headingStart = line.from + line.text.indexOf(existingPrefix);\r\n        changes.push({ from: headingStart, to: headingStart + existingPrefix.length, insert: prefix });\r\n        \r\n        // Adjust selection based on difference in prefix length\r\n        const diff = prefix.length - existingPrefix.length;\r\n        newSelections.push(EditorSelection.range(range.from + diff, range.to + diff));\r\n      } else {\r\n        // Add heading to the start of the line\r\n        changes.push({ from: line.from, to: line.from, insert: prefix });\r\n        newSelections.push(EditorSelection.range(range.from + prefix.length, range.to + prefix.length));\r\n      }\r\n    }\r\n  }\r\n  \r\n  return {\r\n    changes,\r\n    selection: EditorSelection.create(newSelections)\r\n  };\r\n}\r\n\r\n/**\r\n * Get line information at a specific position in the document\r\n * \r\n * @param doc - The document text\r\n * @param pos - Position in the document\r\n * @returns Line information (from, to, text)\r\n */\r\nfunction getLineAt(doc: string, pos: number) {\r\n  let lineStart = pos;\r\n  let lineEnd = pos;\r\n  \r\n  // Find the start of the line\r\n  while (lineStart > 0 && doc[lineStart - 1] !== '\\n') {\r\n    lineStart--;\r\n  }\r\n  \r\n  // Find the end of the line\r\n  while (lineEnd < doc.length && doc[lineEnd] !== '\\n') {\r\n    lineEnd++;\r\n  }\r\n  \r\n  return {\r\n    from: lineStart,\r\n    to: lineEnd,\r\n    text: doc.slice(lineStart, lineEnd)\r\n  };\r\n}\r\n\r\n/**\r\n * Creates a link with the selected text as the label.\r\n * If no text is selected, inserts a template link and selects the label part.\r\n * \r\n * @param selection - The current editor selection\r\n * @param doc - The current document text\r\n * @returns FormattingResult with changes to apply\r\n */\r\nexport function createLink(selection: EditorSelection, doc: string): FormattingResult {\r\n  const changes: TextChange[] = [];\r\n  let newRanges: Array<{anchor: number, head: number}> = [];\r\n  \r\n  for (const range of selection.ranges) {\r\n    if (range.empty) {\r\n      // No selection - insert link template\r\n      const template = '[link text](url)';\r\n      changes.push({\r\n        from: range.from,\r\n        to: range.to,\r\n        insert: template\r\n      });\r\n      \r\n      // Select the \"link text\" part for easy replacement\r\n      newRanges.push({\r\n        anchor: range.from + 1,\r\n        head: range.from + 10\r\n      });\r\n    } else {\r\n      // Use selected text as link text\r\n      const selectedText = doc.slice(range.from, range.to);\r\n      changes.push({\r\n        from: range.from,\r\n        to: range.to,\r\n        insert: `[${selectedText}](url)`\r\n      });\r\n      \r\n      // Place cursor at the URL position\r\n      newRanges.push({\r\n        anchor: range.from + selectedText.length + 3,\r\n        head: range.from + selectedText.length + 3\r\n      });\r\n    }\r\n  }\r\n  \r\n  return { \r\n    changes,\r\n    selection: newRanges.length > 0 \r\n      ? EditorSelection.create(\r\n          newRanges.map(range => EditorSelection.range(range.anchor, range.head))\r\n        ) \r\n      : undefined\r\n  };\r\n}\r\n\r\n/**\r\n * Toggles a code block or inline code formatting.\r\n * - For multi-line selections: Uses fenced code blocks ```\r\n * - For single-line selections: Uses inline code formatting `code`\r\n * \r\n * @param selection - The current editor selection\r\n * @param doc - The current document text\r\n * @returns FormattingResult with changes to apply\r\n */\r\nexport function toggleCode(selection: EditorSelection, doc: string): FormattingResult {\r\n  const changes: TextChange[] = [];\r\n  const newRanges: Array<{anchor: number, head: number}> = [];\r\n  \r\n  for (const range of selection.ranges) {\r\n    if (range.empty) {\r\n      // No selection - insert inline code markers\r\n      changes.push({\r\n        from: range.from,\r\n        to: range.to,\r\n        insert: '`code`'\r\n      });\r\n      \r\n      // Select the word \"code\" for easy replacement\r\n      newRanges.push({\r\n        anchor: range.from + 1,\r\n        head: range.from + 5\r\n      });\r\n    } else {\r\n      const selectedText = doc.slice(range.from, range.to);\r\n      \r\n      // Check if selection contains multiple lines\r\n      if (selectedText.includes('\\n')) {\r\n        // Multi-line selection - use code block\r\n        if (selectedText.startsWith('```') && selectedText.endsWith('```')) {\r\n          // Remove code block formatting\r\n          changes.push({\r\n            from: range.from,\r\n            to: range.to,\r\n            insert: selectedText.slice(3, -3).trim()\r\n          });\r\n        } else {\r\n          // Add code block formatting\r\n          changes.push({\r\n            from: range.from,\r\n            to: range.to,\r\n            insert: `\\`\\`\\`\\n${selectedText}\\n\\`\\`\\``\r\n          });\r\n        }\r\n      } else {\r\n        // Single line - use inline code\r\n        if (selectedText.startsWith('`') && selectedText.endsWith('`')) {\r\n          // Remove inline code formatting\r\n          changes.push({\r\n            from: range.from,\r\n            to: range.to,\r\n            insert: selectedText.slice(1, -1)\r\n          });\r\n        } else {\r\n          // Add inline code formatting\r\n          changes.push({\r\n            from: range.from,\r\n            to: range.to,\r\n            insert: `\\`${selectedText}\\``\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  return { \r\n    changes,\r\n    selection: newRanges.length > 0 \r\n      ? EditorSelection.create(\r\n          newRanges.map(range => EditorSelection.range(range.anchor, range.head))\r\n        ) \r\n      : undefined\r\n  };\r\n} ","/**\r\n * @fileoverview Markdown formatting utilities\r\n * @module obsidian-editor/utils/formatting\r\n */\r\n\r\nimport { EditorView } from '@codemirror/view';\r\nimport { EditorSelection } from '@codemirror/state';\r\n\r\n/**\r\n * Apply markdown formatting to text\r\n * \r\n * @param {string} text - The text to format\r\n * @param {string} format - The formatting type to apply\r\n * @returns {string} The formatted text\r\n */\r\nexport function applyMarkdownFormat(text: string, format: 'bold' | 'italic' | 'code' | 'link' | 'strikethrough' | 'heading'): string {\r\n  switch (format) {\r\n    case 'bold':\r\n      return `**${text}**`;\r\n    case 'italic':\r\n      return `*${text}*`;\r\n    case 'code':\r\n      return `\\`${text}\\``;\r\n    case 'link':\r\n      return `[${text}](url)`;\r\n    case 'strikethrough':\r\n      return `~~${text}~~`;\r\n    case 'heading':\r\n      return `# ${text}`;\r\n    default:\r\n      return text;\r\n  }\r\n}\r\n\r\n/**\r\n * Check if text has specific markdown formatting\r\n * \r\n * @param {string} text - The text to check\r\n * @param {string} format - The formatting type to check for\r\n * @returns {boolean} Whether the text has the formatting\r\n */\r\nexport function hasMarkdownFormat(text: string, format: 'bold' | 'italic' | 'code' | 'link' | 'strikethrough' | 'heading'): boolean {\r\n  switch (format) {\r\n    case 'bold':\r\n      return /^\\*\\*.*\\*\\*$/.test(text);\r\n    case 'italic':\r\n      return /^\\*.*\\*$/.test(text);\r\n    case 'code':\r\n      return /^`.*`$/.test(text);\r\n    case 'link':\r\n      return /^\\[.*\\]\\(.*\\)$/.test(text);\r\n    case 'strikethrough':\r\n      return /^~~.*~~$/.test(text);\r\n    case 'heading':\r\n      return /^#+ .*$/.test(text);\r\n    default:\r\n      return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Remove markdown formatting from text\r\n * \r\n * @param {string} text - The formatted text\r\n * @param {string} format - The formatting type to remove\r\n * @returns {string} The unformatted text\r\n */\r\nexport function removeMarkdownFormat(text: string, format: 'bold' | 'italic' | 'code' | 'link' | 'strikethrough' | 'heading'): string {\r\n  switch (format) {\r\n    case 'bold':\r\n      return text.replace(/^\\*\\*(.*)\\*\\*$/, '$1');\r\n    case 'italic':\r\n      return text.replace(/^\\*(.*)\\*$/, '$1');\r\n    case 'code':\r\n      return text.replace(/^`(.*)`$/, '$1');\r\n    case 'link':\r\n      return text.replace(/^\\[(.*)\\]\\(.*\\)$/, '$1');\r\n    case 'strikethrough':\r\n      return text.replace(/^~~(.*)~~$/, '$1');\r\n    case 'heading':\r\n      return text.replace(/^#+ (.*)$/, '$1');\r\n    default:\r\n      return text;\r\n  }\r\n}\r\n\r\n/**\r\n * Insert bold formatting\r\n * \r\n * @param {EditorView} view - The editor view\r\n */\r\nexport function insertBold(view: EditorView): void {\r\n  const { state, dispatch } = view;\r\n  const changes = [];\r\n  const selections = [];\r\n  \r\n  for (const range of state.selection.ranges) {\r\n    if (range.empty) {\r\n      // If no selection, insert ** and place cursor between them\r\n      changes.push({\r\n        from: range.from,\r\n        to: range.from,\r\n        insert: '****'\r\n      });\r\n      selections.push(EditorSelection.cursor(range.from + 2));\r\n    } else {\r\n      // If text is selected, wrap it with **\r\n      const selectedText = state.doc.sliceString(range.from, range.to);\r\n      const newText = `**${selectedText}**`;\r\n      changes.push({\r\n        from: range.from,\r\n        to: range.to,\r\n        insert: newText\r\n      });\r\n      selections.push(EditorSelection.range(range.from, range.from + newText.length));\r\n    }\r\n  }\r\n  \r\n  dispatch({\r\n    changes,\r\n    selection: EditorSelection.create(selections)\r\n  });\r\n}\r\n\r\n/**\r\n * Insert italic formatting\r\n * \r\n * @param {EditorView} view - The editor view\r\n */\r\nexport function insertItalic(view: EditorView): void {\r\n  const { state, dispatch } = view;\r\n  const changes = [];\r\n  const selections = [];\r\n  \r\n  for (const range of state.selection.ranges) {\r\n    if (range.empty) {\r\n      // If no selection, insert * and place cursor between them\r\n      changes.push({\r\n        from: range.from,\r\n        to: range.from,\r\n        insert: '**'\r\n      });\r\n      selections.push(EditorSelection.cursor(range.from + 1));\r\n    } else {\r\n      // If text is selected, wrap it with *\r\n      const selectedText = state.doc.sliceString(range.from, range.to);\r\n      const newText = `*${selectedText}*`;\r\n      changes.push({\r\n        from: range.from,\r\n        to: range.to,\r\n        insert: newText\r\n      });\r\n      selections.push(EditorSelection.range(range.from, range.from + newText.length));\r\n    }\r\n  }\r\n  \r\n  dispatch({\r\n    changes,\r\n    selection: EditorSelection.create(selections)\r\n  });\r\n}\r\n\r\n/**\r\n * Insert code formatting\r\n * \r\n * @param {EditorView} view - The editor view\r\n */\r\nexport function insertCode(view: EditorView): void {\r\n  const { state, dispatch } = view;\r\n  const changes = [];\r\n  const selections = [];\r\n  \r\n  for (const range of state.selection.ranges) {\r\n    if (range.empty) {\r\n      // If no selection, insert `` and place cursor between them\r\n      changes.push({\r\n        from: range.from,\r\n        to: range.from,\r\n        insert: '``'\r\n      });\r\n      selections.push(EditorSelection.cursor(range.from + 1));\r\n    } else {\r\n      // If text is selected, wrap it with `\r\n      const selectedText = state.doc.sliceString(range.from, range.to);\r\n      const newText = `\\`${selectedText}\\``;\r\n      changes.push({\r\n        from: range.from,\r\n        to: range.to,\r\n        insert: newText\r\n      });\r\n      selections.push(EditorSelection.range(range.from, range.from + newText.length));\r\n    }\r\n  }\r\n  \r\n  dispatch({\r\n    changes,\r\n    selection: EditorSelection.create(selections)\r\n  });\r\n}\r\n\r\n/**\r\n * Insert heading formatting\r\n * \r\n * @param {EditorView} view - The editor view\r\n * @param {number} level - The heading level (1-6)\r\n */\r\nexport function insertHeading(view: EditorView, level: number = 1): void {\r\n  const { state, dispatch } = view;\r\n  \r\n  // Validate level\r\n  const validLevel = Math.max(1, Math.min(6, level));\r\n  const prefix = '#'.repeat(validLevel) + ' ';\r\n  \r\n  const changes = [];\r\n  const selections = [];\r\n  \r\n  for (const range of state.selection.ranges) {\r\n    // Get line start and line content\r\n    const line = state.doc.lineAt(range.from);\r\n    const lineContent = line.text;\r\n    \r\n    // Check if line already has heading\r\n    const existingHeadingMatch = lineContent.match(/^(#{1,6})\\s/);\r\n    \r\n    if (existingHeadingMatch) {\r\n      // Already has heading, replace it\r\n      changes.push({\r\n        from: line.from,\r\n        to: line.from + existingHeadingMatch[0].length,\r\n        insert: prefix\r\n      });\r\n    } else {\r\n      // Add heading at start of line\r\n      changes.push({\r\n        from: line.from,\r\n        to: line.from,\r\n        insert: prefix\r\n      });\r\n    }\r\n    \r\n    // Keep cursor position relative to content\r\n    const contentOffset = range.from - line.from;\r\n    const newPos = line.from + prefix.length + contentOffset;\r\n    selections.push(EditorSelection.cursor(newPos));\r\n  }\r\n  \r\n  dispatch({\r\n    changes,\r\n    selection: EditorSelection.create(selections)\r\n  });\r\n}\r\n\r\n/**\r\n * Insert link formatting\r\n * \r\n * @param {EditorView} view - The editor view\r\n */\r\nexport function insertLink(view: EditorView): void {\r\n  const { state, dispatch } = view;\r\n  const changes = [];\r\n  const selections = [];\r\n  \r\n  for (const range of state.selection.ranges) {\r\n    if (range.empty) {\r\n      // If no selection, insert [](url) and place cursor between []\r\n      changes.push({\r\n        from: range.from,\r\n        to: range.from,\r\n        insert: '[](url)'\r\n      });\r\n      selections.push(EditorSelection.cursor(range.from + 1));\r\n    } else {\r\n      // If text is selected, use it as link text\r\n      const selectedText = state.doc.sliceString(range.from, range.to);\r\n      const newText = `[${selectedText}](url)`;\r\n      changes.push({\r\n        from: range.from,\r\n        to: range.to,\r\n        insert: newText\r\n      });\r\n      \r\n      // Position cursor in the URL part\r\n      const urlPos = range.from + selectedText.length + 3;\r\n      selections.push(EditorSelection.cursor(urlPos));\r\n    }\r\n  }\r\n  \r\n  dispatch({\r\n    changes,\r\n    selection: EditorSelection.create(selections)\r\n  });\r\n}\r\n\r\n/**\r\n * Indent text (add spaces at the beginning of line)\r\n * \r\n * @param {EditorView} view - The editor view\r\n */\r\nexport function indentText(view: EditorView): void {\r\n  const { state, dispatch } = view;\r\n  const changes = [];\r\n  const selections = [];\r\n  const indentSize = 2; // Use 2 spaces for indentation\r\n  const indent = ' '.repeat(indentSize);\r\n  \r\n  // Track already processed lines to avoid double indenting\r\n  const processedLines = new Set<number>();\r\n  \r\n  for (const range of state.selection.ranges) {\r\n    const startLine = state.doc.lineAt(range.from);\r\n    const endLine = state.doc.lineAt(range.to);\r\n    \r\n    // Process each line in the selection\r\n    for (let lineNum = startLine.number; lineNum <= endLine.number; lineNum++) {\r\n      if (processedLines.has(lineNum)) continue;\r\n      \r\n      const line = state.doc.line(lineNum);\r\n      processedLines.add(lineNum);\r\n      \r\n      // Add indentation at the start of the line\r\n      changes.push({\r\n        from: line.from,\r\n        to: line.from,\r\n        insert: indent\r\n      });\r\n    }\r\n    \r\n    // Adjust selection to keep it on the same text\r\n    const newFrom = range.from + indentSize;\r\n    const newTo = range.to + (endLine.number - startLine.number + 1) * indentSize;\r\n    selections.push(EditorSelection.range(newFrom, newTo));\r\n  }\r\n  \r\n  dispatch({\r\n    changes,\r\n    selection: EditorSelection.create(selections)\r\n  });\r\n}\r\n\r\n/**\r\n * Unindent text (remove spaces from the beginning of line)\r\n * \r\n * @param {EditorView} view - The editor view\r\n */\r\nexport function unindentText(view: EditorView): void {\r\n  const { state, dispatch } = view;\r\n  const changes = [];\r\n  const selections = [];\r\n  const indentSize = 2; // Remove 2 spaces when unindenting\r\n  \r\n  // Track already processed lines to avoid double processing\r\n  const processedLines = new Set<number>();\r\n  \r\n  for (const range of state.selection.ranges) {\r\n    const startLine = state.doc.lineAt(range.from);\r\n    const endLine = state.doc.lineAt(range.to);\r\n    \r\n    // Track total indentation removed to adjust selection\r\n    let totalIndentRemoved = 0;\r\n    \r\n    // Process each line in the selection\r\n    for (let lineNum = startLine.number; lineNum <= endLine.number; lineNum++) {\r\n      if (processedLines.has(lineNum)) continue;\r\n      \r\n      const line = state.doc.line(lineNum);\r\n      processedLines.add(lineNum);\r\n      \r\n      // Check for spaces at the beginning of the line\r\n      const lineContent = line.text;\r\n      const leadingSpaces = lineContent.match(/^( +)/);\r\n      \r\n      if (leadingSpaces) {\r\n        // Determine how many spaces to remove (up to indentSize)\r\n        const spacesToRemove = Math.min(leadingSpaces[1].length, indentSize);\r\n        \r\n        changes.push({\r\n          from: line.from,\r\n          to: line.from + spacesToRemove,\r\n          insert: ''\r\n        });\r\n        \r\n        // If this is within the selection range, count for adjustment\r\n        if (lineNum === startLine.number) {\r\n          totalIndentRemoved += spacesToRemove;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Adjust selection to keep it on the same text\r\n    const newFrom = Math.max(startLine.from, range.from - totalIndentRemoved);\r\n    let newTo = range.to;\r\n    \r\n    // Adjust 'to' position for all removed indents\r\n    for (let lineNum = startLine.number; lineNum <= endLine.number; lineNum++) {\r\n      const line = state.doc.line(lineNum);\r\n      const lineContent = line.text;\r\n      const leadingSpaces = lineContent.match(/^( +)/);\r\n      \r\n      if (leadingSpaces) {\r\n        const spacesToRemove = Math.min(leadingSpaces[1].length, indentSize);\r\n        newTo -= spacesToRemove;\r\n      }\r\n    }\r\n    \r\n    selections.push(EditorSelection.range(newFrom, Math.max(newFrom, newTo)));\r\n  }\r\n  \r\n  dispatch({\r\n    changes,\r\n    selection: EditorSelection.create(selections)\r\n  });\r\n}\r\n\r\n/**\r\n * Handle backspace in indented lines\r\n * \r\n * @param {EditorView} view - The editor view\r\n * @returns {boolean} Whether the event was handled\r\n */\r\nexport function handleBackspaceIndent(view: EditorView): boolean {\r\n  const { state, dispatch } = view;\r\n  const indentSize = 2;\r\n  \r\n  // Only handle if all selections are empty (cursor positions)\r\n  if (!state.selection.ranges.every(range => range.empty)) {\r\n    return false;\r\n  }\r\n  \r\n  let handled = false;\r\n  const changes = [];\r\n  const selections = [];\r\n  \r\n  for (const range of state.selection.ranges) {\r\n    const pos = range.from;\r\n    const line = state.doc.lineAt(pos);\r\n    \r\n    // Only handle if cursor is at the end of whitespace\r\n    if (pos > line.from) {\r\n      const textBeforeCursor = line.text.substring(0, pos - line.from);\r\n      \r\n      // Check if there are only spaces before the cursor\r\n      if (/^\\s+$/.test(textBeforeCursor)) {\r\n        const spacesToRemove = Math.min(textBeforeCursor.length, indentSize);\r\n        \r\n        changes.push({\r\n          from: pos - spacesToRemove,\r\n          to: pos,\r\n          insert: ''\r\n        });\r\n        \r\n        selections.push(EditorSelection.cursor(pos - spacesToRemove));\r\n        handled = true;\r\n      }\r\n    }\r\n  }\r\n  \r\n  if (handled) {\r\n    dispatch({\r\n      changes,\r\n      selection: EditorSelection.create(selections)\r\n    });\r\n    return true;\r\n  }\r\n  \r\n  return false;\r\n}\r\n\r\n/**\r\n * Handle Enter key in lists and blockquotes\r\n * \r\n * @param {EditorView} view - The editor view\r\n * @returns {boolean} Whether the event was handled\r\n */\r\nexport function handleEnterListBlockquote(view: EditorView): boolean {\r\n  const { state, dispatch } = view;\r\n  \r\n  // Only handle if there's a single cursor\r\n  if (state.selection.ranges.length !== 1 || !state.selection.ranges[0].empty) {\r\n    return false;\r\n  }\r\n  \r\n  const pos = state.selection.main.from;\r\n  const line = state.doc.lineAt(pos);\r\n  const lineContent = line.text;\r\n  \r\n  // Check for list items or blockquotes\r\n  const listMatch = lineContent.match(/^(\\s*)([-*+]|\\d+\\.)\\s/);\r\n  const blockquoteMatch = lineContent.match(/^(\\s*>\\s+)/);\r\n  \r\n  if (listMatch || blockquoteMatch) {\r\n    const prefix = listMatch ? listMatch[0] : blockquoteMatch![0];\r\n    \r\n    // Check if the line is empty except for the prefix\r\n    if (lineContent.trim() === prefix.trim()) {\r\n      // Empty list item or blockquote - remove the prefix\r\n      dispatch({\r\n        changes: { from: line.from, to: line.to, insert: '' }\r\n      });\r\n      return true;\r\n    } else if (pos === line.to) {\r\n      // At the end of a non-empty line - continue the list or blockquote\r\n      dispatch({\r\n        changes: { from: pos, to: pos, insert: '\\n' + prefix },\r\n        selection: { anchor: pos + 1 + prefix.length }\r\n      });\r\n      return true;\r\n    }\r\n  }\r\n  \r\n  return false;\r\n}\r\n\r\n/**\r\n * Markdown formatting utilities for the editor\r\n */\r\nexport * from './markdownFormatting'; ","/**\n * This file contains configurations for CodeMirror editor extensions.\n */\nimport { Extension, Prec } from '@codemirror/state';\nimport { keymap, highlightActiveLine, highlightActiveLineGutter, EditorView } from '@codemirror/view';\nimport { markdown, markdownLanguage } from '@codemirror/lang-markdown';\nimport { languages } from '@codemirror/language-data';\nimport { syntaxHighlighting, HighlightStyle } from '@codemirror/language';\nimport { tags } from '@lezer/highlight';\nimport { defaultKeymap, historyKeymap, history } from '@codemirror/commands';\n\n// Import custom extensions\nimport { atomicIndents } from '../extensions/AtomicIndents';\nimport { createMarkdownSyntaxPlugin } from '../extensions/markdown-syntax';\nimport { htmlDecorator } from '../extensions/markdown-syntax/html-decorator';\nimport { markdownPasteHandler } from '../extensions/MarkdownPasteHandler';\n// Import our Lezer safety plugin\nimport { createLezerSafetyPlugin } from '../extensions/lezer-safety-plugin';\n// Import the no markdown in HTML extension\nimport { createNoMarkdownInHtmlExtension } from '../extensions/markdown/no-formatting';\n// Import markdown syntax hider\nimport { markdownSyntaxHider } from '../extensions/MarkdownSyntaxHider';\n// Import the combined extensions\nimport { createAllExtensions } from '../extensions';\n\n// Import formatting functions from our new modular structure\nimport { \n  insertBold, \n  insertItalic, \n  insertHeading, \n  insertCode, \n  insertLink,\n  indentText,\n  unindentText,\n  handleBackspaceIndent,\n  handleEnterListBlockquote\n} from './formatting';\n\n// Import additional helper functions\nimport { isListItem } from './formatting/linkAndListFormatting';\nimport { isBlockquote, INDENT_UNIT } from './formatting/indentationUtils';\n\n/**\n * Creates a custom highlight style for markdown content\n * @returns {HighlightStyle} The highlight style extension\n */\nexport const createCustomHighlightStyle = (): HighlightStyle | Extension[] => {\n  try {\n    // First verify that tags is an object and has the expected properties\n    if (typeof tags !== 'object' || tags === null) {\n      console.warn('Lezer highlight tags not available, using empty highlight style');\n      return [];\n    }\n\n    // Build an array of valid tag styles\n    const validStyles = [];\n    \n    // Ensure consistent handling of tags - always use array format for tag property\n    if (tags.heading1) validStyles.push({ tag: [tags.heading1], fontSize: '1.6em', fontWeight: 'bold' });\n    if (tags.heading2) validStyles.push({ tag: [tags.heading2], fontSize: '1.4em', fontWeight: 'bold' });\n    if (tags.heading3) validStyles.push({ tag: [tags.heading3], fontSize: '1.2em', fontWeight: 'bold' });\n    if (tags.heading4) validStyles.push({ tag: [tags.heading4], fontSize: '1.1em', fontWeight: 'bold' });\n    if (tags.heading5) validStyles.push({ tag: [tags.heading5], fontSize: '1.1em', fontWeight: 'bold', fontStyle: 'italic' });\n    if (tags.heading6) validStyles.push({ tag: [tags.heading6], fontSize: '1.1em', fontWeight: 'bold', fontStyle: 'italic' });\n    if (tags.strong) validStyles.push({ tag: [tags.strong], fontWeight: 'bold' });\n    if (tags.emphasis) validStyles.push({ tag: [tags.emphasis], fontStyle: 'italic' });\n    if (tags.link) validStyles.push({ tag: [tags.link], color: '#2563eb', textDecoration: 'underline' });\n    if (tags.monospace) validStyles.push({ tag: [tags.monospace], fontFamily: 'monospace', fontSize: '0.9em', color: '#10b981' });\n    \n    // Only create the highlight style if we have valid tags\n    if (validStyles.length > 0) {\n      return HighlightStyle.define(validStyles);\n    } else {\n      console.warn('No valid lezer highlight tags found, using empty highlight style');\n      return [];\n    }\n  } catch (error) {\n    console.error('Error creating custom highlight style:', error);\n    return []; // Return empty extension on failure\n  }\n};\n\n/**\n * Creates a custom Enter keymap with highest precedence\n * @returns {Extension} The custom enter keymap extension\n */\nexport const createCustomEnterKeymap = (): Extension => {\n  return Prec.highest(keymap.of([\n    {\n      key: 'Enter',\n      run: (view) => handleEnterListBlockquote(view),\n    }\n  ]));\n};\n\n/**\n * Creates custom keymaps for markdown editing\n * @param onSaveRef - Reference to the onSave function\n * @returns {Extension} The keymap extension\n */\nexport const createMarkdownKeymaps = (onSaveRef: React.MutableRefObject<(() => void) | undefined>): Extension => {\n  return keymap.of([\n    {\n      key: 'Backspace',\n      run: (view) => {\n        return handleBackspaceIndent(view);\n      }\n    },\n    ...defaultKeymap,\n    ...historyKeymap,\n    {\n      key: 'Tab',\n      run: (view) => {\n        // In case we're dealing with selection spanning multiple lines\n        const selection = view.state.selection.main;\n        const firstLine = view.state.doc.lineAt(selection.from);\n        const lastLine = view.state.doc.lineAt(selection.to);\n        \n        // Log information for debugging\n        console.log(\"Tab pressed - processing indentation\");\n\n        // For multi-line selections\n        if (firstLine.number !== lastLine.number) {\n          console.log(\"Multi-line selection detected\");\n          indentText(view);\n          return true;\n        }\n        \n        // For single line, check if it's a list item or blockquote first\n        const line = firstLine;\n        const isListLine = isListItem(line.text);\n        const isBlockquoteLine = isBlockquote(line.text);\n        \n        // Handle list indentation\n        if (isListLine) {\n          console.log(\"List line detected - applying 4-space indent\");\n          // Force update with direct dispatch instead of indentText\n          view.dispatch({\n            changes: {\n              from: line.from,\n              to: line.from,\n              insert: INDENT_UNIT\n            },\n            userEvent: 'input.indent'\n          });\n          return true;\n        }\n        \n        // Handle blockquote indentation \n        if (isBlockquoteLine) {\n          console.log(\"Blockquote line detected - applying > marker\");\n          // Match the blockquote structure\n          const match = line.text.match(/^(\\s*)((?:>\\s*)+)(.*)/);\n          if (match) {\n            const leadingSpaces = match[1] || '';\n            // Add the blockquote marker at the beginning\n            view.dispatch({\n              changes: {\n                from: line.from + leadingSpaces.length,\n                to: line.from + leadingSpaces.length,\n                insert: '> '\n              },\n              userEvent: 'input.indent'\n            });\n            return true;\n          }\n        }\n        \n        // Default indentation with 4 spaces\n        console.log(\"Regular indent - applying 4 spaces\");\n        view.dispatch({\n          changes: {\n            from: selection.from,\n            to: selection.from,\n            insert: INDENT_UNIT\n          },\n          userEvent: 'input.indent'\n        });\n        return true;\n      },\n      shift: (view) => {\n        console.log(\"Shift+Tab pressed - unindenting\");\n        unindentText(view);\n        return true;\n      }\n    },\n    {\n      key: 'Ctrl-b',\n      run: (view) => {\n        insertBold(view);\n        return true;\n      },\n    },\n    {\n      key: 'Ctrl-i',\n      run: (view) => {\n        insertItalic(view);\n        return true;\n      },\n    },\n    {\n      key: 'Ctrl-1',\n      run: (view) => {\n        insertHeading(view, 1);\n        return true;\n      },\n    },\n    {\n      key: 'Ctrl-2',\n      run: (view) => {\n        insertHeading(view, 2);\n        return true;\n      },\n    },\n    {\n      key: 'Ctrl-3',\n      run: (view) => {\n        insertHeading(view, 3);\n        return true;\n      },\n    },\n    {\n      key: 'Ctrl-`',\n      run: (view) => {\n        insertCode(view);\n        return true;\n      },\n    },\n    {\n      key: 'Ctrl-k',\n      run: (view) => {\n        insertLink(view);\n        return true;\n      },\n    },\n    {\n      key: 'Ctrl-s',\n      run: () => {\n        if (onSaveRef.current) onSaveRef.current();\n        return true;\n      },\n    },\n  ]);\n};\n\n/**\n * Creates base editor styling\n * @returns {Extension} The editor theme extension\n */\nexport const createEditorStyling = (): Extension => {\n  return EditorView.theme({\n    '&': {\n      height: '100%',\n    },\n    '.cm-content': {\n      padding: '1rem',\n      fontFamily: 'Menlo, Monaco, Courier New, monospace',\n      fontSize: '16px',\n      lineHeight: '1.6',\n    },\n  });\n};\n\n/**\n * Interface for editor extension options\n */\nexport interface EditorExtensionOptions {\n  markdown: string;\n  editableCompartment: any;\n  isDark: boolean;\n  themeExtension: any;\n  onSave?: () => void;\n}\n\n/**\n * Creates all the extensions needed for the CodeMirror editor\n * @param options - Editor extension options\n * @returns {Extension[]} Array of extensions\n */\nexport const createEditorExtensions = (options: EditorExtensionOptions): Extension[] => {\n  const { editableCompartment, themeExtension, isDark } = options;\n\n  const onSaveRef = { \n    current: options.onSave || (() => {})\n  };\n  \n  // Create extensions that are less likely to cause issues\n  const safeExtensions: Extension[] = [\n    themeExtension,\n    history(),\n    // Get all extensions from the central extension registry\n    ...createAllExtensions(),\n    // Add safety and highlighting extensions\n    Prec.highest(createLezerSafetyPlugin()),\n    highlightActiveLine(),\n    highlightActiveLineGutter(),\n    EditorView.lineWrapping,\n    createMarkdownKeymaps(onSaveRef),\n    editableCompartment.of(EditorView.editable.of(true)), // Start as editable\n    createEditorStyling(),\n  ];\n\n  // Try to apply syntax highlighting safely\n  try {\n    const highlightStyle = createCustomHighlightStyle();\n    \n    // Only add syntax highlighting if we got a valid HighlightStyle object\n    if (Array.isArray(highlightStyle)) {\n      if (highlightStyle.length > 0) {\n        safeExtensions.push(...highlightStyle);\n      }\n    } else {\n      safeExtensions.push(syntaxHighlighting(highlightStyle));\n    }\n  } catch (error) {\n    console.warn('Failed to create syntax highlighting:', error);\n  }\n\n  return safeExtensions;\n}; ","'use client';\r\n\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { EditorState, Extension, Compartment } from '@codemirror/state';\r\nimport { EditorView } from '@codemirror/view';\r\nimport { setMarkdownSyntaxMode } from '../extensions/markdown-support';\r\nimport { createEditorExtensions } from '../utils/editorExtensions';\r\nimport { useTheme } from '../../../contexts/ThemeContext';\r\nimport { lightTheme, darkTheme, getCurrentEditorTheme, getTheme } from '../utils/theme';\r\nimport { ThemeMode } from '../../../types/theme';\r\nimport { createMarkdownSyntaxPlugin } from '../extensions/markdown-support';\r\nimport combinedKeymap from '../extensions/keymaps';\r\n\r\n/**\r\n * Props for the EditorCore component.\r\n * @interface EditorCoreProps\r\n */\r\nexport interface EditorCoreProps {\r\n  /** Initial markdown content for the editor */\r\n  initialValue: string;\r\n  /** Whether the editor is read-only */\r\n  readOnly: boolean;\r\n  /** Editor view mode (live editing or preview) */\r\n  mode: 'live' | 'preview';\r\n  /** Optional callback when content changes */\r\n  onChange?: (content: string) => void;\r\n  /** Optional callback for save actions (Ctrl+S) */\r\n  onSave?: () => void;\r\n  /** Callback to set the editor view reference */\r\n  onEditorViewCreated?: (view: EditorView) => void;\r\n}\r\n\r\n/**\r\n * Core editor component that manages the CodeMirror instance\r\n * Responsible for editor initialization, state management, and theme handling\r\n * \r\n * @param props - Component props\r\n * @returns React component\r\n */\r\nexport const EditorCore: React.FC<EditorCoreProps> = ({ \r\n  initialValue, \r\n  readOnly, \r\n  mode, \r\n  onChange, \r\n  onSave,\r\n  onEditorViewCreated\r\n}) => {\r\n  const editorRef = useRef<HTMLDivElement>(null);\r\n  const editorViewRef = useRef<EditorView | null>(null);\r\n  const { theme, mounted } = useTheme();\r\n  const [initializationError, setInitializationError] = useState<Error | null>(null);\r\n  \r\n  // Track callbacks with refs to avoid dependency changes\r\n  const onChangeRef = useRef(onChange);\r\n  const onSaveRef = useRef(onSave);\r\n  \r\n  // Create compartments for reconfigurable extensions\r\n  const editableCompartment = useRef(new Compartment()).current;\r\n  const themeCompartment = useRef(new Compartment()).current;\r\n  \r\n  // Get the current editor theme\r\n  const editorThemeName = getCurrentEditorTheme();\r\n  \r\n  // Update refs when props change\r\n  useEffect(() => {\r\n    onChangeRef.current = onChange;\r\n    onSaveRef.current = onSave;\r\n  }, [onChange, onSave]);\r\n  \r\n  // Add wheel event handler to ensure scrolling works\r\n  useEffect(() => {\r\n    const handleWheel = (e: WheelEvent) => {\r\n      // Let the default behavior happen - the scroller will handle it\r\n      e.stopPropagation();\r\n    };\r\n\r\n    const editorElement = editorRef.current;\r\n    if (editorElement) {\r\n      editorElement.addEventListener('wheel', handleWheel, { passive: true });\r\n      \r\n      return () => {\r\n        editorElement.removeEventListener('wheel', handleWheel);\r\n      };\r\n    }\r\n  }, []);\r\n  \r\n  // Helper function to safely parse and sanitize HTML content\r\n  const sanitizeInitialValue = (content: string): string => {\r\n    try {\r\n      // Don't wrap HTML in code blocks anymore\r\n      return content;\r\n    } catch (e) {\r\n      console.warn('Error sanitizing content:', e);\r\n      return content;\r\n    }\r\n  };\r\n\r\n  // Initialize the editor once when the component mounts\r\n  useEffect(() => {\r\n    // Only initialize on client-side after mounting\r\n    if (!mounted || !editorRef.current) return;\r\n    \r\n    // Handle a previously created editor view\r\n    if (editorViewRef.current) {\r\n      editorViewRef.current.destroy();\r\n    }\r\n    \r\n    try {\r\n      // Process the initial content to avoid parsing issues\r\n      const safeInitialValue = sanitizeInitialValue(initialValue);\r\n      \r\n      // Add global error handler for CodeMirror initialization\r\n      const errorHandler = (error: ErrorEvent) => {\r\n        if (error.message?.includes('CodeMirror') || \r\n            error.message?.includes('Cannot read properties of undefined')) {\r\n          console.warn('Caught editor initialization error:', error);\r\n          setInitializationError(error.error);\r\n        }\r\n      };\r\n      \r\n      window.addEventListener('error', errorHandler);\r\n      \r\n      // Determine which theme to use based on the current application theme and editor theme\r\n      const themeExtension = getTheme(editorThemeName, theme === 'dark' ? 'dark' : 'light');\r\n      \r\n      // Listen for document changes\r\n      const changeListener = EditorView.updateListener.of((update) => {\r\n        if (update.docChanged && onChangeRef.current) {\r\n          // Only trigger onChange if the change was from user input\r\n          if (update.transactions.some(tr => tr.isUserEvent(\"input\") || tr.isUserEvent(\"delete\"))) {\r\n            const doc = update.state.doc;\r\n            onChangeRef.current(doc.toString());\r\n          }\r\n        }\r\n      });\r\n      \r\n      // Custom extension to handle errors in the editor\r\n      const errorHandlingExtension = EditorView.domEventHandlers({\r\n        error: (event, view) => {\r\n          console.warn('DOM error event in editor:', event);\r\n          return false;\r\n        }\r\n      });\r\n      \r\n      // Create editor extensions\r\n      const extensions = [\r\n        ...createEditorExtensions({\r\n          markdown: safeInitialValue,\r\n          editableCompartment,\r\n          isDark: theme === 'dark',\r\n          themeExtension: themeCompartment.of(themeExtension),\r\n          onSave: () => onSaveRef.current?.(),\r\n        }),\r\n        changeListener,\r\n        errorHandlingExtension\r\n      ];\r\n\r\n      // Create the editor view\r\n      const view = new EditorView({\r\n        state: EditorState.create({\r\n          doc: safeInitialValue,\r\n          extensions,\r\n        }),\r\n        parent: editorRef.current,\r\n      });\r\n\r\n      // Store the view reference\r\n      editorViewRef.current = view;\r\n      \r\n      // Call the callback if provided\r\n      if (onEditorViewCreated) {\r\n        onEditorViewCreated(view);\r\n      }\r\n\r\n      return () => {\r\n        window.removeEventListener('error', errorHandler);\r\n        view.destroy();\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Error initializing CodeMirror:\", error);\r\n      setInitializationError(error instanceof Error ? error : new Error(String(error)));\r\n    }\r\n  }, [mounted]); // Only depend on mounted state\r\n  \r\n  // Handle theme changes without reinitializing the editor\r\n  useEffect(() => {\r\n    if (editorViewRef.current && themeCompartment && mounted) {\r\n      try {\r\n        // Get the appropriate theme based on the current theme name and mode\r\n        const themeExtension = getTheme(editorThemeName, theme === 'dark' ? 'dark' : 'light');\r\n        \r\n        // Apply the data-theme attribute for CSS targeting\r\n        document.documentElement.setAttribute(\r\n          'data-theme', \r\n          `${editorThemeName}-${theme === 'dark' ? 'dark' : 'light'}`\r\n        );\r\n        \r\n        // Update CodeMirror's theme\r\n        editorViewRef.current.dispatch({\r\n          effects: themeCompartment.reconfigure(themeExtension)\r\n        });\r\n        \r\n        console.log(`Applied editor theme: ${editorThemeName} in ${theme} mode`);\r\n      } catch (error) {\r\n        console.error(\"Error updating theme:\", error);\r\n      }\r\n    }\r\n  }, [theme, themeCompartment, mounted, editorThemeName]);\r\n\r\n  // Effect for updating the editor mode and editable state\r\n  useEffect(() => {\r\n    if (editorViewRef.current && mounted) {\r\n      try {\r\n        // Dispatch effects to update markdown syntax mode\r\n        editorViewRef.current.dispatch({\r\n          effects: [\r\n            setMarkdownSyntaxMode.of(mode)\r\n          ]\r\n        });\r\n\r\n        // Update the editable state of the editor\r\n        const isEditable = mode === 'live' && !readOnly;\r\n        editorViewRef.current.dispatch({\r\n          effects: editableCompartment.reconfigure(EditorView.editable.of(isEditable))\r\n        });\r\n        \r\n        // Set mode on the editor element for CSS targeting\r\n        const editorElement = editorViewRef.current.dom;\r\n        if (editorElement) {\r\n          editorElement.setAttribute('data-markdown-mode', mode);\r\n          \r\n          // Also update root elements with the mode for global styling\r\n          if (typeof document !== 'undefined') {\r\n            document.documentElement.setAttribute('data-markdown-mode', mode);\r\n            \r\n            // Add class for better CSS targeting\r\n            if (mode === 'preview') {\r\n              document.documentElement.classList.add('markdown-preview-mode');\r\n              document.documentElement.classList.remove('markdown-live-mode');\r\n            } else {\r\n              document.documentElement.classList.add('markdown-live-mode');\r\n              document.documentElement.classList.remove('markdown-preview-mode');\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error updating editor mode:\", error);\r\n      }\r\n    }\r\n  }, [mode, readOnly, editableCompartment, mounted]);\r\n\r\n  // When initialValue changes externally, update the editor content\r\n  useEffect(() => {\r\n    if (editorViewRef.current && mounted) {\r\n      try {\r\n        const currentContent = editorViewRef.current.state.doc.toString();\r\n        const safeInitialValue = sanitizeInitialValue(initialValue);\r\n        \r\n        // Only update if content is different\r\n        if (currentContent !== safeInitialValue) {\r\n          // Store the current selection\r\n          const prevSelection = editorViewRef.current.state.selection;\r\n          \r\n          const transaction = editorViewRef.current.state.update({\r\n            changes: { from: 0, to: editorViewRef.current.state.doc.length, insert: safeInitialValue },\r\n            selection: prevSelection, // Keep cursor position\r\n          });\r\n          \r\n          editorViewRef.current.dispatch(transaction);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error updating editor content:\", error);\r\n      }\r\n    }\r\n  }, [initialValue, mounted]);\r\n  \r\n  // If there was an initialization error, render a fallback\r\n  if (initializationError) {\r\n    return (\r\n      <div className=\"obsidian-editor-error\">\r\n        <p>Error initializing editor: {initializationError.message}</p>\r\n        <textarea \r\n          defaultValue={initialValue}\r\n          onChange={(e) => onChangeRef.current?.(e.target.value)}\r\n          readOnly={readOnly}\r\n          className=\"obsidian-editor-fallback\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return <div ref={editorRef} className=\"obsidian-editor-core\" />;\r\n};\r\n\r\nexport default EditorCore; ","'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { EditorThemeName, getCurrentEditorTheme } from '../utils/theme';\n\n/**\n * Props for the ThemeSwitcher component\n */\ninterface ThemeSwitcherProps {\n  onThemeChange?: (themeName: EditorThemeName) => void;\n}\n\n/**\n * Component for switching between editor themes\n */\nconst ThemeSwitcher: React.FC<ThemeSwitcherProps> = ({ onThemeChange }) => {\n  const [themeName, setThemeName] = useState<EditorThemeName>('default');\n  \n  // Initialize with the current theme\n  useEffect(() => {\n    setThemeName(getCurrentEditorTheme());\n  }, []);\n  \n  // Handle theme change\n  const handleThemeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const newTheme = e.target.value as EditorThemeName;\n    setThemeName(newTheme);\n    \n    if (onThemeChange) {\n      onThemeChange(newTheme);\n    }\n  };\n  \n  return (\n    <div className=\"theme-switcher\">\n      <select \n        value={themeName} \n        onChange={handleThemeChange}\n        className=\"theme-select\"\n        aria-label=\"Select editor theme\"\n      >\n        <option value=\"default\">Default</option>\n        <option value=\"vanilla\">Vanilla</option>\n      </select>\n      \n      <style>\n        {`\n        .theme-switcher {\n          position: relative;\n        }\n        \n        .theme-select {\n          padding: 4px 8px;\n          border-radius: 4px;\n          border: 1px solid var(--hr-color, #dcddde);\n          background: var(--background-primary, #ffffff);\n          color: var(--text-normal, #2e3338);\n          cursor: pointer;\n          font-size: 14px;\n        }\n        \n        .dark .theme-select {\n          background: var(--background-primary, #2b2b2b);\n          color: var(--text-normal, #dcddde);\n          border-color: var(--hr-color, #444444);\n        }\n        `}\n      </style>\n    </div>\n  );\n};\n\nexport default ThemeSwitcher; ","'use client';\r\n\r\nimport React from 'react';\r\nimport { EditorView } from '@codemirror/view';\r\nimport { EditorSelection, Transaction } from '@codemirror/state';\r\nimport { toggleBold, toggleItalic, toggleHeading } from '../utils/formatting/markdownFormatting';\r\nimport ThemeSwitcher from './ThemeSwitcher';\r\nimport { EditorThemeName } from '../utils/theme';\r\n\r\n/**\r\n * Props for the EditorToolbar component\r\n * @interface EditorToolbarProps\r\n */\r\ninterface EditorToolbarProps {\r\n  /** The CodeMirror editor view instance */\r\n  editorView: EditorView | null;\r\n  /** Current mode of the editor (live or preview) */\r\n  mode: 'live' | 'preview';\r\n  /** Callback when mode is changed */\r\n  onModeChange: (mode: 'live' | 'preview') => void;\r\n  /** Optional callback when theme is changed */\r\n  onThemeChange?: (themeName: EditorThemeName) => void;\r\n}\r\n\r\n/**\r\n * Toolbar component for the markdown editor\r\n * Provides formatting buttons and view mode toggle\r\n * \r\n * @param props - Component props\r\n * @returns React component\r\n */\r\nexport const EditorToolbar: React.FC<EditorToolbarProps> = ({\r\n  editorView,\r\n  mode,\r\n  onModeChange,\r\n  onThemeChange\r\n}) => {\r\n  /**\r\n   * Applies a formatting function to the current selection\r\n   * \r\n   * @param formatter - The formatting function to apply\r\n   */\r\n  const applyFormatting = (\r\n    formatter: (\r\n      selection: EditorSelection, \r\n      doc: string\r\n    ) => { changes: {from: number, to: number, insert: string}[], selection?: EditorSelection }\r\n  ) => {\r\n    if (!editorView) return;\r\n    \r\n    const { state, dispatch } = editorView;\r\n    const changes = formatter(state.selection, state.doc.toString());\r\n    \r\n    if (changes) {\r\n      dispatch({\r\n        changes: changes.changes,\r\n        selection: changes.selection || state.selection,\r\n        scrollIntoView: true\r\n      });\r\n      editorView.focus();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"obsidian-editor-toolbar\">\r\n      <div className=\"toolbar-left\">\r\n        {/* Mode Toggle */}\r\n        <div className=\"mode-toggle\">\r\n          <button \r\n            className={`mode-button ${mode === 'live' ? 'active' : ''}`}\r\n            onClick={() => onModeChange('live')}\r\n            aria-pressed={mode === 'live'}\r\n            aria-label=\"Edit mode\"\r\n            title=\"Edit mode\"\r\n          >\r\n            Edit\r\n          </button>\r\n          <button \r\n            className={`mode-button ${mode === 'preview' ? 'active' : ''}`}\r\n            onClick={() => onModeChange('preview')}\r\n            aria-pressed={mode === 'preview'}\r\n            aria-label=\"Preview mode\"\r\n            title=\"Preview mode\"\r\n          >\r\n            Preview\r\n          </button>\r\n        </div>\r\n        \r\n        {/* Format Buttons (only shown in edit mode) */}\r\n        {mode === 'live' && (\r\n          <div className=\"format-buttons\">\r\n            <button \r\n              onClick={() => applyFormatting(toggleBold)}\r\n              className=\"format-button\"\r\n              aria-label=\"Bold\"\r\n              title=\"Bold (Ctrl+B)\"\r\n            >\r\n              <strong>B</strong>\r\n            </button>\r\n            <button \r\n              onClick={() => applyFormatting(toggleItalic)}\r\n              className=\"format-button\"\r\n              aria-label=\"Italic\"\r\n              title=\"Italic (Ctrl+I)\"\r\n            >\r\n              <em>I</em>\r\n            </button>\r\n            <button \r\n              onClick={() => applyFormatting((sel, doc) => toggleHeading(sel, doc, 1))}\r\n              className=\"format-button\"\r\n              aria-label=\"Heading 1\"\r\n              title=\"Heading 1 (Ctrl+1)\"\r\n            >\r\n              H1\r\n            </button>\r\n            <button \r\n              onClick={() => applyFormatting((sel, doc) => toggleHeading(sel, doc, 2))}\r\n              className=\"format-button\"\r\n              aria-label=\"Heading 2\"\r\n              title=\"Heading 2 (Ctrl+2)\"\r\n            >\r\n              H2\r\n            </button>\r\n            <button \r\n              onClick={() => applyFormatting((sel, doc) => toggleHeading(sel, doc, 3))}\r\n              className=\"format-button\"\r\n              aria-label=\"Heading 3\"\r\n              title=\"Heading 3 (Ctrl+3)\"\r\n            >\r\n              H3\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n      <div className=\"toolbar-right\">\r\n        {/* Theme Switcher */}\r\n        <ThemeSwitcher onThemeChange={onThemeChange} />\r\n      </div>\r\n      \r\n      <style>\r\n        {`\r\n        .obsidian-editor-toolbar {\r\n          display: flex;\r\n          justify-content: space-between;\r\n          align-items: center;\r\n          padding: 8px 12px;\r\n          background-color: var(--background-secondary, #f8f8f8);\r\n          border-bottom: 1px solid var(--hr-color, #dcddde);\r\n        }\r\n        \r\n        .toolbar-left, .toolbar-right {\r\n          display: flex;\r\n          align-items: center;\r\n          gap: 16px;\r\n        }\r\n        \r\n        .mode-toggle {\r\n          display: flex;\r\n          border-radius: 4px;\r\n          overflow: hidden;\r\n          border: 1px solid var(--hr-color, #dcddde);\r\n        }\r\n        \r\n        .mode-button {\r\n          padding: 4px 12px;\r\n          border: none;\r\n          background: var(--background-primary, #ffffff);\r\n          color: var(--text-normal, #2e3338);\r\n          cursor: pointer;\r\n          transition: background 0.2s;\r\n        }\r\n        \r\n        .mode-button.active {\r\n          background: var(--interactive-accent, #7b6cd9);\r\n          color: white;\r\n        }\r\n        \r\n        .format-buttons {\r\n          display: flex;\r\n          gap: 4px;\r\n        }\r\n        \r\n        .format-button {\r\n          width: 32px;\r\n          height: 32px;\r\n          display: flex;\r\n          align-items: center;\r\n          justify-content: center;\r\n          border: 1px solid var(--hr-color, #dcddde);\r\n          border-radius: 4px;\r\n          background: var(--background-primary, #ffffff);\r\n          color: var(--text-normal, #2e3338);\r\n          cursor: pointer;\r\n          transition: background 0.2s;\r\n        }\r\n        \r\n        .format-button:hover {\r\n          background: var(--interactive-hover, #e9e9e9);\r\n        }\r\n        \r\n        .dark .mode-button {\r\n          background: var(--background-primary, #2b2b2b);\r\n          color: var(--text-normal, #dcddde);\r\n        }\r\n        \r\n        .dark .format-button {\r\n          background: var(--background-primary, #2b2b2b);\r\n          color: var(--text-normal, #dcddde);\r\n          border-color: var(--hr-color, #444444);\r\n        }\r\n        \r\n        .dark .format-button:hover {\r\n          background: var(--interactive-hover, #4a4a4a);\r\n        }\r\n        `}\r\n      </style>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditorToolbar; ","'use client';\r\n\r\nimport React, { useState } from 'react';\r\nimport { EditorView } from '@codemirror/view';\r\nimport { useTheme } from '../../contexts/ThemeContext';\r\nimport { setEditorTheme, EditorThemeName } from './utils/theme';\r\n\r\n// Import our modular components\r\nimport EditorCore from './components/EditorCore';\r\nimport EditorToolbar from './components/EditorToolbar';\r\n\r\n// Import CSS\r\nimport './CodeMirrorEditor.css';\r\n\r\n/**\r\n * Props for the CodeMirrorEditor component.\r\n * @interface CodeMirrorEditorProps\r\n */\r\nexport interface CodeMirrorEditorProps {\r\n  /** Initial markdown content for the editor */\r\n  initialValue?: string;\r\n  /** Whether the editor is read-only */\r\n  readOnly?: boolean;\r\n  /** Optional callback when content changes */\r\n  onChange?: (content: string) => void;\r\n  /** Optional callback for save actions (Ctrl+S) */\r\n  onSave?: () => void;\r\n}\r\n\r\n/**\r\n * A CodeMirror editor component with Markdown syntax highlighting and preview mode.\r\n * This component is client-side only and includes SSR-safety measures.\r\n * \r\n * @param props - Component props\r\n * @returns React component\r\n */\r\nconst CodeMirrorEditor: React.FC<CodeMirrorEditorProps> = ({ \r\n  initialValue = '', \r\n  readOnly = false, \r\n  onChange, \r\n  onSave \r\n}) => {\r\n  // Editor view reference\r\n  const [editorView, setEditorView] = useState<EditorView | null>(null);\r\n  \r\n  // Editor mode (live editing or preview)\r\n  const [currentMode, setCurrentMode] = useState<'live' | 'preview'>('live');\r\n  \r\n  // Theme state\r\n  const { mounted } = useTheme();\r\n  \r\n  // Handle editor view creation\r\n  const handleEditorViewCreated = (view: EditorView) => {\r\n    setEditorView(view);\r\n  };\r\n  \r\n  // Handle mode changes\r\n  const handleModeChange = (mode: 'live' | 'preview') => {\r\n    setCurrentMode(mode);\r\n  };\r\n  \r\n  // Handle theme changes\r\n  const handleThemeChange = (themeName: EditorThemeName) => {\r\n    setEditorTheme(themeName);\r\n  };\r\n\r\n  return (\r\n    <div className=\"obsidian-editor-container\">\r\n      {/* Only render when mounted to prevent SSR issues */}\r\n      {mounted && (\r\n        <>\r\n          {/* Toolbar with formatting buttons */}\r\n          <EditorToolbar \r\n            editorView={editorView} \r\n            mode={currentMode}\r\n            onModeChange={handleModeChange}\r\n            onThemeChange={handleThemeChange}\r\n          />\r\n          \r\n          {/* Core editor component */}\r\n          <div className=\"obsidian-editor-content\">\r\n            <EditorCore\r\n              initialValue={initialValue}\r\n              readOnly={readOnly}\r\n              mode={currentMode}\r\n              onChange={onChange}\r\n              onSave={onSave}\r\n              onEditorViewCreated={handleEditorViewCreated}\r\n            />\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CodeMirrorEditor;\r\n","'use client';\r\n\r\nimport React from 'react';\r\nimport CodeMirrorEditor, { CodeMirrorEditorProps } from '../app/obsidian-editor/CodeMirrorEditor';\r\n\r\nexport function Editor(props: CodeMirrorEditorProps) {\r\n  return <CodeMirrorEditor {...props} />;\r\n} ","'use client';\r\n\r\nimport React from 'react';\r\nimport { useTheme } from '../contexts/ThemeContext';\r\n\r\n/**\r\n * A simple toggle button for switching between light and dark themes\r\n */\r\nexport function ThemeToggle() {\r\n  const { theme, toggleTheme } = useTheme();\r\n  \r\n  return (\r\n    <button\r\n      onClick={toggleTheme}\r\n      className=\"theme-toggle-button\"\r\n      aria-label={`Switch to ${theme === 'light' ? 'dark' : 'light'} theme`}\r\n    >\r\n      {theme === 'light' ? '🌙' : '☀️'}\r\n      \r\n      <style>\r\n        {`\r\n        .theme-toggle-button {\r\n          padding: 8px 12px;\r\n          border-radius: 4px;\r\n          background: var(--background-secondary, #f5f5f5);\r\n          border: 1px solid var(--border-color, #e2e2e2);\r\n          cursor: pointer;\r\n          font-size: 16px;\r\n          line-height: 1;\r\n          transition: background-color 0.2s ease;\r\n        }\r\n        \r\n        .theme-toggle-button:hover {\r\n          background: var(--background-modifier-hover, #e9e9e9);\r\n        }\r\n        \r\n        .dark .theme-toggle-button {\r\n          background: var(--background-secondary, #2d333b);\r\n          border-color: var(--border-color, #444c56);\r\n        }\r\n        \r\n        .dark .theme-toggle-button:hover {\r\n          background: var(--background-modifier-hover, #444c56);\r\n        }\r\n        `}\r\n      </style>\r\n    </button>\r\n  );\r\n}\r\n"]}